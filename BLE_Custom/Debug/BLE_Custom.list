
BLE_Custom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9cc  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000084c  0800bb0c  0800bb0c  0001bb0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c358  0800c358  0001c358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c360  0800c360  0001c360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c364  0800c364  0001c364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000090  20000008  0800c368  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  20000098  0800c3f8  00020098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_APP_CONTEXT 00000088  20000134  0800c491  00020134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 BLE_DRIVER_CONTEXT 0000003d  200001bc  0800c519  000201bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 SYSTEM_DRIVER_CONTEXT 00000011  200001fc  0800c556  000201fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000015d4  20000210  0800c567  00020210  2**2
                  ALLOC
 12 ._user_heap_stack 00001404  200017e4  0800c567  000217e4  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       000001b8  20030028  20030028  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000877  200301e0  200301e0  00030000  2**2
                  ALLOC
 17 .debug_info   0002f32e  00000000  00000000  0002023d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 000063db  00000000  00000000  0004f56b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00002958  00000000  00000000  00055948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00002698  00000000  00000000  000582a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002de5c  00000000  00000000  0005a938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0002ffba  00000000  00000000  00088794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000faa68  00000000  00000000  000b874e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000050  00000000  00000000  001b31b6  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000b2f8  00000000  00000000  001b3208  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000210 	.word	0x20000210
 800015c:	00000000 	.word	0x00000000
 8000160:	0800baf4 	.word	0x0800baf4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000214 	.word	0x20000214
 800017c:	0800baf4 	.word	0x0800baf4

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000240:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000244:	f000 b974 	b.w	8000530 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	468e      	mov	lr, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	d14d      	bne.n	800030a <__udivmoddi4+0xaa>
 800026e:	428a      	cmp	r2, r1
 8000270:	4694      	mov	ip, r2
 8000272:	d969      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000274:	fab2 f282 	clz	r2, r2
 8000278:	b152      	cbz	r2, 8000290 <__udivmoddi4+0x30>
 800027a:	fa01 f302 	lsl.w	r3, r1, r2
 800027e:	f1c2 0120 	rsb	r1, r2, #32
 8000282:	fa20 f101 	lsr.w	r1, r0, r1
 8000286:	fa0c fc02 	lsl.w	ip, ip, r2
 800028a:	ea41 0e03 	orr.w	lr, r1, r3
 800028e:	4094      	lsls	r4, r2
 8000290:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000294:	0c21      	lsrs	r1, r4, #16
 8000296:	fbbe f6f8 	udiv	r6, lr, r8
 800029a:	fa1f f78c 	uxth.w	r7, ip
 800029e:	fb08 e316 	mls	r3, r8, r6, lr
 80002a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002a6:	fb06 f107 	mul.w	r1, r6, r7
 80002aa:	4299      	cmp	r1, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002b6:	f080 811f 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 811c 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c0:	3e02      	subs	r6, #2
 80002c2:	4463      	add	r3, ip
 80002c4:	1a5b      	subs	r3, r3, r1
 80002c6:	b2a4      	uxth	r4, r4
 80002c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002cc:	fb08 3310 	mls	r3, r8, r0, r3
 80002d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d4:	fb00 f707 	mul.w	r7, r0, r7
 80002d8:	42a7      	cmp	r7, r4
 80002da:	d90a      	bls.n	80002f2 <__udivmoddi4+0x92>
 80002dc:	eb1c 0404 	adds.w	r4, ip, r4
 80002e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002e4:	f080 810a 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	f240 8107 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002ee:	4464      	add	r4, ip
 80002f0:	3802      	subs	r0, #2
 80002f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f6:	1be4      	subs	r4, r4, r7
 80002f8:	2600      	movs	r6, #0
 80002fa:	b11d      	cbz	r5, 8000304 <__udivmoddi4+0xa4>
 80002fc:	40d4      	lsrs	r4, r2
 80002fe:	2300      	movs	r3, #0
 8000300:	e9c5 4300 	strd	r4, r3, [r5]
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0xc2>
 800030e:	2d00      	cmp	r5, #0
 8000310:	f000 80ef 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000314:	2600      	movs	r6, #0
 8000316:	e9c5 0100 	strd	r0, r1, [r5]
 800031a:	4630      	mov	r0, r6
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f683 	clz	r6, r3
 8000326:	2e00      	cmp	r6, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	428b      	cmp	r3, r1
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80f9 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb61 0303 	sbc.w	r3, r1, r3
 800033a:	2001      	movs	r0, #1
 800033c:	469e      	mov	lr, r3
 800033e:	2d00      	cmp	r5, #0
 8000340:	d0e0      	beq.n	8000304 <__udivmoddi4+0xa4>
 8000342:	e9c5 4e00 	strd	r4, lr, [r5]
 8000346:	e7dd      	b.n	8000304 <__udivmoddi4+0xa4>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8092 	bne.w	800047a <__udivmoddi4+0x21a>
 8000356:	eba1 010c 	sub.w	r1, r1, ip
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2601      	movs	r6, #1
 8000364:	0c20      	lsrs	r0, r4, #16
 8000366:	fbb1 f3f7 	udiv	r3, r1, r7
 800036a:	fb07 1113 	mls	r1, r7, r3, r1
 800036e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	4288      	cmp	r0, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0101 	adds.w	r1, ip, r1
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	4288      	cmp	r0, r1
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 800038a:	4643      	mov	r3, r8
 800038c:	1a09      	subs	r1, r1, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb1 f0f7 	udiv	r0, r1, r7
 8000394:	fb07 1110 	mls	r1, r7, r0, r1
 8000398:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2ca>
 80003b4:	4608      	mov	r0, r1
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79c      	b.n	80002fa <__udivmoddi4+0x9a>
 80003c0:	f1c6 0720 	rsb	r7, r6, #32
 80003c4:	40b3      	lsls	r3, r6
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa20 f407 	lsr.w	r4, r0, r7
 80003d2:	fa01 f306 	lsl.w	r3, r1, r6
 80003d6:	431c      	orrs	r4, r3
 80003d8:	40f9      	lsrs	r1, r7
 80003da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003de:	fa00 f306 	lsl.w	r3, r0, r6
 80003e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003e6:	0c20      	lsrs	r0, r4, #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fb09 1118 	mls	r1, r9, r8, r1
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	fb08 f00e 	mul.w	r0, r8, lr
 80003f8:	4288      	cmp	r0, r1
 80003fa:	fa02 f206 	lsl.w	r2, r2, r6
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	4288      	cmp	r0, r1
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4461      	add	r1, ip
 8000418:	1a09      	subs	r1, r1, r0
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000420:	fb09 1110 	mls	r1, r9, r0, r1
 8000424:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000428:	fb00 fe0e 	mul.w	lr, r0, lr
 800042c:	458e      	cmp	lr, r1
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0101 	adds.w	r1, ip, r1
 8000434:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	458e      	cmp	lr, r1
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4461      	add	r1, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9402 	umull	r9, r4, r0, r2
 800044a:	eba1 010e 	sub.w	r1, r1, lr
 800044e:	42a1      	cmp	r1, r4
 8000450:	46c8      	mov	r8, r9
 8000452:	46a6      	mov	lr, r4
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x212>
 800045a:	ebb3 0208 	subs.w	r2, r3, r8
 800045e:	eb61 010e 	sbc.w	r1, r1, lr
 8000462:	fa01 f707 	lsl.w	r7, r1, r7
 8000466:	fa22 f306 	lsr.w	r3, r2, r6
 800046a:	40f1      	lsrs	r1, r6
 800046c:	431f      	orrs	r7, r3
 800046e:	e9c5 7100 	strd	r7, r1, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	f1c2 0320 	rsb	r3, r2, #32
 800047e:	40d8      	lsrs	r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa21 f303 	lsr.w	r3, r1, r3
 8000488:	4091      	lsls	r1, r2
 800048a:	4301      	orrs	r1, r0
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb3 f0f7 	udiv	r0, r3, r7
 8000498:	fb07 3610 	mls	r6, r7, r0, r3
 800049c:	0c0b      	lsrs	r3, r1, #16
 800049e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004a2:	fb00 f60e 	mul.w	r6, r0, lr
 80004a6:	429e      	cmp	r6, r3
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	429e      	cmp	r6, r3
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3802      	subs	r0, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1b9b      	subs	r3, r3, r6
 80004c2:	b289      	uxth	r1, r1
 80004c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004c8:	fb07 3316 	mls	r3, r7, r6, r3
 80004cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d0:	fb06 f30e 	mul.w	r3, r6, lr
 80004d4:	428b      	cmp	r3, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3e02      	subs	r6, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	1ac9      	subs	r1, r1, r3
 80004ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	462e      	mov	r6, r5
 80004f4:	4628      	mov	r0, r5
 80004f6:	e705      	b.n	8000304 <__udivmoddi4+0xa4>
 80004f8:	4606      	mov	r6, r0
 80004fa:	e6e3      	b.n	80002c4 <__udivmoddi4+0x64>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6f8      	b.n	80002f2 <__udivmoddi4+0x92>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb64 0e0c 	sbc.w	lr, r4, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4646      	mov	r6, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4620      	mov	r0, r4
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	3b02      	subs	r3, #2
 8000522:	4461      	add	r1, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x12c>
 8000526:	4630      	mov	r0, r6
 8000528:	e709      	b.n	800033e <__udivmoddi4+0xde>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x156>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800053c:	4b06      	ldr	r3, [pc, #24]	; (8000558 <LL_EXTI_EnableIT_32_63+0x24>)
 800053e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000542:	4905      	ldr	r1, [pc, #20]	; (8000558 <LL_EXTI_EnableIT_32_63+0x24>)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	4313      	orrs	r3, r2
 8000548:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800054c:	bf00      	nop
 800054e:	370c      	adds	r7, #12
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr
 8000558:	58000800 	.word	0x58000800

0800055c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000564:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000568:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800056a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4313      	orrs	r3, r2
 8000572:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000574:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000578:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4013      	ands	r3, r2
 800057e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000580:	68fb      	ldr	r3, [r7, #12]
}
 8000582:	bf00      	nop
 8000584:	3714      	adds	r7, #20
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr

0800058e <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800058e:	b480      	push	{r7}
 8000590:	b085      	sub	sp, #20
 8000592:	af00      	add	r7, sp, #0
 8000594:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000596:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800059a:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 800059e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4313      	orrs	r3, r2
 80005a6:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 80005aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005ae:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4013      	ands	r3, r2
 80005b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005b8:	68fb      	ldr	r3, [r7, #12]
}
 80005ba:	bf00      	nop
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr

080005c6 <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 80005c6:	b580      	push	{r7, lr}
 80005c8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 80005ca:	f003 f861 	bl	8003690 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 80005ce:	f003 f865 	bl	800369c <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 80005d2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80005d6:	f7ff ffad 	bl	8000534 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 80005da:	f008 fb31 	bl	8008c40 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 80005de:	f000 f821 	bl	8000624 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 80005e2:	f000 f8c3 	bl	800076c <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 80005e6:	bf00      	nop
}
 80005e8:	bd80      	pop	{r7, pc}
	...

080005ec <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 80005ec:	b5b0      	push	{r4, r5, r7, lr}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 80005f2:	4b0b      	ldr	r3, [pc, #44]	; (8000620 <APPD_EnableCPU2+0x34>)
 80005f4:	1d3c      	adds	r4, r7, #4
 80005f6:	461d      	mov	r5, r3
 80005f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000600:	c403      	stmia	r4!, {r0, r1}
 8000602:	8022      	strh	r2, [r4, #0]
 8000604:	3402      	adds	r4, #2
 8000606:	0c13      	lsrs	r3, r2, #16
 8000608:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 800060a:	f009 ff33 	bl	800a474 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	4618      	mov	r0, r3
 8000612:	f008 fd88 	bl	8009126 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000616:	bf00      	nop
}
 8000618:	3720      	adds	r7, #32
 800061a:	46bd      	mov	sp, r7
 800061c:	bdb0      	pop	{r4, r5, r7, pc}
 800061e:	bf00      	nop
 8000620:	0800bb0c 	.word	0x0800bb0c

08000624 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b088      	sub	sp, #32
 8000628:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000640:	2300      	movs	r3, #0
 8000642:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000644:	2300      	movs	r3, #0
 8000646:	77fb      	strb	r3, [r7, #31]
 8000648:	e038      	b.n	80006bc <APPD_SetCPU2GpioConfig+0x98>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 800064a:	7ffb      	ldrb	r3, [r7, #31]
 800064c:	4a44      	ldr	r2, [pc, #272]	; (8000760 <APPD_SetCPU2GpioConfig+0x13c>)
 800064e:	00db      	lsls	r3, r3, #3
 8000650:	4413      	add	r3, r2
 8000652:	799b      	ldrb	r3, [r3, #6]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d02b      	beq.n	80006b0 <APPD_SetCPU2GpioConfig+0x8c>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8000658:	7ffb      	ldrb	r3, [r7, #31]
 800065a:	4a41      	ldr	r2, [pc, #260]	; (8000760 <APPD_SetCPU2GpioConfig+0x13c>)
 800065c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000660:	4a40      	ldr	r2, [pc, #256]	; (8000764 <APPD_SetCPU2GpioConfig+0x140>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d01b      	beq.n	800069e <APPD_SetCPU2GpioConfig+0x7a>
 8000666:	4a3f      	ldr	r2, [pc, #252]	; (8000764 <APPD_SetCPU2GpioConfig+0x140>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d823      	bhi.n	80006b4 <APPD_SetCPU2GpioConfig+0x90>
 800066c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000670:	d003      	beq.n	800067a <APPD_SetCPU2GpioConfig+0x56>
 8000672:	4a3d      	ldr	r2, [pc, #244]	; (8000768 <APPD_SetCPU2GpioConfig+0x144>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d009      	beq.n	800068c <APPD_SetCPU2GpioConfig+0x68>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 8000678:	e01c      	b.n	80006b4 <APPD_SetCPU2GpioConfig+0x90>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 800067a:	7ffb      	ldrb	r3, [r7, #31]
 800067c:	4a38      	ldr	r2, [pc, #224]	; (8000760 <APPD_SetCPU2GpioConfig+0x13c>)
 800067e:	00db      	lsls	r3, r3, #3
 8000680:	4413      	add	r3, r2
 8000682:	889a      	ldrh	r2, [r3, #4]
 8000684:	8bbb      	ldrh	r3, [r7, #28]
 8000686:	4313      	orrs	r3, r2
 8000688:	83bb      	strh	r3, [r7, #28]
          break;
 800068a:	e014      	b.n	80006b6 <APPD_SetCPU2GpioConfig+0x92>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 800068c:	7ffb      	ldrb	r3, [r7, #31]
 800068e:	4a34      	ldr	r2, [pc, #208]	; (8000760 <APPD_SetCPU2GpioConfig+0x13c>)
 8000690:	00db      	lsls	r3, r3, #3
 8000692:	4413      	add	r3, r2
 8000694:	889a      	ldrh	r2, [r3, #4]
 8000696:	8b7b      	ldrh	r3, [r7, #26]
 8000698:	4313      	orrs	r3, r2
 800069a:	837b      	strh	r3, [r7, #26]
          break;
 800069c:	e00b      	b.n	80006b6 <APPD_SetCPU2GpioConfig+0x92>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 800069e:	7ffb      	ldrb	r3, [r7, #31]
 80006a0:	4a2f      	ldr	r2, [pc, #188]	; (8000760 <APPD_SetCPU2GpioConfig+0x13c>)
 80006a2:	00db      	lsls	r3, r3, #3
 80006a4:	4413      	add	r3, r2
 80006a6:	889a      	ldrh	r2, [r3, #4]
 80006a8:	8b3b      	ldrh	r3, [r7, #24]
 80006aa:	4313      	orrs	r3, r2
 80006ac:	833b      	strh	r3, [r7, #24]
          break;
 80006ae:	e002      	b.n	80006b6 <APPD_SetCPU2GpioConfig+0x92>
      }
    }
 80006b0:	bf00      	nop
 80006b2:	e000      	b.n	80006b6 <APPD_SetCPU2GpioConfig+0x92>
          break;
 80006b4:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 80006b6:	7ffb      	ldrb	r3, [r7, #31]
 80006b8:	3301      	adds	r3, #1
 80006ba:	77fb      	strb	r3, [r7, #31]
 80006bc:	7ffb      	ldrb	r3, [r7, #31]
 80006be:	2b25      	cmp	r3, #37	; 0x25
 80006c0:	d9c3      	bls.n	800064a <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 80006c6:	2301      	movs	r3, #1
 80006c8:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ca:	2303      	movs	r3, #3
 80006cc:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 80006ce:	8bbb      	ldrh	r3, [r7, #28]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d014      	beq.n	80006fe <APPD_SetCPU2GpioConfig+0xda>
  {
    gpio_config.Pin = gpioa_pin_list;
 80006d4:	8bbb      	ldrh	r3, [r7, #28]
 80006d6:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d8:	2001      	movs	r0, #1
 80006da:	f7ff ff3f 	bl	800055c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 80006de:	2001      	movs	r0, #1
 80006e0:	f7ff ff55 	bl	800058e <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	4619      	mov	r1, r3
 80006e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ec:	f003 fce8 	bl	80040c0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 80006f0:	8bbb      	ldrh	r3, [r7, #28]
 80006f2:	2200      	movs	r2, #0
 80006f4:	4619      	mov	r1, r3
 80006f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006fa:	f003 fe51 	bl	80043a0 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 80006fe:	8b7b      	ldrh	r3, [r7, #26]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d012      	beq.n	800072a <APPD_SetCPU2GpioConfig+0x106>
  {
    gpio_config.Pin = gpiob_pin_list;
 8000704:	8b7b      	ldrh	r3, [r7, #26]
 8000706:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000708:	2002      	movs	r0, #2
 800070a:	f7ff ff27 	bl	800055c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 800070e:	2002      	movs	r0, #2
 8000710:	f7ff ff3d 	bl	800058e <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	4619      	mov	r1, r3
 8000718:	4813      	ldr	r0, [pc, #76]	; (8000768 <APPD_SetCPU2GpioConfig+0x144>)
 800071a:	f003 fcd1 	bl	80040c0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 800071e:	8b7b      	ldrh	r3, [r7, #26]
 8000720:	2200      	movs	r2, #0
 8000722:	4619      	mov	r1, r3
 8000724:	4810      	ldr	r0, [pc, #64]	; (8000768 <APPD_SetCPU2GpioConfig+0x144>)
 8000726:	f003 fe3b 	bl	80043a0 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 800072a:	8b3b      	ldrh	r3, [r7, #24]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d013      	beq.n	8000758 <APPD_SetCPU2GpioConfig+0x134>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000730:	8b3b      	ldrh	r3, [r7, #24]
 8000732:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000734:	2004      	movs	r0, #4
 8000736:	f7ff ff11 	bl	800055c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 800073a:	2004      	movs	r0, #4
 800073c:	f7ff ff27 	bl	800058e <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	4619      	mov	r1, r3
 8000744:	4807      	ldr	r0, [pc, #28]	; (8000764 <APPD_SetCPU2GpioConfig+0x140>)
 8000746:	f003 fcbb 	bl	80040c0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 800074a:	8b3b      	ldrh	r3, [r7, #24]
 800074c:	2200      	movs	r2, #0
 800074e:	4619      	mov	r1, r3
 8000750:	4804      	ldr	r0, [pc, #16]	; (8000764 <APPD_SetCPU2GpioConfig+0x140>)
 8000752:	f003 fe25 	bl	80043a0 <HAL_GPIO_WritePin>
  }
  
/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8000756:	bf00      	nop
 8000758:	bf00      	nop
}
 800075a:	3720      	adds	r7, #32
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	0800c090 	.word	0x0800c090
 8000764:	48000800 	.word	0x48000800
 8000768:	48000400 	.word	0x48000400

0800076c <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8000770:	bf00      	nop
}
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr

0800077a <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 800077a:	b580      	push	{r7, lr}
 800077c:	af00      	add	r7, sp, #0
#endif
}
else if (CFG_DEBUG_TRACE_UART == hw_uart1)
{
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 800077e:	f001 fb4f 	bl	8001e20 <MX_USART1_UART_Init>
#endif
}
#endif

/* USER CODE END DbgOutputInit */
  return;
 8000782:	bf00      	nop
}
 8000784:	bd80      	pop	{r7, pc}

08000786 <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8000786:	b580      	push	{r7, lr}
 8000788:	b084      	sub	sp, #16
 800078a:	af00      	add	r7, sp, #0
 800078c:	60f8      	str	r0, [r7, #12]
 800078e:	460b      	mov	r3, r1
 8000790:	607a      	str	r2, [r7, #4]
 8000792:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8000794:	897a      	ldrh	r2, [r7, #10]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	68f9      	ldr	r1, [r7, #12]
 800079a:	2000      	movs	r0, #0
 800079c:	f001 f9be 	bl	8001b1c <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 80007a0:	bf00      	nop
}
 80007a2:	3710      	adds	r7, #16
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80007b0:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <LL_C2_PWR_SetPowerMode+0x28>)
 80007b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80007b6:	f023 0207 	bic.w	r2, r3, #7
 80007ba:	4905      	ldr	r1, [pc, #20]	; (80007d0 <LL_C2_PWR_SetPowerMode+0x28>)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	4313      	orrs	r3, r2
 80007c0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	58000400 	.word	0x58000400

080007d4 <LL_EXTI_EnableIT_32_63>:
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <LL_EXTI_EnableIT_32_63+0x24>)
 80007de:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80007e2:	4905      	ldr	r1, [pc, #20]	; (80007f8 <LL_EXTI_EnableIT_32_63+0x24>)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4313      	orrs	r3, r2
 80007e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80007ec:	bf00      	nop
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr
 80007f8:	58000800 	.word	0x58000800

080007fc <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000804:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000808:	4a0a      	ldr	r2, [pc, #40]	; (8000834 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 800080a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800080e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000812:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000816:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	021b      	lsls	r3, r3, #8
 800081e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000822:	4313      	orrs	r3, r2
 8000824:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000828:	bf00      	nop
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	cafecafe 	.word	0xcafecafe

08000838 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000844:	689b      	ldr	r3, [r3, #8]
 8000846:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800084a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4313      	orrs	r3, r2
 8000852:	608b      	str	r3, [r1, #8]
}
 8000854:	bf00      	nop
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800086c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000874:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr

08000882 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000886:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800088a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800088e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000892:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000896:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800089a:	bf00      	nop
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80008a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80008b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80008b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80008b8:	d101      	bne.n	80008be <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80008ba:	2301      	movs	r3, #1
 80008bc:	e000      	b.n	80008c0 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80008be:	2300      	movs	r3, #0
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr

080008ca <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80008ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80008d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80008de:	d101      	bne.n	80008e4 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80008e0:	2301      	movs	r3, #1
 80008e2:	e000      	b.n	80008e6 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80008e4:	2300      	movs	r3, #0
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr

080008f0 <LL_AHB3_GRP1_EnableClock>:
{
 80008f0:	b480      	push	{r7}
 80008f2:	b085      	sub	sp, #20
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80008f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80008fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4313      	orrs	r3, r2
 8000906:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800090c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4013      	ands	r3, r2
 8000912:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000914:	68fb      	ldr	r3, [r7, #12]
}
 8000916:	bf00      	nop
 8000918:	3714      	adds	r7, #20
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
	...

08000924 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000928:	4b04      	ldr	r3, [pc, #16]	; (800093c <LL_DBGMCU_GetRevisionID+0x18>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	0c1b      	lsrs	r3, r3, #16
 800092e:	b29b      	uxth	r3, r3
}
 8000930:	4618      	mov	r0, r3
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	e0042000 	.word	0xe0042000

08000940 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	685a      	ldr	r2, [r3, #4]
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	041b      	lsls	r3, r3, #16
 8000952:	431a      	orrs	r2, r3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	605a      	str	r2, [r3, #4]
}
 8000958:	bf00      	nop
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	685a      	ldr	r2, [r3, #4]
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	431a      	orrs	r2, r3
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	605a      	str	r2, [r3, #4]
}
 800097a:	bf00      	nop
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000986:	b480      	push	{r7}
 8000988:	b083      	sub	sp, #12
 800098a:	af00      	add	r7, sp, #0
 800098c:	6078      	str	r0, [r7, #4]
 800098e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	695a      	ldr	r2, [r3, #20]
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	041b      	lsls	r3, r3, #16
 8000998:	431a      	orrs	r2, r3
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	615a      	str	r2, [r3, #20]
}
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80009aa:	b480      	push	{r7}
 80009ac:	b083      	sub	sp, #12
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	6078      	str	r0, [r7, #4]
 80009b2:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	695a      	ldr	r2, [r3, #20]
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	431a      	orrs	r2, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	615a      	str	r2, [r3, #20]
}
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	683a      	ldr	r2, [r7, #0]
 80009da:	609a      	str	r2, [r3, #8]
}
 80009dc:	bf00      	nop
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	683a      	ldr	r2, [r7, #0]
 80009f6:	619a      	str	r2, [r3, #24]
}
 80009f8:	bf00      	nop
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	22ff      	movs	r2, #255	; 0xff
 8000a10:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr

08000a1e <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	b083      	sub	sp, #12
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	22ca      	movs	r2, #202	; 0xca
 8000a2a:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2253      	movs	r2, #83	; 0x53
 8000a30:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	b083      	sub	sp, #12
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
 8000a46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	689b      	ldr	r3, [r3, #8]
 8000a4c:	f023 0207 	bic.w	r2, r3, #7
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	431a      	orrs	r2, r3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	609a      	str	r2, [r3, #8]
}
 8000a58:	bf00      	nop
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config( void )
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG( FLASH_FLAG_OPTVERR );
 8000a68:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <MX_APPE_Config+0x18>)
 8000a6a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a6e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device( );
 8000a70:	f000 f82a 	bl	8000ac8 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000a74:	f000 f86a 	bl	8000b4c <Config_HSE>

  return;
 8000a78:	bf00      	nop
}
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	58004000 	.word	0x58004000

08000a80 <MX_APPE_Init>:

void MX_APPE_Init( void )
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  System_Init( );       /**< System initialization */
 8000a84:	f000 f876 	bl	8000b74 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000a88:	f000 f88e 	bl	8000ba8 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000a8c:	4906      	ldr	r1, [pc, #24]	; (8000aa8 <MX_APPE_Init+0x28>)
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f000 fe3c 	bl	800170c <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8000a94:	f7ff fd97 	bl	80005c6 <APPD_Init>
  
  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8000a98:	2101      	movs	r1, #1
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	f009 fd88 	bl	800a5b0 <UTIL_LPM_SetOffMode>

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000aa0:	f000 f890 	bl	8000bc4 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000aa4:	bf00      	nop
}
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000470 	.word	0x20000470

08000aac <Init_Smps>:

void Init_Smps( void )
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif

  return;
 8000ab0:	bf00      	nop
}
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr

08000aba <Init_Exti>:

void Init_Exti( void )
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63( LL_EXTI_LINE_36 & LL_EXTI_LINE_38 );
 8000abe:	2000      	movs	r0, #0
 8000ac0:	f7ff fe88 	bl	80007d4 <LL_EXTI_EnableIT_32_63>

  return;
 8000ac4:	bf00      	nop
}
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device( void )
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
  Reset_BackupDomain();
 8000acc:	f000 f804 	bl	8000ad8 <Reset_BackupDomain>

  Reset_IPCC();
 8000ad0:	f000 f81a 	bl	8000b08 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW */

  return;
 8000ad4:	bf00      	nop
}
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <Reset_BackupDomain>:

#if ( CFG_HW_RESET_BY_FW == 1 )
static void Reset_BackupDomain( void )
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8000adc:	f7ff fee2 	bl	80008a4 <LL_RCC_IsActiveFlag_PINRST>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d00d      	beq.n	8000b02 <Reset_BackupDomain+0x2a>
 8000ae6:	f7ff fef0 	bl	80008ca <LL_RCC_IsActiveFlag_SFTRST>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d108      	bne.n	8000b02 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8000af0:	f003 fd18 	bl	8004524 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8000af4:	f003 fd16 	bl	8004524 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8000af8:	f7ff feb2 	bl	8000860 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8000afc:	f7ff fec1 	bl	8000882 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8000b00:	bf00      	nop
 8000b02:	bf00      	nop
}
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <Reset_IPCC>:

static void Reset_IPCC( void )
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8000b0c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000b10:	f7ff feee 	bl	80008f0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8000b14:	213f      	movs	r1, #63	; 0x3f
 8000b16:	480c      	ldr	r0, [pc, #48]	; (8000b48 <Reset_IPCC+0x40>)
 8000b18:	f7ff ff58 	bl	80009cc <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8000b1c:	213f      	movs	r1, #63	; 0x3f
 8000b1e:	480a      	ldr	r0, [pc, #40]	; (8000b48 <Reset_IPCC+0x40>)
 8000b20:	f7ff ff62 	bl	80009e8 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8000b24:	213f      	movs	r1, #63	; 0x3f
 8000b26:	4808      	ldr	r0, [pc, #32]	; (8000b48 <Reset_IPCC+0x40>)
 8000b28:	f7ff ff0a 	bl	8000940 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8000b2c:	213f      	movs	r1, #63	; 0x3f
 8000b2e:	4806      	ldr	r0, [pc, #24]	; (8000b48 <Reset_IPCC+0x40>)
 8000b30:	f7ff ff29 	bl	8000986 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8000b34:	213f      	movs	r1, #63	; 0x3f
 8000b36:	4804      	ldr	r0, [pc, #16]	; (8000b48 <Reset_IPCC+0x40>)
 8000b38:	f7ff ff14 	bl	8000964 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8000b3c:	213f      	movs	r1, #63	; 0x3f
 8000b3e:	4802      	ldr	r0, [pc, #8]	; (8000b48 <Reset_IPCC+0x40>)
 8000b40:	f7ff ff33 	bl	80009aa <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8000b44:	bf00      	nop
}
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	58000c00 	.word	0x58000c00

08000b4c <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW */

static void Config_HSE(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000b52:	2000      	movs	r0, #0
 8000b54:	f008 faa8 	bl	80090a8 <OTP_Read>
 8000b58:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d005      	beq.n	8000b6c <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	799b      	ldrb	r3, [r3, #6]
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff fe49 	bl	80007fc <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000b6a:	bf00      	nop
 8000b6c:	bf00      	nop
}
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <System_Init>:

static void System_Init( void )
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  Init_Smps( );
 8000b78:	f7ff ff98 	bl	8000aac <Init_Smps>

  Init_Exti( );
 8000b7c:	f7ff ff9d 	bl	8000aba <Init_Exti>

  Init_Rtc( );
 8000b80:	f000 f802 	bl	8000b88 <Init_Rtc>

  return;
 8000b84:	bf00      	nop
}
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <Init_Rtc>:

static void Init_Rtc( void )
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000b8c:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <Init_Rtc+0x1c>)
 8000b8e:	f7ff ff46 	bl	8000a1e <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000b92:	2100      	movs	r1, #0
 8000b94:	4803      	ldr	r0, [pc, #12]	; (8000ba4 <Init_Rtc+0x1c>)
 8000b96:	f7ff ff52 	bl	8000a3e <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000b9a:	4802      	ldr	r0, [pc, #8]	; (8000ba4 <Init_Rtc+0x1c>)
 8000b9c:	f7ff ff32 	bl	8000a04 <LL_RTC_EnableWriteProtection>

  return;
 8000ba0:	bf00      	nop
}
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40002800 	.word	0x40002800

08000ba8 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000bac:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000bb0:	f7ff fe42 	bl	8000838 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000bb4:	f009 fcea 	bl	800a58c <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000bb8:	2004      	movs	r0, #4
 8000bba:	f7ff fdf5 	bl	80007a8 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8000bbe:	bf00      	nop
}
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b088      	sub	sp, #32
 8000bc8:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000bca:	f009 fa9d 	bl	800a108 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 8000bce:	4a11      	ldr	r2, [pc, #68]	; (8000c14 <appe_Tl_Init+0x50>)
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	2020      	movs	r0, #32
 8000bd4:	f009 fe06 	bl	800a7e4 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000bd8:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <appe_Tl_Init+0x54>)
 8000bda:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000bdc:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <appe_Tl_Init+0x58>)
 8000bde:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000be0:	463b      	mov	r3, r7
 8000be2:	4619      	mov	r1, r3
 8000be4:	480e      	ldr	r0, [pc, #56]	; (8000c20 <appe_Tl_Init+0x5c>)
 8000be6:	f008 fb79 	bl	80092dc <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000bea:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <appe_Tl_Init+0x60>)
 8000bec:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <appe_Tl_Init+0x64>)
 8000bf0:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <appe_Tl_Init+0x68>)
 8000bf4:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000bf6:	f240 533c 	movw	r3, #1340	; 0x53c
 8000bfa:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8000bfc:	f107 0308 	add.w	r3, r7, #8
 8000c00:	4618      	mov	r0, r3
 8000c02:	f009 fbc3 	bl	800a38c <TL_MM_Init>

  TL_Enable();
 8000c06:	f009 fa79 	bl	800a0fc <TL_Enable>

  return;
 8000c0a:	bf00      	nop
}
 8000c0c:	3720      	adds	r7, #32
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	08009315 	.word	0x08009315
 8000c18:	20030724 	.word	0x20030724
 8000c1c:	08000c31 	.word	0x08000c31
 8000c20:	08000c49 	.word	0x08000c49
 8000c24:	2003093c 	.word	0x2003093c
 8000c28:	20030830 	.word	0x20030830
 8000c2c:	200301e8 	.word	0x200301e8

08000c30 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000c3a:	bf00      	nop
}
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
	...

08000c48 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b088      	sub	sp, #32
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	330b      	adds	r3, #11
 8000c56:	61fb      	str	r3, [r7, #28]

  /* Read the firmware version of both the wireless firmware and the FUS */
  SHCI_GetWirelessFwInfo( &WirelessInfo );
 8000c58:	f107 030c 	add.w	r3, r7, #12
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f008 fa8f 	bl	8009180 <SHCI_GetWirelessFwInfo>
  APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 8000c62:	7b3b      	ldrb	r3, [r7, #12]
 8000c64:	4619      	mov	r1, r3
 8000c66:	7b7b      	ldrb	r3, [r7, #13]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	7bbb      	ldrb	r3, [r7, #14]
 8000c6c:	482e      	ldr	r0, [pc, #184]	; (8000d28 <APPE_SysUserEvtRx+0xe0>)
 8000c6e:	f009 ff3d 	bl	800aaec <iprintf>
  APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 8000c72:	7c3b      	ldrb	r3, [r7, #16]
 8000c74:	4619      	mov	r1, r3
 8000c76:	482d      	ldr	r0, [pc, #180]	; (8000d2c <APPE_SysUserEvtRx+0xe4>)
 8000c78:	f009 ff38 	bl	800aaec <iprintf>
  APP_DBG_MSG("FUS version %d.%d.%d\n\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 8000c7c:	7dbb      	ldrb	r3, [r7, #22]
 8000c7e:	4619      	mov	r1, r3
 8000c80:	7dfb      	ldrb	r3, [r7, #23]
 8000c82:	461a      	mov	r2, r3
 8000c84:	7e3b      	ldrb	r3, [r7, #24]
 8000c86:	482a      	ldr	r0, [pc, #168]	; (8000d30 <APPE_SysUserEvtRx+0xe8>)
 8000c88:	f009 ff30 	bl	800aaec <iprintf>

  switch(p_sys_event->subevtcode)
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	881b      	ldrh	r3, [r3, #0]
 8000c90:	b29b      	uxth	r3, r3
 8000c92:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8000c96:	2b07      	cmp	r3, #7
 8000c98:	d840      	bhi.n	8000d1c <APPE_SysUserEvtRx+0xd4>
 8000c9a:	a201      	add	r2, pc, #4	; (adr r2, 8000ca0 <APPE_SysUserEvtRx+0x58>)
 8000c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ca0:	08000cc1 	.word	0x08000cc1
 8000ca4:	08000cc9 	.word	0x08000cc9
 8000ca8:	08000cd1 	.word	0x08000cd1
 8000cac:	08000d1d 	.word	0x08000d1d
 8000cb0:	08000ced 	.word	0x08000ced
 8000cb4:	08000cfd 	.word	0x08000cfd
 8000cb8:	08000d05 	.word	0x08000d05
 8000cbc:	08000d15 	.word	0x08000d15
  {
  case SHCI_SUB_EVT_CODE_READY:
    APPE_SysEvtReadyProcessing(pPayload);
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f000 f869 	bl	8000d98 <APPE_SysEvtReadyProcessing>
    break;
 8000cc6:	e02a      	b.n	8000d1e <APPE_SysUserEvtRx+0xd6>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APPE_SysEvtError(pPayload);
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f000 f83f 	bl	8000d4c <APPE_SysEvtError>
    break;
 8000cce:	e026      	b.n	8000d1e <APPE_SysUserEvtRx+0xd6>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG("-- BLE NVM RAM HAS BEEN UPDATED BY CMO+ \n");
 8000cd0:	4818      	ldr	r0, [pc, #96]	; (8000d34 <APPE_SysUserEvtRx+0xec>)
 8000cd2:	f009 ff91 	bl	800abf8 <puts>
    APP_DBG_MSG("SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE : StartAddress = %lx , Size = %ld\n",
        ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	3302      	adds	r3, #2
    APP_DBG_MSG("SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE : StartAddress = %lx , Size = %ld\n",
 8000cda:	6819      	ldr	r1, [r3, #0]
        ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	3302      	adds	r3, #2
    APP_DBG_MSG("SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE : StartAddress = %lx , Size = %ld\n",
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	4814      	ldr	r0, [pc, #80]	; (8000d38 <APPE_SysUserEvtRx+0xf0>)
 8000ce6:	f009 ff01 	bl	800aaec <iprintf>
    break;
 8000cea:	e018      	b.n	8000d1e <APPE_SysUserEvtRx+0xd6>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	3302      	adds	r3, #2
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4811      	ldr	r0, [pc, #68]	; (8000d3c <APPE_SysUserEvtRx+0xf4>)
 8000cf6:	f009 fef9 	bl	800aaec <iprintf>
    break;
 8000cfa:	e010      	b.n	8000d1e <APPE_SysUserEvtRx+0xd6>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_END_WRITE\n");
 8000cfc:	4810      	ldr	r0, [pc, #64]	; (8000d40 <APPE_SysUserEvtRx+0xf8>)
 8000cfe:	f009 ff7b 	bl	800abf8 <puts>
    break;
 8000d02:	e00c      	b.n	8000d1e <APPE_SysUserEvtRx+0xd6>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	3302      	adds	r3, #2
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	480d      	ldr	r0, [pc, #52]	; (8000d44 <APPE_SysUserEvtRx+0xfc>)
 8000d0e:	f009 feed 	bl	800aaec <iprintf>
    break;
 8000d12:	e004      	b.n	8000d1e <APPE_SysUserEvtRx+0xd6>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG("SHCI_SUB_EVT_NVM_END_ERASE\n");
 8000d14:	480c      	ldr	r0, [pc, #48]	; (8000d48 <APPE_SysUserEvtRx+0x100>)
 8000d16:	f009 ff6f 	bl	800abf8 <puts>
    break;
 8000d1a:	e000      	b.n	8000d1e <APPE_SysUserEvtRx+0xd6>

  default:
    break;
 8000d1c:	bf00      	nop
  }

  return;
 8000d1e:	bf00      	nop
}
 8000d20:	3720      	adds	r7, #32
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	0800bb28 	.word	0x0800bb28
 8000d2c:	0800bb4c 	.word	0x0800bb4c
 8000d30:	0800bb68 	.word	0x0800bb68
 8000d34:	0800bb80 	.word	0x0800bb80
 8000d38:	0800bbac 	.word	0x0800bbac
 8000d3c:	0800bbf0 	.word	0x0800bbf0
 8000d40:	0800bc24 	.word	0x0800bc24
 8000d44:	0800bc40 	.word	0x0800bc40
 8000d48:	0800bc78 	.word	0x0800bc78

08000d4c <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( void * pPayload)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	330b      	adds	r3, #11
 8000d5a:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	3302      	adds	r3, #2
 8000d60:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG("SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n",(*p_sys_error_code));
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	4619      	mov	r1, r3
 8000d68:	4808      	ldr	r0, [pc, #32]	; (8000d8c <APPE_SysEvtError+0x40>)
 8000d6a:	f009 febf 	bl	800aaec <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d103      	bne.n	8000d7e <APPE_SysEvtError+0x32>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG("SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 8000d76:	4806      	ldr	r0, [pc, #24]	; (8000d90 <APPE_SysEvtError+0x44>)
 8000d78:	f009 ff3e 	bl	800abf8 <puts>
  }
  else
  {
    APP_DBG_MSG("SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8000d7c:	e003      	b.n	8000d86 <APPE_SysEvtError+0x3a>
    APP_DBG_MSG("SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 8000d7e:	4805      	ldr	r0, [pc, #20]	; (8000d94 <APPE_SysEvtError+0x48>)
 8000d80:	f009 ff3a 	bl	800abf8 <puts>
  return;
 8000d84:	bf00      	nop
}
 8000d86:	3710      	adds	r7, #16
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	0800bc94 	.word	0x0800bc94
 8000d90:	0800bcc0 	.word	0x0800bcc0
 8000d94:	0800bcf8 	.word	0x0800bcf8

08000d98 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing( void * pPayload )
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08a      	sub	sp, #40	; 0x28
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000da0:	f107 030c 	add.w	r3, r7, #12
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	819a      	strh	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	627b      	str	r3, [r7, #36]	; 0x24

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	330b      	adds	r3, #11
 8000db8:	623b      	str	r3, [r7, #32]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000dba:	6a3b      	ldr	r3, [r7, #32]
 8000dbc:	3302      	adds	r3, #2
 8000dbe:	61fb      	str	r3, [r7, #28]

  if(p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d11e      	bne.n	8000e06 <APPE_SysEvtReadyProcessing+0x6e>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - WIRELESS_FW_RUNNING \n");
 8000dc8:	4818      	ldr	r0, [pc, #96]	; (8000e2c <APPE_SysEvtReadyProcessing+0x94>)
 8000dca:	f009 ff15 	bl	800abf8 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2( );
 8000dce:	f7ff fc0d 	bl	80005ec <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000dd2:	230d      	movs	r3, #13
 8000dd4:	733b      	strb	r3, [r7, #12]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000dd6:	237f      	movs	r3, #127	; 0x7f
 8000dd8:	73bb      	strb	r3, [r7, #14]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000dda:	f7ff fda3 	bl	8000924 <LL_DBGMCU_GetRevisionID>
 8000dde:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG("DBGMCU_GetRevisionID= %lx \n\n", RevisionID);
 8000de0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000de2:	4813      	ldr	r0, [pc, #76]	; (8000e30 <APPE_SysEvtReadyProcessing+0x98>)
 8000de4:	f009 fe82 	bl	800aaec <iprintf>

    config_param.RevisionID = RevisionID;
 8000de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	833b      	strh	r3, [r7, #24]
    (void)SHCI_C2_Config(&config_param);
 8000dee:	f107 030c 	add.w	r3, r7, #12
 8000df2:	4618      	mov	r0, r3
 8000df4:	f008 f9ae 	bl	8009154 <SHCI_C2_Config>

    APP_BLE_Init( );
 8000df8:	f001 fc12 	bl	8002620 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	2001      	movs	r0, #1
 8000e00:	f009 fbd6 	bl	800a5b0 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n");
  }

  return;
 8000e04:	e00e      	b.n	8000e24 <APPE_SysEvtReadyProcessing+0x8c>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d106      	bne.n	8000e1c <APPE_SysEvtReadyProcessing+0x84>
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n");
 8000e0e:	4809      	ldr	r0, [pc, #36]	; (8000e34 <APPE_SysEvtReadyProcessing+0x9c>)
 8000e10:	f009 fef2 	bl	800abf8 <puts>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2200      	movs	r2, #0
 8000e18:	701a      	strb	r2, [r3, #0]
  return;
 8000e1a:	e003      	b.n	8000e24 <APPE_SysEvtReadyProcessing+0x8c>
    APP_DBG_MSG("SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n");
 8000e1c:	4806      	ldr	r0, [pc, #24]	; (8000e38 <APPE_SysEvtReadyProcessing+0xa0>)
 8000e1e:	f009 feeb 	bl	800abf8 <puts>
  return;
 8000e22:	bf00      	nop
}
 8000e24:	3728      	adds	r7, #40	; 0x28
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	0800bd2c 	.word	0x0800bd2c
 8000e30:	0800bd5c 	.word	0x0800bd5c
 8000e34:	0800bd7c 	.word	0x0800bd7c
 8000e38:	0800bda8 	.word	0x0800bda8

08000e3c <MX_APPE_Process>:
    __WFI( );
  }
}

void MX_APPE_Process(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000e40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e44:	f009 fbe4 	bl	800a610 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000e48:	bf00      	nop
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle( void )
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 8000e50:	bf00      	nop
}
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr

08000e5a <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
 8000e62:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8000e64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e68:	f009 fbd2 	bl	800a610 <UTIL_SEQ_Run>

  return;
 8000e6c:	bf00      	nop
}
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	2020      	movs	r0, #32
 8000e80:	f009 fcd2 	bl	800a828 <UTIL_SEQ_SetTask>
  return;
 8000e84:	bf00      	nop
}
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000e94:	2002      	movs	r0, #2
 8000e96:	f009 fd33 	bl	800a900 <UTIL_SEQ_SetEvt>
  return;
 8000e9a:	bf00      	nop
}
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000eaa:	2002      	movs	r0, #2
 8000eac:	f009 fd48 	bl	800a940 <UTIL_SEQ_WaitEvt>
  return;
 8000eb0:	bf00      	nop
}
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <LL_EXTI_EnableIT_0_31>:
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <LL_EXTI_EnableIT_0_31+0x24>)
 8000ec2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000ec6:	4905      	ldr	r1, [pc, #20]	; (8000edc <LL_EXTI_EnableIT_0_31+0x24>)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	58000800 	.word	0x58000800

08000ee0 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000ee8:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	4904      	ldr	r1, [pc, #16]	; (8000f00 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	600b      	str	r3, [r1, #0]

}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	58000800 	.word	0x58000800

08000f04 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000f0a:	4b0d      	ldr	r3, [pc, #52]	; (8000f40 <ReadRtcSsrValue+0x3c>)
 8000f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000f12:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <ReadRtcSsrValue+0x3c>)
 8000f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000f1a:	e005      	b.n	8000f28 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000f20:	4b07      	ldr	r3, [pc, #28]	; (8000f40 <ReadRtcSsrValue+0x3c>)
 8000f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d1f5      	bne.n	8000f1c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000f30:	683b      	ldr	r3, [r7, #0]
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	40002800 	.word	0x40002800

08000f44 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	460a      	mov	r2, r1
 8000f4e:	71fb      	strb	r3, [r7, #7]
 8000f50:	4613      	mov	r3, r2
 8000f52:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000f54:	79ba      	ldrb	r2, [r7, #6]
 8000f56:	491d      	ldr	r1, [pc, #116]	; (8000fcc <LinkTimerAfter+0x88>)
 8000f58:	4613      	mov	r3, r2
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	4413      	add	r3, r2
 8000f5e:	00db      	lsls	r3, r3, #3
 8000f60:	440b      	add	r3, r1
 8000f62:	3315      	adds	r3, #21
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	2b06      	cmp	r3, #6
 8000f6c:	d009      	beq.n	8000f82 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000f6e:	7bfa      	ldrb	r2, [r7, #15]
 8000f70:	4916      	ldr	r1, [pc, #88]	; (8000fcc <LinkTimerAfter+0x88>)
 8000f72:	4613      	mov	r3, r2
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	4413      	add	r3, r2
 8000f78:	00db      	lsls	r3, r3, #3
 8000f7a:	440b      	add	r3, r1
 8000f7c:	3314      	adds	r3, #20
 8000f7e:	79fa      	ldrb	r2, [r7, #7]
 8000f80:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000f82:	79fa      	ldrb	r2, [r7, #7]
 8000f84:	4911      	ldr	r1, [pc, #68]	; (8000fcc <LinkTimerAfter+0x88>)
 8000f86:	4613      	mov	r3, r2
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	4413      	add	r3, r2
 8000f8c:	00db      	lsls	r3, r3, #3
 8000f8e:	440b      	add	r3, r1
 8000f90:	3315      	adds	r3, #21
 8000f92:	7bfa      	ldrb	r2, [r7, #15]
 8000f94:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000f96:	79fa      	ldrb	r2, [r7, #7]
 8000f98:	490c      	ldr	r1, [pc, #48]	; (8000fcc <LinkTimerAfter+0x88>)
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	4413      	add	r3, r2
 8000fa0:	00db      	lsls	r3, r3, #3
 8000fa2:	440b      	add	r3, r1
 8000fa4:	3314      	adds	r3, #20
 8000fa6:	79ba      	ldrb	r2, [r7, #6]
 8000fa8:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000faa:	79ba      	ldrb	r2, [r7, #6]
 8000fac:	4907      	ldr	r1, [pc, #28]	; (8000fcc <LinkTimerAfter+0x88>)
 8000fae:	4613      	mov	r3, r2
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	4413      	add	r3, r2
 8000fb4:	00db      	lsls	r3, r3, #3
 8000fb6:	440b      	add	r3, r1
 8000fb8:	3315      	adds	r3, #21
 8000fba:	79fa      	ldrb	r2, [r7, #7]
 8000fbc:	701a      	strb	r2, [r3, #0]

  return;
 8000fbe:	bf00      	nop
}
 8000fc0:	3714      	adds	r7, #20
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	20000098 	.word	0x20000098

08000fd0 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	460a      	mov	r2, r1
 8000fda:	71fb      	strb	r3, [r7, #7]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000fe0:	4b29      	ldr	r3, [pc, #164]	; (8001088 <LinkTimerBefore+0xb8>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	79ba      	ldrb	r2, [r7, #6]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d032      	beq.n	8001052 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000fec:	79ba      	ldrb	r2, [r7, #6]
 8000fee:	4927      	ldr	r1, [pc, #156]	; (800108c <LinkTimerBefore+0xbc>)
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	4413      	add	r3, r2
 8000ff6:	00db      	lsls	r3, r3, #3
 8000ff8:	440b      	add	r3, r1
 8000ffa:	3314      	adds	r3, #20
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001000:	7bfa      	ldrb	r2, [r7, #15]
 8001002:	4922      	ldr	r1, [pc, #136]	; (800108c <LinkTimerBefore+0xbc>)
 8001004:	4613      	mov	r3, r2
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	4413      	add	r3, r2
 800100a:	00db      	lsls	r3, r3, #3
 800100c:	440b      	add	r3, r1
 800100e:	3315      	adds	r3, #21
 8001010:	79fa      	ldrb	r2, [r7, #7]
 8001012:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001014:	79fa      	ldrb	r2, [r7, #7]
 8001016:	491d      	ldr	r1, [pc, #116]	; (800108c <LinkTimerBefore+0xbc>)
 8001018:	4613      	mov	r3, r2
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	4413      	add	r3, r2
 800101e:	00db      	lsls	r3, r3, #3
 8001020:	440b      	add	r3, r1
 8001022:	3315      	adds	r3, #21
 8001024:	79ba      	ldrb	r2, [r7, #6]
 8001026:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001028:	79fa      	ldrb	r2, [r7, #7]
 800102a:	4918      	ldr	r1, [pc, #96]	; (800108c <LinkTimerBefore+0xbc>)
 800102c:	4613      	mov	r3, r2
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	4413      	add	r3, r2
 8001032:	00db      	lsls	r3, r3, #3
 8001034:	440b      	add	r3, r1
 8001036:	3314      	adds	r3, #20
 8001038:	7bfa      	ldrb	r2, [r7, #15]
 800103a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800103c:	79ba      	ldrb	r2, [r7, #6]
 800103e:	4913      	ldr	r1, [pc, #76]	; (800108c <LinkTimerBefore+0xbc>)
 8001040:	4613      	mov	r3, r2
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	4413      	add	r3, r2
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	440b      	add	r3, r1
 800104a:	3314      	adds	r3, #20
 800104c:	79fa      	ldrb	r2, [r7, #7]
 800104e:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001050:	e014      	b.n	800107c <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001052:	79fa      	ldrb	r2, [r7, #7]
 8001054:	490d      	ldr	r1, [pc, #52]	; (800108c <LinkTimerBefore+0xbc>)
 8001056:	4613      	mov	r3, r2
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	4413      	add	r3, r2
 800105c:	00db      	lsls	r3, r3, #3
 800105e:	440b      	add	r3, r1
 8001060:	3315      	adds	r3, #21
 8001062:	79ba      	ldrb	r2, [r7, #6]
 8001064:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001066:	79ba      	ldrb	r2, [r7, #6]
 8001068:	4908      	ldr	r1, [pc, #32]	; (800108c <LinkTimerBefore+0xbc>)
 800106a:	4613      	mov	r3, r2
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	4413      	add	r3, r2
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	440b      	add	r3, r1
 8001074:	3314      	adds	r3, #20
 8001076:	79fa      	ldrb	r2, [r7, #7]
 8001078:	701a      	strb	r2, [r3, #0]
  return;
 800107a:	bf00      	nop
}
 800107c:	3714      	adds	r7, #20
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	20000128 	.word	0x20000128
 800108c:	20000098 	.word	0x20000098

08001090 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800109a:	4b4e      	ldr	r3, [pc, #312]	; (80011d4 <linkTimer+0x144>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	2b06      	cmp	r3, #6
 80010a2:	d118      	bne.n	80010d6 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80010a4:	4b4b      	ldr	r3, [pc, #300]	; (80011d4 <linkTimer+0x144>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	4b4b      	ldr	r3, [pc, #300]	; (80011d8 <linkTimer+0x148>)
 80010ac:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80010ae:	4a49      	ldr	r2, [pc, #292]	; (80011d4 <linkTimer+0x144>)
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80010b4:	79fa      	ldrb	r2, [r7, #7]
 80010b6:	4949      	ldr	r1, [pc, #292]	; (80011dc <linkTimer+0x14c>)
 80010b8:	4613      	mov	r3, r2
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	4413      	add	r3, r2
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	440b      	add	r3, r1
 80010c2:	3315      	adds	r3, #21
 80010c4:	2206      	movs	r2, #6
 80010c6:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80010c8:	4b45      	ldr	r3, [pc, #276]	; (80011e0 <linkTimer+0x150>)
 80010ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010ce:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	81fb      	strh	r3, [r7, #14]
 80010d4:	e078      	b.n	80011c8 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80010d6:	f000 f909 	bl	80012ec <ReturnTimeElapsed>
 80010da:	4603      	mov	r3, r0
 80010dc:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80010de:	79fa      	ldrb	r2, [r7, #7]
 80010e0:	493e      	ldr	r1, [pc, #248]	; (80011dc <linkTimer+0x14c>)
 80010e2:	4613      	mov	r3, r2
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	4413      	add	r3, r2
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	440b      	add	r3, r1
 80010ec:	3308      	adds	r3, #8
 80010ee:	6819      	ldr	r1, [r3, #0]
 80010f0:	89fb      	ldrh	r3, [r7, #14]
 80010f2:	79fa      	ldrb	r2, [r7, #7]
 80010f4:	4419      	add	r1, r3
 80010f6:	4839      	ldr	r0, [pc, #228]	; (80011dc <linkTimer+0x14c>)
 80010f8:	4613      	mov	r3, r2
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	4413      	add	r3, r2
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	4403      	add	r3, r0
 8001102:	3308      	adds	r3, #8
 8001104:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001106:	79fa      	ldrb	r2, [r7, #7]
 8001108:	4934      	ldr	r1, [pc, #208]	; (80011dc <linkTimer+0x14c>)
 800110a:	4613      	mov	r3, r2
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	4413      	add	r3, r2
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	440b      	add	r3, r1
 8001114:	3308      	adds	r3, #8
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 800111a:	4b2e      	ldr	r3, [pc, #184]	; (80011d4 <linkTimer+0x144>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	b2db      	uxtb	r3, r3
 8001120:	4619      	mov	r1, r3
 8001122:	4a2e      	ldr	r2, [pc, #184]	; (80011dc <linkTimer+0x14c>)
 8001124:	460b      	mov	r3, r1
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	440b      	add	r3, r1
 800112a:	00db      	lsls	r3, r3, #3
 800112c:	4413      	add	r3, r2
 800112e:	3308      	adds	r3, #8
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	68ba      	ldr	r2, [r7, #8]
 8001134:	429a      	cmp	r2, r3
 8001136:	d337      	bcc.n	80011a8 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001138:	4b26      	ldr	r3, [pc, #152]	; (80011d4 <linkTimer+0x144>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800113e:	7b7a      	ldrb	r2, [r7, #13]
 8001140:	4926      	ldr	r1, [pc, #152]	; (80011dc <linkTimer+0x14c>)
 8001142:	4613      	mov	r3, r2
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	4413      	add	r3, r2
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	440b      	add	r3, r1
 800114c:	3315      	adds	r3, #21
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001152:	e013      	b.n	800117c <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001154:	7b7a      	ldrb	r2, [r7, #13]
 8001156:	4921      	ldr	r1, [pc, #132]	; (80011dc <linkTimer+0x14c>)
 8001158:	4613      	mov	r3, r2
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	4413      	add	r3, r2
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	440b      	add	r3, r1
 8001162:	3315      	adds	r3, #21
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001168:	7b7a      	ldrb	r2, [r7, #13]
 800116a:	491c      	ldr	r1, [pc, #112]	; (80011dc <linkTimer+0x14c>)
 800116c:	4613      	mov	r3, r2
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	4413      	add	r3, r2
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	440b      	add	r3, r1
 8001176:	3315      	adds	r3, #21
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800117c:	7b3b      	ldrb	r3, [r7, #12]
 800117e:	2b06      	cmp	r3, #6
 8001180:	d00b      	beq.n	800119a <linkTimer+0x10a>
 8001182:	7b3a      	ldrb	r2, [r7, #12]
 8001184:	4915      	ldr	r1, [pc, #84]	; (80011dc <linkTimer+0x14c>)
 8001186:	4613      	mov	r3, r2
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	4413      	add	r3, r2
 800118c:	00db      	lsls	r3, r3, #3
 800118e:	440b      	add	r3, r1
 8001190:	3308      	adds	r3, #8
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	68ba      	ldr	r2, [r7, #8]
 8001196:	429a      	cmp	r2, r3
 8001198:	d2dc      	bcs.n	8001154 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800119a:	7b7a      	ldrb	r2, [r7, #13]
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	4611      	mov	r1, r2
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff fecf 	bl	8000f44 <LinkTimerAfter>
 80011a6:	e00f      	b.n	80011c8 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80011a8:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <linkTimer+0x144>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	4611      	mov	r1, r2
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff ff0c 	bl	8000fd0 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <linkTimer+0x144>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <linkTimer+0x148>)
 80011c0:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80011c2:	4a04      	ldr	r2, [pc, #16]	; (80011d4 <linkTimer+0x144>)
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80011c8:	89fb      	ldrh	r3, [r7, #14]
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000128 	.word	0x20000128
 80011d8:	20000129 	.word	0x20000129
 80011dc:	20000098 	.word	0x20000098
 80011e0:	2000012c 	.word	0x2000012c

080011e4 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	460a      	mov	r2, r1
 80011ee:	71fb      	strb	r3, [r7, #7]
 80011f0:	4613      	mov	r3, r2
 80011f2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80011f4:	4b39      	ldr	r3, [pc, #228]	; (80012dc <UnlinkTimer+0xf8>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	79fa      	ldrb	r2, [r7, #7]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d111      	bne.n	8001224 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001200:	4b36      	ldr	r3, [pc, #216]	; (80012dc <UnlinkTimer+0xf8>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	b2da      	uxtb	r2, r3
 8001206:	4b36      	ldr	r3, [pc, #216]	; (80012e0 <UnlinkTimer+0xfc>)
 8001208:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800120a:	79fa      	ldrb	r2, [r7, #7]
 800120c:	4935      	ldr	r1, [pc, #212]	; (80012e4 <UnlinkTimer+0x100>)
 800120e:	4613      	mov	r3, r2
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	4413      	add	r3, r2
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	440b      	add	r3, r1
 8001218:	3315      	adds	r3, #21
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	b2da      	uxtb	r2, r3
 800121e:	4b2f      	ldr	r3, [pc, #188]	; (80012dc <UnlinkTimer+0xf8>)
 8001220:	701a      	strb	r2, [r3, #0]
 8001222:	e03e      	b.n	80012a2 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001224:	79fa      	ldrb	r2, [r7, #7]
 8001226:	492f      	ldr	r1, [pc, #188]	; (80012e4 <UnlinkTimer+0x100>)
 8001228:	4613      	mov	r3, r2
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	4413      	add	r3, r2
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	440b      	add	r3, r1
 8001232:	3314      	adds	r3, #20
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001238:	79fa      	ldrb	r2, [r7, #7]
 800123a:	492a      	ldr	r1, [pc, #168]	; (80012e4 <UnlinkTimer+0x100>)
 800123c:	4613      	mov	r3, r2
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	4413      	add	r3, r2
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	440b      	add	r3, r1
 8001246:	3315      	adds	r3, #21
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 800124c:	79f9      	ldrb	r1, [r7, #7]
 800124e:	7bfa      	ldrb	r2, [r7, #15]
 8001250:	4824      	ldr	r0, [pc, #144]	; (80012e4 <UnlinkTimer+0x100>)
 8001252:	460b      	mov	r3, r1
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	440b      	add	r3, r1
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	4403      	add	r3, r0
 800125c:	3315      	adds	r3, #21
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	b2d8      	uxtb	r0, r3
 8001262:	4920      	ldr	r1, [pc, #128]	; (80012e4 <UnlinkTimer+0x100>)
 8001264:	4613      	mov	r3, r2
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	4413      	add	r3, r2
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	440b      	add	r3, r1
 800126e:	3315      	adds	r3, #21
 8001270:	4602      	mov	r2, r0
 8001272:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001274:	7bbb      	ldrb	r3, [r7, #14]
 8001276:	2b06      	cmp	r3, #6
 8001278:	d013      	beq.n	80012a2 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 800127a:	79f9      	ldrb	r1, [r7, #7]
 800127c:	7bba      	ldrb	r2, [r7, #14]
 800127e:	4819      	ldr	r0, [pc, #100]	; (80012e4 <UnlinkTimer+0x100>)
 8001280:	460b      	mov	r3, r1
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	440b      	add	r3, r1
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	4403      	add	r3, r0
 800128a:	3314      	adds	r3, #20
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	b2d8      	uxtb	r0, r3
 8001290:	4914      	ldr	r1, [pc, #80]	; (80012e4 <UnlinkTimer+0x100>)
 8001292:	4613      	mov	r3, r2
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	4413      	add	r3, r2
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	440b      	add	r3, r1
 800129c:	3314      	adds	r3, #20
 800129e:	4602      	mov	r2, r0
 80012a0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80012a2:	79fa      	ldrb	r2, [r7, #7]
 80012a4:	490f      	ldr	r1, [pc, #60]	; (80012e4 <UnlinkTimer+0x100>)
 80012a6:	4613      	mov	r3, r2
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	4413      	add	r3, r2
 80012ac:	00db      	lsls	r3, r3, #3
 80012ae:	440b      	add	r3, r1
 80012b0:	330c      	adds	r3, #12
 80012b2:	2201      	movs	r2, #1
 80012b4:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80012b6:	4b09      	ldr	r3, [pc, #36]	; (80012dc <UnlinkTimer+0xf8>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	2b06      	cmp	r3, #6
 80012be:	d107      	bne.n	80012d0 <UnlinkTimer+0xec>
 80012c0:	79bb      	ldrb	r3, [r7, #6]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d104      	bne.n	80012d0 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80012c6:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <UnlinkTimer+0x104>)
 80012c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012cc:	601a      	str	r2, [r3, #0]
  }

  return;
 80012ce:	bf00      	nop
 80012d0:	bf00      	nop
}
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	20000128 	.word	0x20000128
 80012e0:	20000129 	.word	0x20000129
 80012e4:	20000098 	.word	0x20000098
 80012e8:	2000012c 	.word	0x2000012c

080012ec <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80012f2:	4b1a      	ldr	r3, [pc, #104]	; (800135c <ReturnTimeElapsed+0x70>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012fa:	d026      	beq.n	800134a <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80012fc:	f7ff fe02 	bl	8000f04 <ReadRtcSsrValue>
 8001300:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001302:	4b16      	ldr	r3, [pc, #88]	; (800135c <ReturnTimeElapsed+0x70>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	429a      	cmp	r2, r3
 800130a:	d805      	bhi.n	8001318 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 800130c:	4b13      	ldr	r3, [pc, #76]	; (800135c <ReturnTimeElapsed+0x70>)
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	e00a      	b.n	800132e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001318:	4b11      	ldr	r3, [pc, #68]	; (8001360 <ReturnTimeElapsed+0x74>)
 800131a:	881b      	ldrh	r3, [r3, #0]
 800131c:	461a      	mov	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001324:	4b0d      	ldr	r3, [pc, #52]	; (800135c <ReturnTimeElapsed+0x70>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	683a      	ldr	r2, [r7, #0]
 800132a:	4413      	add	r3, r2
 800132c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800132e:	4b0d      	ldr	r3, [pc, #52]	; (8001364 <ReturnTimeElapsed+0x78>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	461a      	mov	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	fb02 f303 	mul.w	r3, r2, r3
 800133a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 800133c:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <ReturnTimeElapsed+0x7c>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	461a      	mov	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	40d3      	lsrs	r3, r2
 8001346:	607b      	str	r3, [r7, #4]
 8001348:	e001      	b.n	800134e <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	b29b      	uxth	r3, r3
}
 8001352:	4618      	mov	r0, r3
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	2000012c 	.word	0x2000012c
 8001360:	20000232 	.word	0x20000232
 8001364:	20000231 	.word	0x20000231
 8001368:	20000230 	.word	0x20000230

0800136c <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8001376:	88fb      	ldrh	r3, [r7, #6]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d108      	bne.n	800138e <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800137c:	f7ff fdc2 	bl	8000f04 <ReadRtcSsrValue>
 8001380:	4603      	mov	r3, r0
 8001382:	4a24      	ldr	r2, [pc, #144]	; (8001414 <RestartWakeupCounter+0xa8>)
 8001384:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001386:	2003      	movs	r0, #3
 8001388:	f002 fb0b 	bl	80039a2 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 800138c:	e03e      	b.n	800140c <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800138e:	88fb      	ldrh	r3, [r7, #6]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d803      	bhi.n	800139c <RestartWakeupCounter+0x30>
 8001394:	4b20      	ldr	r3, [pc, #128]	; (8001418 <RestartWakeupCounter+0xac>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d002      	beq.n	80013a2 <RestartWakeupCounter+0x36>
      Value -= 1;
 800139c:	88fb      	ldrh	r3, [r7, #6]
 800139e:	3b01      	subs	r3, #1
 80013a0:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80013a2:	bf00      	nop
 80013a4:	4b1d      	ldr	r3, [pc, #116]	; (800141c <RestartWakeupCounter+0xb0>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	f003 0304 	and.w	r3, r3, #4
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d0f7      	beq.n	80013a4 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80013b4:	4b19      	ldr	r3, [pc, #100]	; (800141c <RestartWakeupCounter+0xb0>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	4b17      	ldr	r3, [pc, #92]	; (800141c <RestartWakeupCounter+0xb0>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80013c8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80013ca:	4b15      	ldr	r3, [pc, #84]	; (8001420 <RestartWakeupCounter+0xb4>)
 80013cc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80013d0:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80013d2:	2003      	movs	r0, #3
 80013d4:	f002 faf3 	bl	80039be <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80013d8:	4b12      	ldr	r3, [pc, #72]	; (8001424 <RestartWakeupCounter+0xb8>)
 80013da:	695b      	ldr	r3, [r3, #20]
 80013dc:	0c1b      	lsrs	r3, r3, #16
 80013de:	041b      	lsls	r3, r3, #16
 80013e0:	88fa      	ldrh	r2, [r7, #6]
 80013e2:	4910      	ldr	r1, [pc, #64]	; (8001424 <RestartWakeupCounter+0xb8>)
 80013e4:	4313      	orrs	r3, r2
 80013e6:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80013e8:	f7ff fd8c 	bl	8000f04 <ReadRtcSsrValue>
 80013ec:	4603      	mov	r3, r0
 80013ee:	4a09      	ldr	r2, [pc, #36]	; (8001414 <RestartWakeupCounter+0xa8>)
 80013f0:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 80013f2:	4b0a      	ldr	r3, [pc, #40]	; (800141c <RestartWakeupCounter+0xb0>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	689a      	ldr	r2, [r3, #8]
 80013fa:	4b08      	ldr	r3, [pc, #32]	; (800141c <RestartWakeupCounter+0xb0>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001404:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001406:	f3af 8000 	nop.w
  return ;
 800140a:	bf00      	nop
}
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	2000012c 	.word	0x2000012c
 8001418:	20000230 	.word	0x20000230
 800141c:	2000022c 	.word	0x2000022c
 8001420:	58000800 	.word	0x58000800
 8001424:	40002800 	.word	0x40002800

08001428 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800142e:	4b47      	ldr	r3, [pc, #284]	; (800154c <RescheduleTimerList+0x124>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001436:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800143a:	d108      	bne.n	800144e <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 800143c:	bf00      	nop
 800143e:	4b44      	ldr	r3, [pc, #272]	; (8001550 <RescheduleTimerList+0x128>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	f003 0304 	and.w	r3, r3, #4
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1f7      	bne.n	800143e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800144e:	4b40      	ldr	r3, [pc, #256]	; (8001550 <RescheduleTimerList+0x128>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	689a      	ldr	r2, [r3, #8]
 8001456:	4b3e      	ldr	r3, [pc, #248]	; (8001550 <RescheduleTimerList+0x128>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001460:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001462:	4b3c      	ldr	r3, [pc, #240]	; (8001554 <RescheduleTimerList+0x12c>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001468:	7bfa      	ldrb	r2, [r7, #15]
 800146a:	493b      	ldr	r1, [pc, #236]	; (8001558 <RescheduleTimerList+0x130>)
 800146c:	4613      	mov	r3, r2
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	4413      	add	r3, r2
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	440b      	add	r3, r1
 8001476:	3308      	adds	r3, #8
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 800147c:	f7ff ff36 	bl	80012ec <ReturnTimeElapsed>
 8001480:	4603      	mov	r3, r0
 8001482:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001484:	88fb      	ldrh	r3, [r7, #6]
 8001486:	68ba      	ldr	r2, [r7, #8]
 8001488:	429a      	cmp	r2, r3
 800148a:	d205      	bcs.n	8001498 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001490:	4b32      	ldr	r3, [pc, #200]	; (800155c <RescheduleTimerList+0x134>)
 8001492:	2201      	movs	r2, #1
 8001494:	701a      	strb	r2, [r3, #0]
 8001496:	e04d      	b.n	8001534 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001498:	88fb      	ldrh	r3, [r7, #6]
 800149a:	4a31      	ldr	r2, [pc, #196]	; (8001560 <RescheduleTimerList+0x138>)
 800149c:	8812      	ldrh	r2, [r2, #0]
 800149e:	b292      	uxth	r2, r2
 80014a0:	4413      	add	r3, r2
 80014a2:	461a      	mov	r2, r3
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d906      	bls.n	80014b8 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80014aa:	4b2d      	ldr	r3, [pc, #180]	; (8001560 <RescheduleTimerList+0x138>)
 80014ac:	881b      	ldrh	r3, [r3, #0]
 80014ae:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80014b0:	4b2a      	ldr	r3, [pc, #168]	; (800155c <RescheduleTimerList+0x134>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	701a      	strb	r2, [r3, #0]
 80014b6:	e03d      	b.n	8001534 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	88fb      	ldrh	r3, [r7, #6]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80014c2:	4b26      	ldr	r3, [pc, #152]	; (800155c <RescheduleTimerList+0x134>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80014c8:	e034      	b.n	8001534 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80014ca:	7bfa      	ldrb	r2, [r7, #15]
 80014cc:	4922      	ldr	r1, [pc, #136]	; (8001558 <RescheduleTimerList+0x130>)
 80014ce:	4613      	mov	r3, r2
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	4413      	add	r3, r2
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	440b      	add	r3, r1
 80014d8:	3308      	adds	r3, #8
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	88fb      	ldrh	r3, [r7, #6]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d20a      	bcs.n	80014f8 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80014e2:	7bfa      	ldrb	r2, [r7, #15]
 80014e4:	491c      	ldr	r1, [pc, #112]	; (8001558 <RescheduleTimerList+0x130>)
 80014e6:	4613      	mov	r3, r2
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	4413      	add	r3, r2
 80014ec:	00db      	lsls	r3, r3, #3
 80014ee:	440b      	add	r3, r1
 80014f0:	3308      	adds	r3, #8
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	e013      	b.n	8001520 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80014f8:	7bfa      	ldrb	r2, [r7, #15]
 80014fa:	4917      	ldr	r1, [pc, #92]	; (8001558 <RescheduleTimerList+0x130>)
 80014fc:	4613      	mov	r3, r2
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	4413      	add	r3, r2
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	440b      	add	r3, r1
 8001506:	3308      	adds	r3, #8
 8001508:	6819      	ldr	r1, [r3, #0]
 800150a:	88fb      	ldrh	r3, [r7, #6]
 800150c:	7bfa      	ldrb	r2, [r7, #15]
 800150e:	1ac9      	subs	r1, r1, r3
 8001510:	4811      	ldr	r0, [pc, #68]	; (8001558 <RescheduleTimerList+0x130>)
 8001512:	4613      	mov	r3, r2
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	4413      	add	r3, r2
 8001518:	00db      	lsls	r3, r3, #3
 800151a:	4403      	add	r3, r0
 800151c:	3308      	adds	r3, #8
 800151e:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001520:	7bfa      	ldrb	r2, [r7, #15]
 8001522:	490d      	ldr	r1, [pc, #52]	; (8001558 <RescheduleTimerList+0x130>)
 8001524:	4613      	mov	r3, r2
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	4413      	add	r3, r2
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	440b      	add	r3, r1
 800152e:	3315      	adds	r3, #21
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001534:	7bfb      	ldrb	r3, [r7, #15]
 8001536:	2b06      	cmp	r3, #6
 8001538:	d1c7      	bne.n	80014ca <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 800153a:	89bb      	ldrh	r3, [r7, #12]
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff ff15 	bl	800136c <RestartWakeupCounter>

  return ;
 8001542:	bf00      	nop
}
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40002800 	.word	0x40002800
 8001550:	2000022c 	.word	0x2000022c
 8001554:	20000128 	.word	0x20000128
 8001558:	20000098 	.word	0x20000098
 800155c:	20000130 	.word	0x20000130
 8001560:	20000234 	.word	0x20000234

08001564 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08a      	sub	sp, #40	; 0x28
 8001568:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800156a:	f3ef 8310 	mrs	r3, PRIMASK
 800156e:	617b      	str	r3, [r7, #20]
  return(result);
 8001570:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001572:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001574:	b672      	cpsid	i
}
 8001576:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001578:	4b5f      	ldr	r3, [pc, #380]	; (80016f8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	22ca      	movs	r2, #202	; 0xca
 8001580:	625a      	str	r2, [r3, #36]	; 0x24
 8001582:	4b5d      	ldr	r3, [pc, #372]	; (80016f8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2253      	movs	r2, #83	; 0x53
 800158a:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 800158c:	4b5a      	ldr	r3, [pc, #360]	; (80016f8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	689a      	ldr	r2, [r3, #8]
 8001594:	4b58      	ldr	r3, [pc, #352]	; (80016f8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800159e:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80015a0:	4b56      	ldr	r3, [pc, #344]	; (80016fc <HW_TS_RTC_Wakeup_Handler+0x198>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80015a8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80015ac:	4954      	ldr	r1, [pc, #336]	; (8001700 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80015ae:	4613      	mov	r3, r2
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	4413      	add	r3, r2
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	440b      	add	r3, r1
 80015b8:	330c      	adds	r3, #12
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d172      	bne.n	80016a8 <HW_TS_RTC_Wakeup_Handler+0x144>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80015c2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80015c6:	494e      	ldr	r1, [pc, #312]	; (8001700 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80015c8:	4613      	mov	r3, r2
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	4413      	add	r3, r2
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	440b      	add	r3, r1
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80015d6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80015da:	4949      	ldr	r1, [pc, #292]	; (8001700 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80015dc:	4613      	mov	r3, r2
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	4413      	add	r3, r2
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	440b      	add	r3, r1
 80015e6:	3310      	adds	r3, #16
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80015ec:	4b45      	ldr	r3, [pc, #276]	; (8001704 <HW_TS_RTC_Wakeup_Handler+0x1a0>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d050      	beq.n	8001698 <HW_TS_RTC_Wakeup_Handler+0x134>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 80015f6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80015fa:	4941      	ldr	r1, [pc, #260]	; (8001700 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80015fc:	4613      	mov	r3, r2
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	4413      	add	r3, r2
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	440b      	add	r3, r1
 8001606:	330d      	adds	r3, #13
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	b2db      	uxtb	r3, r3
 800160c:	2b01      	cmp	r3, #1
 800160e:	d126      	bne.n	800165e <HW_TS_RTC_Wakeup_Handler+0xfa>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001610:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001614:	2101      	movs	r1, #1
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff fde4 	bl	80011e4 <UnlinkTimer>
 800161c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161e:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	f383 8810 	msr	PRIMASK, r3
}
 8001626:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001628:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800162c:	4934      	ldr	r1, [pc, #208]	; (8001700 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 800162e:	4613      	mov	r3, r2
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	4413      	add	r3, r2
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	440b      	add	r3, r1
 8001638:	3304      	adds	r3, #4
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001640:	4611      	mov	r1, r2
 8001642:	4618      	mov	r0, r3
 8001644:	f000 f9d4 	bl	80019f0 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001648:	4b2b      	ldr	r3, [pc, #172]	; (80016f8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	22ca      	movs	r2, #202	; 0xca
 8001650:	625a      	str	r2, [r3, #36]	; 0x24
 8001652:	4b29      	ldr	r3, [pc, #164]	; (80016f8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2253      	movs	r2, #83	; 0x53
 800165a:	625a      	str	r2, [r3, #36]	; 0x24
 800165c:	e014      	b.n	8001688 <HW_TS_RTC_Wakeup_Handler+0x124>
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f383 8810 	msr	PRIMASK, r3
}
 8001668:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 800166a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800166e:	4618      	mov	r0, r3
 8001670:	f000 f932 	bl	80018d8 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001674:	4b20      	ldr	r3, [pc, #128]	; (80016f8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	22ca      	movs	r2, #202	; 0xca
 800167c:	625a      	str	r2, [r3, #36]	; 0x24
 800167e:	4b1e      	ldr	r3, [pc, #120]	; (80016f8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2253      	movs	r2, #83	; 0x53
 8001686:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001688:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800168c:	69fa      	ldr	r2, [r7, #28]
 800168e:	4619      	mov	r1, r3
 8001690:	69b8      	ldr	r0, [r7, #24]
 8001692:	f000 fa35 	bl	8001b00 <HW_TS_RTC_Int_AppNot>
 8001696:	e025      	b.n	80016e4 <HW_TS_RTC_Wakeup_Handler+0x180>
    }
    else
    {
      RescheduleTimerList();
 8001698:	f7ff fec6 	bl	8001428 <RescheduleTimerList>
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	f383 8810 	msr	PRIMASK, r3
}
 80016a6:	e01d      	b.n	80016e4 <HW_TS_RTC_Wakeup_Handler+0x180>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80016a8:	bf00      	nop
 80016aa:	4b13      	ldr	r3, [pc, #76]	; (80016f8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	f003 0304 	and.w	r3, r3, #4
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d0f7      	beq.n	80016aa <HW_TS_RTC_Wakeup_Handler+0x146>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80016ba:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80016ce:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80016d0:	4b0d      	ldr	r3, [pc, #52]	; (8001708 <HW_TS_RTC_Wakeup_Handler+0x1a4>)
 80016d2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80016d6:	60da      	str	r2, [r3, #12]
 80016d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016da:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f383 8810 	msr	PRIMASK, r3
}
 80016e2:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80016e4:	4b04      	ldr	r3, [pc, #16]	; (80016f8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	22ff      	movs	r2, #255	; 0xff
 80016ec:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 80016ee:	bf00      	nop
}
 80016f0:	3728      	adds	r7, #40	; 0x28
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	2000022c 	.word	0x2000022c
 80016fc:	20000128 	.word	0x20000128
 8001700:	20000098 	.word	0x20000098
 8001704:	20000130 	.word	0x20000130
 8001708:	58000800 	.word	0x58000800

0800170c <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b088      	sub	sp, #32
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	6039      	str	r1, [r7, #0]
 8001716:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8001718:	4a64      	ldr	r2, [pc, #400]	; (80018ac <HW_TS_Init+0x1a0>)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800171e:	4b63      	ldr	r3, [pc, #396]	; (80018ac <HW_TS_Init+0x1a0>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	22ca      	movs	r2, #202	; 0xca
 8001726:	625a      	str	r2, [r3, #36]	; 0x24
 8001728:	4b60      	ldr	r3, [pc, #384]	; (80018ac <HW_TS_Init+0x1a0>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2253      	movs	r2, #83	; 0x53
 8001730:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001732:	4b5f      	ldr	r3, [pc, #380]	; (80018b0 <HW_TS_Init+0x1a4>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	4a5e      	ldr	r2, [pc, #376]	; (80018b0 <HW_TS_Init+0x1a4>)
 8001738:	f043 0320 	orr.w	r3, r3, #32
 800173c:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 800173e:	4b5c      	ldr	r3, [pc, #368]	; (80018b0 <HW_TS_Init+0x1a4>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	b2db      	uxtb	r3, r3
 8001744:	f003 0307 	and.w	r3, r3, #7
 8001748:	b2db      	uxtb	r3, r3
 800174a:	f1c3 0304 	rsb	r3, r3, #4
 800174e:	b2da      	uxtb	r2, r3
 8001750:	4b58      	ldr	r3, [pc, #352]	; (80018b4 <HW_TS_Init+0x1a8>)
 8001752:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001754:	4b56      	ldr	r3, [pc, #344]	; (80018b0 <HW_TS_Init+0x1a4>)
 8001756:	691b      	ldr	r3, [r3, #16]
 8001758:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800175c:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001760:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	fa92 f2a2 	rbit	r2, r2
 8001768:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800176e:	697a      	ldr	r2, [r7, #20]
 8001770:	2a00      	cmp	r2, #0
 8001772:	d101      	bne.n	8001778 <HW_TS_Init+0x6c>
  {
    return 32U;
 8001774:	2220      	movs	r2, #32
 8001776:	e003      	b.n	8001780 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8001778:	697a      	ldr	r2, [r7, #20]
 800177a:	fab2 f282 	clz	r2, r2
 800177e:	b2d2      	uxtb	r2, r2
 8001780:	40d3      	lsrs	r3, r2
 8001782:	b2db      	uxtb	r3, r3
 8001784:	3301      	adds	r3, #1
 8001786:	b2da      	uxtb	r2, r3
 8001788:	4b4b      	ldr	r3, [pc, #300]	; (80018b8 <HW_TS_Init+0x1ac>)
 800178a:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 800178c:	4b48      	ldr	r3, [pc, #288]	; (80018b0 <HW_TS_Init+0x1a4>)
 800178e:	691b      	ldr	r3, [r3, #16]
 8001790:	b29b      	uxth	r3, r3
 8001792:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001796:	b29b      	uxth	r3, r3
 8001798:	3301      	adds	r3, #1
 800179a:	b29a      	uxth	r2, r3
 800179c:	4b47      	ldr	r3, [pc, #284]	; (80018bc <HW_TS_Init+0x1b0>)
 800179e:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80017a0:	4b46      	ldr	r3, [pc, #280]	; (80018bc <HW_TS_Init+0x1b0>)
 80017a2:	881b      	ldrh	r3, [r3, #0]
 80017a4:	3b01      	subs	r3, #1
 80017a6:	4a44      	ldr	r2, [pc, #272]	; (80018b8 <HW_TS_Init+0x1ac>)
 80017a8:	7812      	ldrb	r2, [r2, #0]
 80017aa:	fb02 f303 	mul.w	r3, r2, r3
 80017ae:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80017b2:	4a40      	ldr	r2, [pc, #256]	; (80018b4 <HW_TS_Init+0x1a8>)
 80017b4:	7812      	ldrb	r2, [r2, #0]
 80017b6:	40d3      	lsrs	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d904      	bls.n	80017ce <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80017c4:	4b3e      	ldr	r3, [pc, #248]	; (80018c0 <HW_TS_Init+0x1b4>)
 80017c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017ca:	801a      	strh	r2, [r3, #0]
 80017cc:	e003      	b.n	80017d6 <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	4b3b      	ldr	r3, [pc, #236]	; (80018c0 <HW_TS_Init+0x1b4>)
 80017d4:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80017d6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80017da:	f7ff fb81 	bl	8000ee0 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80017de:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80017e2:	f7ff fb69 	bl	8000eb8 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d143      	bne.n	8001874 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80017ec:	4b35      	ldr	r3, [pc, #212]	; (80018c4 <HW_TS_Init+0x1b8>)
 80017ee:	2201      	movs	r2, #1
 80017f0:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80017f2:	4b35      	ldr	r3, [pc, #212]	; (80018c8 <HW_TS_Init+0x1bc>)
 80017f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017f8:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80017fa:	2300      	movs	r3, #0
 80017fc:	77fb      	strb	r3, [r7, #31]
 80017fe:	e00c      	b.n	800181a <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001800:	7ffa      	ldrb	r2, [r7, #31]
 8001802:	4932      	ldr	r1, [pc, #200]	; (80018cc <HW_TS_Init+0x1c0>)
 8001804:	4613      	mov	r3, r2
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	4413      	add	r3, r2
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	440b      	add	r3, r1
 800180e:	330c      	adds	r3, #12
 8001810:	2200      	movs	r2, #0
 8001812:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001814:	7ffb      	ldrb	r3, [r7, #31]
 8001816:	3301      	adds	r3, #1
 8001818:	77fb      	strb	r3, [r7, #31]
 800181a:	7ffb      	ldrb	r3, [r7, #31]
 800181c:	2b05      	cmp	r3, #5
 800181e:	d9ef      	bls.n	8001800 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001820:	4b2b      	ldr	r3, [pc, #172]	; (80018d0 <HW_TS_Init+0x1c4>)
 8001822:	2206      	movs	r2, #6
 8001824:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8001826:	4b21      	ldr	r3, [pc, #132]	; (80018ac <HW_TS_Init+0x1a0>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	689a      	ldr	r2, [r3, #8]
 800182e:	4b1f      	ldr	r3, [pc, #124]	; (80018ac <HW_TS_Init+0x1a0>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001838:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800183a:	4b1c      	ldr	r3, [pc, #112]	; (80018ac <HW_TS_Init+0x1a0>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	b2da      	uxtb	r2, r3
 8001844:	4b19      	ldr	r3, [pc, #100]	; (80018ac <HW_TS_Init+0x1a0>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800184e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001850:	4b20      	ldr	r3, [pc, #128]	; (80018d4 <HW_TS_Init+0x1c8>)
 8001852:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001856:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001858:	2003      	movs	r0, #3
 800185a:	f002 f8b0 	bl	80039be <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 800185e:	4b13      	ldr	r3, [pc, #76]	; (80018ac <HW_TS_Init+0x1a0>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	689a      	ldr	r2, [r3, #8]
 8001866:	4b11      	ldr	r3, [pc, #68]	; (80018ac <HW_TS_Init+0x1a0>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001870:	609a      	str	r2, [r3, #8]
 8001872:	e00a      	b.n	800188a <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8001874:	4b0d      	ldr	r3, [pc, #52]	; (80018ac <HW_TS_Init+0x1a0>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001880:	2b00      	cmp	r3, #0
 8001882:	d002      	beq.n	800188a <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001884:	2003      	movs	r0, #3
 8001886:	f002 f88c 	bl	80039a2 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800188a:	4b08      	ldr	r3, [pc, #32]	; (80018ac <HW_TS_Init+0x1a0>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	22ff      	movs	r2, #255	; 0xff
 8001892:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001894:	2200      	movs	r2, #0
 8001896:	2103      	movs	r1, #3
 8001898:	2003      	movs	r0, #3
 800189a:	f002 f840 	bl	800391e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800189e:	2003      	movs	r0, #3
 80018a0:	f002 f857 	bl	8003952 <HAL_NVIC_EnableIRQ>

  return;
 80018a4:	bf00      	nop
}
 80018a6:	3720      	adds	r7, #32
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	2000022c 	.word	0x2000022c
 80018b0:	40002800 	.word	0x40002800
 80018b4:	20000230 	.word	0x20000230
 80018b8:	20000231 	.word	0x20000231
 80018bc:	20000232 	.word	0x20000232
 80018c0:	20000234 	.word	0x20000234
 80018c4:	20000130 	.word	0x20000130
 80018c8:	2000012c 	.word	0x2000012c
 80018cc:	20000098 	.word	0x20000098
 80018d0:	20000128 	.word	0x20000128
 80018d4:	58000800 	.word	0x58000800

080018d8 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80018e2:	f3ef 8310 	mrs	r3, PRIMASK
 80018e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80018e8:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80018ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80018ec:	b672      	cpsid	i
}
 80018ee:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80018f0:	2003      	movs	r0, #3
 80018f2:	f002 f83c 	bl	800396e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80018f6:	4b38      	ldr	r3, [pc, #224]	; (80019d8 <HW_TS_Stop+0x100>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	22ca      	movs	r2, #202	; 0xca
 80018fe:	625a      	str	r2, [r3, #36]	; 0x24
 8001900:	4b35      	ldr	r3, [pc, #212]	; (80019d8 <HW_TS_Stop+0x100>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2253      	movs	r2, #83	; 0x53
 8001908:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800190a:	79fa      	ldrb	r2, [r7, #7]
 800190c:	4933      	ldr	r1, [pc, #204]	; (80019dc <HW_TS_Stop+0x104>)
 800190e:	4613      	mov	r3, r2
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	4413      	add	r3, r2
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	440b      	add	r3, r1
 8001918:	330c      	adds	r3, #12
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d148      	bne.n	80019b4 <HW_TS_Stop+0xdc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	2100      	movs	r1, #0
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff fc5c 	bl	80011e4 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 800192c:	4b2c      	ldr	r3, [pc, #176]	; (80019e0 <HW_TS_Stop+0x108>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001932:	7cfb      	ldrb	r3, [r7, #19]
 8001934:	2b06      	cmp	r3, #6
 8001936:	d135      	bne.n	80019a4 <HW_TS_Stop+0xcc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001938:	4b2a      	ldr	r3, [pc, #168]	; (80019e4 <HW_TS_Stop+0x10c>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001940:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001944:	d108      	bne.n	8001958 <HW_TS_Stop+0x80>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001946:	bf00      	nop
 8001948:	4b23      	ldr	r3, [pc, #140]	; (80019d8 <HW_TS_Stop+0x100>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	f003 0304 	and.w	r3, r3, #4
 8001954:	2b00      	cmp	r3, #0
 8001956:	d1f7      	bne.n	8001948 <HW_TS_Stop+0x70>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001958:	4b1f      	ldr	r3, [pc, #124]	; (80019d8 <HW_TS_Stop+0x100>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	689a      	ldr	r2, [r3, #8]
 8001960:	4b1d      	ldr	r3, [pc, #116]	; (80019d8 <HW_TS_Stop+0x100>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800196a:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800196c:	bf00      	nop
 800196e:	4b1a      	ldr	r3, [pc, #104]	; (80019d8 <HW_TS_Stop+0x100>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	f003 0304 	and.w	r3, r3, #4
 800197a:	2b00      	cmp	r3, #0
 800197c:	d0f7      	beq.n	800196e <HW_TS_Stop+0x96>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800197e:	4b16      	ldr	r3, [pc, #88]	; (80019d8 <HW_TS_Stop+0x100>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	b2da      	uxtb	r2, r3
 8001988:	4b13      	ldr	r3, [pc, #76]	; (80019d8 <HW_TS_Stop+0x100>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001992:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001994:	4b14      	ldr	r3, [pc, #80]	; (80019e8 <HW_TS_Stop+0x110>)
 8001996:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800199a:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800199c:	2003      	movs	r0, #3
 800199e:	f002 f80e 	bl	80039be <HAL_NVIC_ClearPendingIRQ>
 80019a2:	e007      	b.n	80019b4 <HW_TS_Stop+0xdc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80019a4:	4b11      	ldr	r3, [pc, #68]	; (80019ec <HW_TS_Stop+0x114>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	7cfa      	ldrb	r2, [r7, #19]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d001      	beq.n	80019b4 <HW_TS_Stop+0xdc>
    {
      RescheduleTimerList();
 80019b0:	f7ff fd3a 	bl	8001428 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80019b4:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <HW_TS_Stop+0x100>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	22ff      	movs	r2, #255	; 0xff
 80019bc:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80019be:	2003      	movs	r0, #3
 80019c0:	f001 ffc7 	bl	8003952 <HAL_NVIC_EnableIRQ>
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	f383 8810 	msr	PRIMASK, r3
}
 80019ce:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80019d0:	bf00      	nop
}
 80019d2:	3718      	adds	r7, #24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	2000022c 	.word	0x2000022c
 80019dc:	20000098 	.word	0x20000098
 80019e0:	20000128 	.word	0x20000128
 80019e4:	40002800 	.word	0x40002800
 80019e8:	58000800 	.word	0x58000800
 80019ec:	20000129 	.word	0x20000129

080019f0 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	6039      	str	r1, [r7, #0]
 80019fa:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80019fc:	79fa      	ldrb	r2, [r7, #7]
 80019fe:	493c      	ldr	r1, [pc, #240]	; (8001af0 <HW_TS_Start+0x100>)
 8001a00:	4613      	mov	r3, r2
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	4413      	add	r3, r2
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	440b      	add	r3, r1
 8001a0a:	330c      	adds	r3, #12
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d103      	bne.n	8001a1c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff ff5e 	bl	80018d8 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a1c:	f3ef 8310 	mrs	r3, PRIMASK
 8001a20:	60fb      	str	r3, [r7, #12]
  return(result);
 8001a22:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001a24:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a26:	b672      	cpsid	i
}
 8001a28:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001a2a:	2003      	movs	r0, #3
 8001a2c:	f001 ff9f 	bl	800396e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001a30:	4b30      	ldr	r3, [pc, #192]	; (8001af4 <HW_TS_Start+0x104>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	22ca      	movs	r2, #202	; 0xca
 8001a38:	625a      	str	r2, [r3, #36]	; 0x24
 8001a3a:	4b2e      	ldr	r3, [pc, #184]	; (8001af4 <HW_TS_Start+0x104>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2253      	movs	r2, #83	; 0x53
 8001a42:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001a44:	79fa      	ldrb	r2, [r7, #7]
 8001a46:	492a      	ldr	r1, [pc, #168]	; (8001af0 <HW_TS_Start+0x100>)
 8001a48:	4613      	mov	r3, r2
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	4413      	add	r3, r2
 8001a4e:	00db      	lsls	r3, r3, #3
 8001a50:	440b      	add	r3, r1
 8001a52:	330c      	adds	r3, #12
 8001a54:	2202      	movs	r2, #2
 8001a56:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001a58:	79fa      	ldrb	r2, [r7, #7]
 8001a5a:	4925      	ldr	r1, [pc, #148]	; (8001af0 <HW_TS_Start+0x100>)
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	4413      	add	r3, r2
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	440b      	add	r3, r1
 8001a66:	3308      	adds	r3, #8
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001a6c:	79fa      	ldrb	r2, [r7, #7]
 8001a6e:	4920      	ldr	r1, [pc, #128]	; (8001af0 <HW_TS_Start+0x100>)
 8001a70:	4613      	mov	r3, r2
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	4413      	add	r3, r2
 8001a76:	00db      	lsls	r3, r3, #3
 8001a78:	440b      	add	r3, r1
 8001a7a:	3304      	adds	r3, #4
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001a80:	79fb      	ldrb	r3, [r7, #7]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff fb04 	bl	8001090 <linkTimer>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001a8c:	4b1a      	ldr	r3, [pc, #104]	; (8001af8 <HW_TS_Start+0x108>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001a92:	4b1a      	ldr	r3, [pc, #104]	; (8001afc <HW_TS_Start+0x10c>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	7c7a      	ldrb	r2, [r7, #17]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d002      	beq.n	8001aa4 <HW_TS_Start+0xb4>
  {
    RescheduleTimerList();
 8001a9e:	f7ff fcc3 	bl	8001428 <RescheduleTimerList>
 8001aa2:	e013      	b.n	8001acc <HW_TS_Start+0xdc>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001aa4:	79fa      	ldrb	r2, [r7, #7]
 8001aa6:	4912      	ldr	r1, [pc, #72]	; (8001af0 <HW_TS_Start+0x100>)
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	4413      	add	r3, r2
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	440b      	add	r3, r1
 8001ab2:	3308      	adds	r3, #8
 8001ab4:	6819      	ldr	r1, [r3, #0]
 8001ab6:	8a7b      	ldrh	r3, [r7, #18]
 8001ab8:	79fa      	ldrb	r2, [r7, #7]
 8001aba:	1ac9      	subs	r1, r1, r3
 8001abc:	480c      	ldr	r0, [pc, #48]	; (8001af0 <HW_TS_Start+0x100>)
 8001abe:	4613      	mov	r3, r2
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	4413      	add	r3, r2
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	4403      	add	r3, r0
 8001ac8:	3308      	adds	r3, #8
 8001aca:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001acc:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <HW_TS_Start+0x104>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	22ff      	movs	r2, #255	; 0xff
 8001ad4:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001ad6:	2003      	movs	r0, #3
 8001ad8:	f001 ff3b 	bl	8003952 <HAL_NVIC_EnableIRQ>
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	f383 8810 	msr	PRIMASK, r3
}
 8001ae6:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001ae8:	bf00      	nop
}
 8001aea:	3718      	adds	r7, #24
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20000098 	.word	0x20000098
 8001af4:	2000022c 	.word	0x2000022c
 8001af8:	20000128 	.word	0x20000128
 8001afc:	20000129 	.word	0x20000129

08001b00 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	460b      	mov	r3, r1
 8001b0a:	607a      	str	r2, [r7, #4]
 8001b0c:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4798      	blx	r3

  return;
 8001b12:	bf00      	nop
}
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
	...

08001b1c <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60b9      	str	r1, [r7, #8]
 8001b24:	607b      	str	r3, [r7, #4]
 8001b26:	4603      	mov	r3, r0
 8001b28:	73fb      	strb	r3, [r7, #15]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 8001b32:	2300      	movs	r3, #0
 8001b34:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8001b36:	7bfb      	ldrb	r3, [r7, #15]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d002      	beq.n	8001b42 <HW_UART_Transmit_DMA+0x26>
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d00f      	beq.n	8001b60 <HW_UART_Transmit_DMA+0x44>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8001b40:	e01d      	b.n	8001b7e <HW_UART_Transmit_DMA+0x62>
            HW_huart1TxCb = cb;
 8001b42:	4a1f      	ldr	r2, [pc, #124]	; (8001bc0 <HW_UART_Transmit_DMA+0xa4>)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8001b48:	4b1e      	ldr	r3, [pc, #120]	; (8001bc4 <HW_UART_Transmit_DMA+0xa8>)
 8001b4a:	4a1f      	ldr	r2, [pc, #124]	; (8001bc8 <HW_UART_Transmit_DMA+0xac>)
 8001b4c:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8001b4e:	89bb      	ldrh	r3, [r7, #12]
 8001b50:	461a      	mov	r2, r3
 8001b52:	68b9      	ldr	r1, [r7, #8]
 8001b54:	481b      	ldr	r0, [pc, #108]	; (8001bc4 <HW_UART_Transmit_DMA+0xa8>)
 8001b56:	f004 fd1b 	bl	8006590 <HAL_UART_Transmit_DMA>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	75fb      	strb	r3, [r7, #23]
            break;
 8001b5e:	e00e      	b.n	8001b7e <HW_UART_Transmit_DMA+0x62>
            HW_hlpuart1TxCb = cb;
 8001b60:	4a1a      	ldr	r2, [pc, #104]	; (8001bcc <HW_UART_Transmit_DMA+0xb0>)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6013      	str	r3, [r2, #0]
            hlpuart1.Instance = LPUART1;
 8001b66:	4b1a      	ldr	r3, [pc, #104]	; (8001bd0 <HW_UART_Transmit_DMA+0xb4>)
 8001b68:	4a1a      	ldr	r2, [pc, #104]	; (8001bd4 <HW_UART_Transmit_DMA+0xb8>)
 8001b6a:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
 8001b6c:	89bb      	ldrh	r3, [r7, #12]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	68b9      	ldr	r1, [r7, #8]
 8001b72:	4817      	ldr	r0, [pc, #92]	; (8001bd0 <HW_UART_Transmit_DMA+0xb4>)
 8001b74:	f004 fd0c 	bl	8006590 <HAL_UART_Transmit_DMA>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	75fb      	strb	r3, [r7, #23]
            break;
 8001b7c:	bf00      	nop
    }

    switch (hal_status)
 8001b7e:	7dfb      	ldrb	r3, [r7, #23]
 8001b80:	2b03      	cmp	r3, #3
 8001b82:	d817      	bhi.n	8001bb4 <HW_UART_Transmit_DMA+0x98>
 8001b84:	a201      	add	r2, pc, #4	; (adr r2, 8001b8c <HW_UART_Transmit_DMA+0x70>)
 8001b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b8a:	bf00      	nop
 8001b8c:	08001b9d 	.word	0x08001b9d
 8001b90:	08001ba3 	.word	0x08001ba3
 8001b94:	08001ba9 	.word	0x08001ba9
 8001b98:	08001baf 	.word	0x08001baf
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	75bb      	strb	r3, [r7, #22]
            break;
 8001ba0:	e009      	b.n	8001bb6 <HW_UART_Transmit_DMA+0x9a>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	75bb      	strb	r3, [r7, #22]
            break;
 8001ba6:	e006      	b.n	8001bb6 <HW_UART_Transmit_DMA+0x9a>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	75bb      	strb	r3, [r7, #22]
            break;
 8001bac:	e003      	b.n	8001bb6 <HW_UART_Transmit_DMA+0x9a>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	75bb      	strb	r3, [r7, #22]
            break;
 8001bb2:	e000      	b.n	8001bb6 <HW_UART_Transmit_DMA+0x9a>

        default:
            break;
 8001bb4:	bf00      	nop
    }

    return hw_status;
 8001bb6:	7dbb      	ldrb	r3, [r7, #22]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20000238 	.word	0x20000238
 8001bc4:	2000030c 	.word	0x2000030c
 8001bc8:	40013800 	.word	0x40013800
 8001bcc:	2000023c 	.word	0x2000023c
 8001bd0:	2000027c 	.word	0x2000027c
 8001bd4:	40008000 	.word	0x40008000

08001bd8 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a0f      	ldr	r2, [pc, #60]	; (8001c24 <HAL_UART_TxCpltCallback+0x4c>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d00a      	beq.n	8001c00 <HAL_UART_TxCpltCallback+0x28>
 8001bea:	4a0f      	ldr	r2, [pc, #60]	; (8001c28 <HAL_UART_TxCpltCallback+0x50>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d10f      	bne.n	8001c10 <HAL_UART_TxCpltCallback+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8001bf0:	4b0e      	ldr	r3, [pc, #56]	; (8001c2c <HAL_UART_TxCpltCallback+0x54>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d00d      	beq.n	8001c14 <HAL_UART_TxCpltCallback+0x3c>
            {
                HW_huart1TxCb();
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <HAL_UART_TxCpltCallback+0x54>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4798      	blx	r3
            }
            break;
 8001bfe:	e009      	b.n	8001c14 <HAL_UART_TxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1TxCb)
 8001c00:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <HAL_UART_TxCpltCallback+0x58>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d007      	beq.n	8001c18 <HAL_UART_TxCpltCallback+0x40>
            {
                HW_hlpuart1TxCb();
 8001c08:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <HAL_UART_TxCpltCallback+0x58>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4798      	blx	r3
            }
            break;
 8001c0e:	e003      	b.n	8001c18 <HAL_UART_TxCpltCallback+0x40>
#endif

        default:
            break;
 8001c10:	bf00      	nop
 8001c12:	e002      	b.n	8001c1a <HAL_UART_TxCpltCallback+0x42>
            break;
 8001c14:	bf00      	nop
 8001c16:	e000      	b.n	8001c1a <HAL_UART_TxCpltCallback+0x42>
            break;
 8001c18:	bf00      	nop
    }

    return;
 8001c1a:	bf00      	nop
}
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	40008000 	.word	0x40008000
 8001c28:	40013800 	.word	0x40013800
 8001c2c:	20000238 	.word	0x20000238
 8001c30:	2000023c 	.word	0x2000023c

08001c34 <LL_RCC_LSE_SetDriveCapability>:
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001c3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c44:	f023 0218 	bic.w	r2, r3, #24
 8001c48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <LL_AHB1_GRP1_EnableClock>:
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001c6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001c78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4013      	ands	r3, r2
 8001c82:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c84:	68fb      	ldr	r3, [r7, #12]
}
 8001c86:	bf00      	nop
 8001c88:	3714      	adds	r7, #20
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <LL_AHB2_GRP1_EnableClock>:
{
 8001c92:	b480      	push	{r7}
 8001c94:	b085      	sub	sp, #20
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ca0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
}
 8001cb8:	bf00      	nop
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cc8:	f001 fc5c 	bl	8003584 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001ccc:	f7fe feca 	bl	8000a64 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cd0:	f000 f814 	bl	8001cfc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001cd4:	f000 f870 	bl	8001db8 <PeriphCommonClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 8001cd8:	f000 f88e 	bl	8001df8 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cdc:	f000 f95d 	bl	8001f9a <MX_GPIO_Init>
  MX_DMA_Init();
 8001ce0:	f000 f93e 	bl	8001f60 <MX_DMA_Init>
  MX_RF_Init();
 8001ce4:	f000 f8ea 	bl	8001ebc <MX_RF_Init>
  MX_RTC_Init();
 8001ce8:	f000 f906 	bl	8001ef8 <MX_RTC_Init>
  MX_RNG_Init();
 8001cec:	f000 f8ee 	bl	8001ecc <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001cf0:	f7fe fec6 	bl	8000a80 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while(1)
	{
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8001cf4:	f7ff f8a2 	bl	8000e3c <MX_APPE_Process>
 8001cf8:	e7fc      	b.n	8001cf4 <main+0x30>
	...

08001cfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b09a      	sub	sp, #104	; 0x68
 8001d00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d02:	f107 0320 	add.w	r3, r7, #32
 8001d06:	2248      	movs	r2, #72	; 0x48
 8001d08:	2100      	movs	r1, #0
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f008 fee6 	bl	800aadc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d10:	1d3b      	adds	r3, r7, #4
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	605a      	str	r2, [r3, #4]
 8001d18:	609a      	str	r2, [r3, #8]
 8001d1a:	60da      	str	r2, [r3, #12]
 8001d1c:	611a      	str	r2, [r3, #16]
 8001d1e:	615a      	str	r2, [r3, #20]
 8001d20:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001d22:	f002 fbff 	bl	8004524 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001d26:	2000      	movs	r0, #0
 8001d28:	f7ff ff84 	bl	8001c34 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d2c:	4b21      	ldr	r3, [pc, #132]	; (8001db4 <SystemClock_Config+0xb8>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d34:	4a1f      	ldr	r2, [pc, #124]	; (8001db4 <SystemClock_Config+0xb8>)
 8001d36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d3a:	6013      	str	r3, [r2, #0]
 8001d3c:	4b1d      	ldr	r3, [pc, #116]	; (8001db4 <SystemClock_Config+0xb8>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d44:	603b      	str	r3, [r7, #0]
 8001d46:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8001d48:	2347      	movs	r3, #71	; 0x47
 8001d4a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d50:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001d52:	2301      	movs	r3, #1
 8001d54:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d60:	2340      	movs	r3, #64	; 0x40
 8001d62:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001d64:	2300      	movs	r3, #0
 8001d66:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d68:	f107 0320 	add.w	r3, r7, #32
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f002 ff6d 	bl	8004c4c <HAL_RCC_OscConfig>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001d78:	f000 f91c 	bl	8001fb4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001d7c:	236f      	movs	r3, #111	; 0x6f
 8001d7e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001d80:	2302      	movs	r3, #2
 8001d82:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d84:	2300      	movs	r3, #0
 8001d86:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001d90:	2300      	movs	r3, #0
 8001d92:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001d94:	2300      	movs	r3, #0
 8001d96:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001d98:	1d3b      	adds	r3, r7, #4
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f003 fae3 	bl	8005368 <HAL_RCC_ClockConfig>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001da8:	f000 f904 	bl	8001fb4 <Error_Handler>
  }
}
 8001dac:	bf00      	nop
 8001dae:	3768      	adds	r7, #104	; 0x68
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	58000400 	.word	0x58000400

08001db8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b094      	sub	sp, #80	; 0x50
 8001dbc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dbe:	463b      	mov	r3, r7
 8001dc0:	2250      	movs	r2, #80	; 0x50
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f008 fe89 	bl	800aadc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8001dca:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001dce:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001dd0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001dd4:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001dda:	2310      	movs	r3, #16
 8001ddc:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dde:	463b      	mov	r3, r7
 8001de0:	4618      	mov	r0, r3
 8001de2:	f003 fefe 	bl	8005be2 <HAL_RCCEx_PeriphCLKConfig>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001dec:	f000 f8e2 	bl	8001fb4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001df0:	bf00      	nop
 8001df2:	3750      	adds	r7, #80	; 0x50
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001dfc:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <MX_IPCC_Init+0x20>)
 8001dfe:	4a07      	ldr	r2, [pc, #28]	; (8001e1c <MX_IPCC_Init+0x24>)
 8001e00:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001e02:	4805      	ldr	r0, [pc, #20]	; (8001e18 <MX_IPCC_Init+0x20>)
 8001e04:	f002 fb08 	bl	8004418 <HAL_IPCC_Init>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001e0e:	f000 f8d1 	bl	8001fb4 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20000240 	.word	0x20000240
 8001e1c:	58000c00 	.word	0x58000c00

08001e20 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e24:	4b23      	ldr	r3, [pc, #140]	; (8001eb4 <MX_USART1_UART_Init+0x94>)
 8001e26:	4a24      	ldr	r2, [pc, #144]	; (8001eb8 <MX_USART1_UART_Init+0x98>)
 8001e28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e2a:	4b22      	ldr	r3, [pc, #136]	; (8001eb4 <MX_USART1_UART_Init+0x94>)
 8001e2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e32:	4b20      	ldr	r3, [pc, #128]	; (8001eb4 <MX_USART1_UART_Init+0x94>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e38:	4b1e      	ldr	r3, [pc, #120]	; (8001eb4 <MX_USART1_UART_Init+0x94>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e3e:	4b1d      	ldr	r3, [pc, #116]	; (8001eb4 <MX_USART1_UART_Init+0x94>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e44:	4b1b      	ldr	r3, [pc, #108]	; (8001eb4 <MX_USART1_UART_Init+0x94>)
 8001e46:	220c      	movs	r2, #12
 8001e48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e4a:	4b1a      	ldr	r3, [pc, #104]	; (8001eb4 <MX_USART1_UART_Init+0x94>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8001e50:	4b18      	ldr	r3, [pc, #96]	; (8001eb4 <MX_USART1_UART_Init+0x94>)
 8001e52:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001e56:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e58:	4b16      	ldr	r3, [pc, #88]	; (8001eb4 <MX_USART1_UART_Init+0x94>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e5e:	4b15      	ldr	r3, [pc, #84]	; (8001eb4 <MX_USART1_UART_Init+0x94>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e64:	4b13      	ldr	r3, [pc, #76]	; (8001eb4 <MX_USART1_UART_Init+0x94>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e6a:	4812      	ldr	r0, [pc, #72]	; (8001eb4 <MX_USART1_UART_Init+0x94>)
 8001e6c:	f004 fb40 	bl	80064f0 <HAL_UART_Init>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8001e76:	f000 f89d 	bl	8001fb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	480d      	ldr	r0, [pc, #52]	; (8001eb4 <MX_USART1_UART_Init+0x94>)
 8001e7e:	f005 fd08 	bl	8007892 <HAL_UARTEx_SetTxFifoThreshold>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8001e88:	f000 f894 	bl	8001fb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	4809      	ldr	r0, [pc, #36]	; (8001eb4 <MX_USART1_UART_Init+0x94>)
 8001e90:	f005 fd3d 	bl	800790e <HAL_UARTEx_SetRxFifoThreshold>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8001e9a:	f000 f88b 	bl	8001fb4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001e9e:	4805      	ldr	r0, [pc, #20]	; (8001eb4 <MX_USART1_UART_Init+0x94>)
 8001ea0:	f005 fcbe 	bl	8007820 <HAL_UARTEx_DisableFifoMode>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8001eaa:	f000 f883 	bl	8001fb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	2000030c 	.word	0x2000030c
 8001eb8:	40013800 	.word	0x40013800

08001ebc <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001ec0:	bf00      	nop
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
	...

08001ecc <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001ed0:	4b07      	ldr	r3, [pc, #28]	; (8001ef0 <MX_RNG_Init+0x24>)
 8001ed2:	4a08      	ldr	r2, [pc, #32]	; (8001ef4 <MX_RNG_Init+0x28>)
 8001ed4:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8001ed6:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <MX_RNG_Init+0x24>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001edc:	4804      	ldr	r0, [pc, #16]	; (8001ef0 <MX_RNG_Init+0x24>)
 8001ede:	f004 f907 	bl	80060f0 <HAL_RNG_Init>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8001ee8:	f000 f864 	bl	8001fb4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001eec:	bf00      	nop
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	2000045c 	.word	0x2000045c
 8001ef4:	58001000 	.word	0x58001000

08001ef8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001efc:	4b16      	ldr	r3, [pc, #88]	; (8001f58 <MX_RTC_Init+0x60>)
 8001efe:	4a17      	ldr	r2, [pc, #92]	; (8001f5c <MX_RTC_Init+0x64>)
 8001f00:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001f02:	4b15      	ldr	r3, [pc, #84]	; (8001f58 <MX_RTC_Init+0x60>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001f08:	4b13      	ldr	r3, [pc, #76]	; (8001f58 <MX_RTC_Init+0x60>)
 8001f0a:	220f      	movs	r2, #15
 8001f0c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001f0e:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <MX_RTC_Init+0x60>)
 8001f10:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001f14:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001f16:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <MX_RTC_Init+0x60>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001f1c:	4b0e      	ldr	r3, [pc, #56]	; (8001f58 <MX_RTC_Init+0x60>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001f22:	4b0d      	ldr	r3, [pc, #52]	; (8001f58 <MX_RTC_Init+0x60>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001f28:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <MX_RTC_Init+0x60>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001f2e:	480a      	ldr	r0, [pc, #40]	; (8001f58 <MX_RTC_Init+0x60>)
 8001f30:	f004 f913 	bl	800615a <HAL_RTC_Init>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001f3a:	f000 f83b 	bl	8001fb4 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2100      	movs	r1, #0
 8001f42:	4805      	ldr	r0, [pc, #20]	; (8001f58 <MX_RTC_Init+0x60>)
 8001f44:	f004 f9f8 	bl	8006338 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001f4e:	f000 f831 	bl	8001fb4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	20000470 	.word	0x20000470
 8001f5c:	40002800 	.word	0x40002800

08001f60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001f64:	2004      	movs	r0, #4
 8001f66:	f7ff fe7b 	bl	8001c60 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f6a:	2001      	movs	r0, #1
 8001f6c:	f7ff fe78 	bl	8001c60 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001f70:	2002      	movs	r0, #2
 8001f72:	f7ff fe75 	bl	8001c60 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 8001f76:	2200      	movs	r2, #0
 8001f78:	210f      	movs	r1, #15
 8001f7a:	200e      	movs	r0, #14
 8001f7c:	f001 fccf 	bl	800391e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001f80:	200e      	movs	r0, #14
 8001f82:	f001 fce6 	bl	8003952 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 8001f86:	2200      	movs	r2, #0
 8001f88:	210f      	movs	r1, #15
 8001f8a:	203a      	movs	r0, #58	; 0x3a
 8001f8c:	f001 fcc7 	bl	800391e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8001f90:	203a      	movs	r0, #58	; 0x3a
 8001f92:	f001 fcde 	bl	8003952 <HAL_NVIC_EnableIRQ>

}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f9e:	2004      	movs	r0, #4
 8001fa0:	f7ff fe77 	bl	8001c92 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa4:	2001      	movs	r0, #1
 8001fa6:	f7ff fe74 	bl	8001c92 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001faa:	2002      	movs	r0, #2
 8001fac:	f7ff fe71 	bl	8001c92 <LL_AHB2_GRP1_EnableClock>

}
 8001fb0:	bf00      	nop
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <LL_RCC_EnableRTC>:
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001fc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001fda:	bf00      	nop
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <LL_AHB2_GRP1_EnableClock>:
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001fec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ff0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ff2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001ffc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002000:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4013      	ands	r3, r2
 8002006:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002008:	68fb      	ldr	r3, [r7, #12]
}
 800200a:	bf00      	nop
 800200c:	3714      	adds	r7, #20
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <LL_AHB3_GRP1_EnableClock>:
{
 8002016:	b480      	push	{r7}
 8002018:	b085      	sub	sp, #20
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800201e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002022:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002024:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4313      	orrs	r3, r2
 800202c:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800202e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002032:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4013      	ands	r3, r2
 8002038:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800203a:	68fb      	ldr	r3, [r7, #12]
}
 800203c:	bf00      	nop
 800203e:	3714      	adds	r7, #20
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <LL_APB1_GRP1_EnableClock>:
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002050:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002054:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002056:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4313      	orrs	r3, r2
 800205e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002060:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002064:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4013      	ands	r3, r2
 800206a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800206c:	68fb      	ldr	r3, [r7, #12]
}
 800206e:	bf00      	nop
 8002070:	3714      	adds	r7, #20
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <LL_APB1_GRP2_EnableClock>:
{
 800207a:	b480      	push	{r7}
 800207c:	b085      	sub	sp, #20
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8002082:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002086:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002088:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4313      	orrs	r3, r2
 8002090:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8002092:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002096:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4013      	ands	r3, r2
 800209c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800209e:	68fb      	ldr	r3, [r7, #12]
}
 80020a0:	bf00      	nop
 80020a2:	3714      	adds	r7, #20
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <LL_APB2_GRP1_EnableClock>:
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80020b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80020ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80020c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4013      	ands	r3, r2
 80020ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020d0:	68fb      	ldr	r3, [r7, #12]
}
 80020d2:	bf00      	nop
 80020d4:	3714      	adds	r7, #20
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80020e2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80020e6:	f7ff ff96 	bl	8002016 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80020ea:	2200      	movs	r2, #0
 80020ec:	2100      	movs	r1, #0
 80020ee:	202e      	movs	r0, #46	; 0x2e
 80020f0:	f001 fc15 	bl	800391e <HAL_NVIC_SetPriority>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80020f4:	202e      	movs	r0, #46	; 0x2e
 80020f6:	f001 fc2c 	bl	8003952 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020fa:	bf00      	nop
 80020fc:	bd80      	pop	{r7, pc}
	...

08002100 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a0d      	ldr	r2, [pc, #52]	; (8002144 <HAL_IPCC_MspInit+0x44>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d113      	bne.n	800213a <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002112:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002116:	f7ff ff7e 	bl	8002016 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800211a:	2200      	movs	r2, #0
 800211c:	2100      	movs	r1, #0
 800211e:	202c      	movs	r0, #44	; 0x2c
 8002120:	f001 fbfd 	bl	800391e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002124:	202c      	movs	r0, #44	; 0x2c
 8002126:	f001 fc14 	bl	8003952 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800212a:	2200      	movs	r2, #0
 800212c:	2100      	movs	r1, #0
 800212e:	202d      	movs	r0, #45	; 0x2d
 8002130:	f001 fbf5 	bl	800391e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002134:	202d      	movs	r0, #45	; 0x2d
 8002136:	f001 fc0c 	bl	8003952 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	58000c00 	.word	0x58000c00

08002148 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b0a0      	sub	sp, #128	; 0x80
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002150:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	605a      	str	r2, [r3, #4]
 800215a:	609a      	str	r2, [r3, #8]
 800215c:	60da      	str	r2, [r3, #12]
 800215e:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002160:	f107 030c 	add.w	r3, r7, #12
 8002164:	2250      	movs	r2, #80	; 0x50
 8002166:	2100      	movs	r1, #0
 8002168:	4618      	mov	r0, r3
 800216a:	f008 fcb7 	bl	800aadc <memset>
  if(huart->Instance==LPUART1)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a68      	ldr	r2, [pc, #416]	; (8002314 <HAL_UART_MspInit+0x1cc>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d16e      	bne.n	8002256 <HAL_UART_MspInit+0x10e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002178:	2302      	movs	r3, #2
 800217a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800217c:	2300      	movs	r3, #0
 800217e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002180:	f107 030c 	add.w	r3, r7, #12
 8002184:	4618      	mov	r0, r3
 8002186:	f003 fd2c 	bl	8005be2 <HAL_RCCEx_PeriphCLKConfig>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002190:	f7ff ff10 	bl	8001fb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002194:	2001      	movs	r0, #1
 8002196:	f7ff ff70 	bl	800207a <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219a:	2001      	movs	r0, #1
 800219c:	f7ff ff22 	bl	8001fe4 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80021a0:	230c      	movs	r3, #12
 80021a2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a4:	2302      	movs	r3, #2
 80021a6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ac:	2303      	movs	r3, #3
 80021ae:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80021b0:	2308      	movs	r3, #8
 80021b2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80021b8:	4619      	mov	r1, r3
 80021ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021be:	f001 ff7f 	bl	80040c0 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 80021c2:	4b55      	ldr	r3, [pc, #340]	; (8002318 <HAL_UART_MspInit+0x1d0>)
 80021c4:	4a55      	ldr	r2, [pc, #340]	; (800231c <HAL_UART_MspInit+0x1d4>)
 80021c6:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80021c8:	4b53      	ldr	r3, [pc, #332]	; (8002318 <HAL_UART_MspInit+0x1d0>)
 80021ca:	2211      	movs	r2, #17
 80021cc:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021ce:	4b52      	ldr	r3, [pc, #328]	; (8002318 <HAL_UART_MspInit+0x1d0>)
 80021d0:	2210      	movs	r2, #16
 80021d2:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021d4:	4b50      	ldr	r3, [pc, #320]	; (8002318 <HAL_UART_MspInit+0x1d0>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021da:	4b4f      	ldr	r3, [pc, #316]	; (8002318 <HAL_UART_MspInit+0x1d0>)
 80021dc:	2280      	movs	r2, #128	; 0x80
 80021de:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021e0:	4b4d      	ldr	r3, [pc, #308]	; (8002318 <HAL_UART_MspInit+0x1d0>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021e6:	4b4c      	ldr	r3, [pc, #304]	; (8002318 <HAL_UART_MspInit+0x1d0>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80021ec:	4b4a      	ldr	r3, [pc, #296]	; (8002318 <HAL_UART_MspInit+0x1d0>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80021f2:	4b49      	ldr	r3, [pc, #292]	; (8002318 <HAL_UART_MspInit+0x1d0>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80021f8:	4847      	ldr	r0, [pc, #284]	; (8002318 <HAL_UART_MspInit+0x1d0>)
 80021fa:	f001 fbef 	bl	80039dc <HAL_DMA_Init>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8002204:	f7ff fed6 	bl	8001fb4 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_DMAMUX1_CH1_EVT;
 8002208:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 800220c:	65fb      	str	r3, [r7, #92]	; 0x5c
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 800220e:	2300      	movs	r3, #0
 8002210:	663b      	str	r3, [r7, #96]	; 0x60
    pSyncConfig.SyncEnable = DISABLE;
 8002212:	2300      	movs	r3, #0
 8002214:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
    pSyncConfig.EventEnable = DISABLE;
 8002218:	2300      	movs	r3, #0
 800221a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
    pSyncConfig.RequestNumber = 1;
 800221e:	2301      	movs	r3, #1
 8002220:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_DMAEx_ConfigMuxSync(&hdma_lpuart1_tx, &pSyncConfig) != HAL_OK)
 8002222:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002226:	4619      	mov	r1, r3
 8002228:	483b      	ldr	r0, [pc, #236]	; (8002318 <HAL_UART_MspInit+0x1d0>)
 800222a:	f001 ff09 	bl	8004040 <HAL_DMAEx_ConfigMuxSync>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8002234:	f7ff febe 	bl	8001fb4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a37      	ldr	r2, [pc, #220]	; (8002318 <HAL_UART_MspInit+0x1d0>)
 800223c:	679a      	str	r2, [r3, #120]	; 0x78
 800223e:	4a36      	ldr	r2, [pc, #216]	; (8002318 <HAL_UART_MspInit+0x1d0>)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002244:	2200      	movs	r2, #0
 8002246:	2100      	movs	r1, #0
 8002248:	2025      	movs	r0, #37	; 0x25
 800224a:	f001 fb68 	bl	800391e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800224e:	2025      	movs	r0, #37	; 0x25
 8002250:	f001 fb7f 	bl	8003952 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002254:	e05a      	b.n	800230c <HAL_UART_MspInit+0x1c4>
  else if(huart->Instance==USART1)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a31      	ldr	r2, [pc, #196]	; (8002320 <HAL_UART_MspInit+0x1d8>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d155      	bne.n	800230c <HAL_UART_MspInit+0x1c4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002260:	2301      	movs	r3, #1
 8002262:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002264:	2300      	movs	r3, #0
 8002266:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002268:	f107 030c 	add.w	r3, r7, #12
 800226c:	4618      	mov	r0, r3
 800226e:	f003 fcb8 	bl	8005be2 <HAL_RCCEx_PeriphCLKConfig>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <HAL_UART_MspInit+0x134>
      Error_Handler();
 8002278:	f7ff fe9c 	bl	8001fb4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800227c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002280:	f7ff ff14 	bl	80020ac <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002284:	2002      	movs	r0, #2
 8002286:	f7ff fead 	bl	8001fe4 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800228a:	23c0      	movs	r3, #192	; 0xc0
 800228c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228e:	2302      	movs	r3, #2
 8002290:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002292:	2301      	movs	r3, #1
 8002294:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002296:	2303      	movs	r3, #3
 8002298:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800229a:	2307      	movs	r3, #7
 800229c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800229e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80022a2:	4619      	mov	r1, r3
 80022a4:	481f      	ldr	r0, [pc, #124]	; (8002324 <HAL_UART_MspInit+0x1dc>)
 80022a6:	f001 ff0b 	bl	80040c0 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Channel4;
 80022aa:	4b1f      	ldr	r3, [pc, #124]	; (8002328 <HAL_UART_MspInit+0x1e0>)
 80022ac:	4a1f      	ldr	r2, [pc, #124]	; (800232c <HAL_UART_MspInit+0x1e4>)
 80022ae:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80022b0:	4b1d      	ldr	r3, [pc, #116]	; (8002328 <HAL_UART_MspInit+0x1e0>)
 80022b2:	220f      	movs	r2, #15
 80022b4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022b6:	4b1c      	ldr	r3, [pc, #112]	; (8002328 <HAL_UART_MspInit+0x1e0>)
 80022b8:	2210      	movs	r2, #16
 80022ba:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022bc:	4b1a      	ldr	r3, [pc, #104]	; (8002328 <HAL_UART_MspInit+0x1e0>)
 80022be:	2200      	movs	r2, #0
 80022c0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80022c2:	4b19      	ldr	r3, [pc, #100]	; (8002328 <HAL_UART_MspInit+0x1e0>)
 80022c4:	2280      	movs	r2, #128	; 0x80
 80022c6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022c8:	4b17      	ldr	r3, [pc, #92]	; (8002328 <HAL_UART_MspInit+0x1e0>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022ce:	4b16      	ldr	r3, [pc, #88]	; (8002328 <HAL_UART_MspInit+0x1e0>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80022d4:	4b14      	ldr	r3, [pc, #80]	; (8002328 <HAL_UART_MspInit+0x1e0>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80022da:	4b13      	ldr	r3, [pc, #76]	; (8002328 <HAL_UART_MspInit+0x1e0>)
 80022dc:	2200      	movs	r2, #0
 80022de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80022e0:	4811      	ldr	r0, [pc, #68]	; (8002328 <HAL_UART_MspInit+0x1e0>)
 80022e2:	f001 fb7b 	bl	80039dc <HAL_DMA_Init>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 80022ec:	f7ff fe62 	bl	8001fb4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a0d      	ldr	r2, [pc, #52]	; (8002328 <HAL_UART_MspInit+0x1e0>)
 80022f4:	679a      	str	r2, [r3, #120]	; 0x78
 80022f6:	4a0c      	ldr	r2, [pc, #48]	; (8002328 <HAL_UART_MspInit+0x1e0>)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80022fc:	2200      	movs	r2, #0
 80022fe:	2100      	movs	r1, #0
 8002300:	2024      	movs	r0, #36	; 0x24
 8002302:	f001 fb0c 	bl	800391e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002306:	2024      	movs	r0, #36	; 0x24
 8002308:	f001 fb23 	bl	8003952 <HAL_NVIC_EnableIRQ>
}
 800230c:	bf00      	nop
 800230e:	3780      	adds	r7, #128	; 0x80
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40008000 	.word	0x40008000
 8002318:	2000039c 	.word	0x2000039c
 800231c:	40020044 	.word	0x40020044
 8002320:	40013800 	.word	0x40013800
 8002324:	48000400 	.word	0x48000400
 8002328:	200003fc 	.word	0x200003fc
 800232c:	40020444 	.word	0x40020444

08002330 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b096      	sub	sp, #88	; 0x58
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002338:	f107 0308 	add.w	r3, r7, #8
 800233c:	2250      	movs	r2, #80	; 0x50
 800233e:	2100      	movs	r1, #0
 8002340:	4618      	mov	r0, r3
 8002342:	f008 fbcb 	bl	800aadc <memset>
  if(hrng->Instance==RNG)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a0d      	ldr	r2, [pc, #52]	; (8002380 <HAL_RNG_MspInit+0x50>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d113      	bne.n	8002378 <HAL_RNG_MspInit+0x48>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8002350:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002354:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8002356:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800235a:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800235c:	f107 0308 	add.w	r3, r7, #8
 8002360:	4618      	mov	r0, r3
 8002362:	f003 fc3e 	bl	8005be2 <HAL_RCCEx_PeriphCLKConfig>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 800236c:	f7ff fe22 	bl	8001fb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002370:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002374:	f7ff fe4f 	bl	8002016 <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8002378:	bf00      	nop
 800237a:	3758      	adds	r7, #88	; 0x58
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	58001000 	.word	0x58001000

08002384 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b096      	sub	sp, #88	; 0x58
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800238c:	f107 0308 	add.w	r3, r7, #8
 8002390:	2250      	movs	r2, #80	; 0x50
 8002392:	2100      	movs	r1, #0
 8002394:	4618      	mov	r0, r3
 8002396:	f008 fba1 	bl	800aadc <memset>
  if(hrtc->Instance==RTC)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a12      	ldr	r2, [pc, #72]	; (80023e8 <HAL_RTC_MspInit+0x64>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d11d      	bne.n	80023e0 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80023a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023a8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80023aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023ae:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023b0:	f107 0308 	add.w	r3, r7, #8
 80023b4:	4618      	mov	r0, r3
 80023b6:	f003 fc14 	bl	8005be2 <HAL_RCCEx_PeriphCLKConfig>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80023c0:	f7ff fdf8 	bl	8001fb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80023c4:	f7ff fdfd 	bl	8001fc2 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80023c8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80023cc:	f7ff fe3c 	bl	8002048 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80023d0:	2200      	movs	r2, #0
 80023d2:	2100      	movs	r1, #0
 80023d4:	2003      	movs	r0, #3
 80023d6:	f001 faa2 	bl	800391e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80023da:	2003      	movs	r0, #3
 80023dc:	f001 fab9 	bl	8003952 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80023e0:	bf00      	nop
 80023e2:	3758      	adds	r7, #88	; 0x58
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40002800 	.word	0x40002800

080023ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80023f0:	bf00      	nop
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr

080023fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023fa:	b480      	push	{r7}
 80023fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023fe:	e7fe      	b.n	80023fe <HardFault_Handler+0x4>

08002400 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002404:	e7fe      	b.n	8002404 <MemManage_Handler+0x4>

08002406 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002406:	b480      	push	{r7}
 8002408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800240a:	e7fe      	b.n	800240a <BusFault_Handler+0x4>

0800240c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002410:	e7fe      	b.n	8002410 <UsageFault_Handler+0x4>

08002412 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002412:	b480      	push	{r7}
 8002414:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002416:	bf00      	nop
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002424:	bf00      	nop
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800242e:	b480      	push	{r7}
 8002430:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002432:	bf00      	nop
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002440:	f001 f8fa 	bl	8003638 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002444:	bf00      	nop
 8002446:	bd80      	pop	{r7, pc}

08002448 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800244c:	f7ff f88a 	bl	8001564 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002450:	bf00      	nop
 8002452:	bd80      	pop	{r7, pc}

08002454 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002458:	4802      	ldr	r0, [pc, #8]	; (8002464 <DMA1_Channel4_IRQHandler+0x10>)
 800245a:	f001 fca0 	bl	8003d9e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	2000039c 	.word	0x2000039c

08002468 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800246c:	4802      	ldr	r0, [pc, #8]	; (8002478 <USART1_IRQHandler+0x10>)
 800246e:	f004 f921 	bl	80066b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	2000030c 	.word	0x2000030c

0800247c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002480:	4802      	ldr	r0, [pc, #8]	; (800248c <LPUART1_IRQHandler+0x10>)
 8002482:	f004 f917 	bl	80066b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	2000027c 	.word	0x2000027c

08002490 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002494:	f000 fe84 	bl	80031a0 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002498:	bf00      	nop
 800249a:	bd80      	pop	{r7, pc}

0800249c <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80024a0:	f000 feb6 	bl	8003210 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80024a4:	bf00      	nop
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80024ac:	f001 ff90 	bl	80043d0 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80024b0:	bf00      	nop
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80024b8:	4802      	ldr	r0, [pc, #8]	; (80024c4 <DMA2_Channel4_IRQHandler+0x10>)
 80024ba:	f001 fc70 	bl	8003d9e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 80024be:	bf00      	nop
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	200003fc 	.word	0x200003fc

080024c8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024d4:	2300      	movs	r3, #0
 80024d6:	617b      	str	r3, [r7, #20]
 80024d8:	e00a      	b.n	80024f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80024da:	f3af 8000 	nop.w
 80024de:	4601      	mov	r1, r0
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	1c5a      	adds	r2, r3, #1
 80024e4:	60ba      	str	r2, [r7, #8]
 80024e6:	b2ca      	uxtb	r2, r1
 80024e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	3301      	adds	r3, #1
 80024ee:	617b      	str	r3, [r7, #20]
 80024f0:	697a      	ldr	r2, [r7, #20]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	dbf0      	blt.n	80024da <_read+0x12>
	}

return len;
 80024f8:	687b      	ldr	r3, [r7, #4]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3718      	adds	r7, #24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002502:	b480      	push	{r7}
 8002504:	b083      	sub	sp, #12
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
	return -1;
 800250a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800250e:	4618      	mov	r0, r3
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800251a:	b480      	push	{r7}
 800251c:	b083      	sub	sp, #12
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
 8002522:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800252a:	605a      	str	r2, [r3, #4]
	return 0;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr

0800253a <_isatty>:

int _isatty(int file)
{
 800253a:	b480      	push	{r7}
 800253c:	b083      	sub	sp, #12
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
	return 1;
 8002542:	2301      	movs	r3, #1
}
 8002544:	4618      	mov	r0, r3
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
	return 0;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3714      	adds	r7, #20
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
	...

0800256c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002574:	4a14      	ldr	r2, [pc, #80]	; (80025c8 <_sbrk+0x5c>)
 8002576:	4b15      	ldr	r3, [pc, #84]	; (80025cc <_sbrk+0x60>)
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002580:	4b13      	ldr	r3, [pc, #76]	; (80025d0 <_sbrk+0x64>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d102      	bne.n	800258e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002588:	4b11      	ldr	r3, [pc, #68]	; (80025d0 <_sbrk+0x64>)
 800258a:	4a12      	ldr	r2, [pc, #72]	; (80025d4 <_sbrk+0x68>)
 800258c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800258e:	4b10      	ldr	r3, [pc, #64]	; (80025d0 <_sbrk+0x64>)
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4413      	add	r3, r2
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	429a      	cmp	r2, r3
 800259a:	d207      	bcs.n	80025ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800259c:	f008 fa66 	bl	800aa6c <__errno>
 80025a0:	4603      	mov	r3, r0
 80025a2:	220c      	movs	r2, #12
 80025a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025aa:	e009      	b.n	80025c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025ac:	4b08      	ldr	r3, [pc, #32]	; (80025d0 <_sbrk+0x64>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025b2:	4b07      	ldr	r3, [pc, #28]	; (80025d0 <_sbrk+0x64>)
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4413      	add	r3, r2
 80025ba:	4a05      	ldr	r2, [pc, #20]	; (80025d0 <_sbrk+0x64>)
 80025bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025be:	68fb      	ldr	r3, [r7, #12]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3718      	adds	r7, #24
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	20030000 	.word	0x20030000
 80025cc:	00001000 	.word	0x00001000
 80025d0:	20000494 	.word	0x20000494
 80025d4:	200017e8 	.word	0x200017e8

080025d8 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80025dc:	4b03      	ldr	r3, [pc, #12]	; (80025ec <LL_FLASH_GetUDN+0x14>)
 80025de:	681b      	ldr	r3, [r3, #0]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	1fff7580 	.word	0x1fff7580

080025f0 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80025f4:	4b03      	ldr	r3, [pc, #12]	; (8002604 <LL_FLASH_GetDeviceID+0x14>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	b2db      	uxtb	r3, r3
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	1fff7584 	.word	0x1fff7584

08002608 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 800260c:	4b03      	ldr	r3, [pc, #12]	; (800261c <LL_FLASH_GetSTCompanyID+0x14>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	0a1b      	lsrs	r3, r3, #8
}
 8002612:	4618      	mov	r0, r3
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	1fff7584 	.word	0x1fff7584

08002620 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 8002620:	b5b0      	push	{r4, r5, r7, lr}
 8002622:	b08e      	sub	sp, #56	; 0x38
 8002624:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8002626:	4b21      	ldr	r3, [pc, #132]	; (80026ac <APP_BLE_Init+0x8c>)
 8002628:	1d3c      	adds	r4, r7, #4
 800262a:	461d      	mov	r5, r3
 800262c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800262e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002630:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002632:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002634:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002636:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002638:	682b      	ldr	r3, [r5, #0]
 800263a:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 800263c:	f000 f92c 	bl	8002898 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8002640:	2101      	movs	r1, #1
 8002642:	2002      	movs	r0, #2
 8002644:	f007 ffb4 	bl	800a5b0 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8002648:	4a19      	ldr	r2, [pc, #100]	; (80026b0 <APP_BLE_Init+0x90>)
 800264a:	2100      	movs	r1, #0
 800264c:	2002      	movs	r0, #2
 800264e:	f008 f8c9 	bl	800a7e4 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 8002652:	1d3b      	adds	r3, r7, #4
 8002654:	4618      	mov	r0, r3
 8002656:	f006 fd4f 	bl	80090f8 <SHCI_C2_BLE_Init>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <APP_BLE_Init+0x44>
  {
    Error_Handler();
 8002660:	f7ff fca8 	bl	8001fb4 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8002664:	f000 f92e 	bl	80028c4 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8002668:	f007 fca2 	bl	8009fb0 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800266c:	4b11      	ldr	r3, [pc, #68]	; (80026b4 <APP_BLE_Init+0x94>)
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8002674:	4b0f      	ldr	r3, [pc, #60]	; (80026b4 <APP_BLE_Init+0x94>)
 8002676:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800267a:	82da      	strh	r2, [r3, #22]
  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800267c:	4a0e      	ldr	r2, [pc, #56]	; (80026b8 <APP_BLE_Init+0x98>)
 800267e:	2100      	movs	r1, #0
 8002680:	2001      	movs	r0, #1
 8002682:	f008 f8af 	bl	800a7e4 <UTIL_SEQ_RegTask>
  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if(RADIO_ACTIVITY_EVENT != 0)
  aci_hal_set_radio_activity_mask(0x0006);
 8002686:	2006      	movs	r0, #6
 8002688:	f006 f9ad 	bl	80089e6 <aci_hal_set_radio_activity_mask>
  mutex = 1;
#endif
  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800268c:	f000 fb18 	bl	8002cc0 <Custom_APP_Init>
/* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8002690:	4b08      	ldr	r3, [pc, #32]	; (80026b4 <APP_BLE_Init+0x94>)
 8002692:	2200      	movs	r2, #0
 8002694:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8002696:	4b07      	ldr	r3, [pc, #28]	; (80026b4 <APP_BLE_Init+0x94>)
 8002698:	2200      	movs	r2, #0
 800269a:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 800269c:	2001      	movs	r0, #1
 800269e:	f000 f9ab 	bl	80029f8 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 80026a2:	bf00      	nop
}
 80026a4:	3738      	adds	r7, #56	; 0x38
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bdb0      	pop	{r4, r5, r7, pc}
 80026aa:	bf00      	nop
 80026ac:	0800bdd4 	.word	0x0800bdd4
 80026b0:	08008d75 	.word	0x08008d75
 80026b4:	20000134 	.word	0x20000134
 80026b8:	08002b01 	.word	0x08002b01

080026bc <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b08a      	sub	sp, #40	; 0x28
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blecore_aci *blecore_evt;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3301      	adds	r3, #1
 80026c8:	627b      	str	r3, [r7, #36]	; 0x24

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 80026ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	2bff      	cmp	r3, #255	; 0xff
 80026d0:	d063      	beq.n	800279a <SVCCTL_App_Notification+0xde>
 80026d2:	2bff      	cmp	r3, #255	; 0xff
 80026d4:	f300 80c3 	bgt.w	800285e <SVCCTL_App_Notification+0x1a2>
 80026d8:	2b05      	cmp	r3, #5
 80026da:	d002      	beq.n	80026e2 <SVCCTL_App_Notification+0x26>
 80026dc:	2b3e      	cmp	r3, #62	; 0x3e
 80026de:	d023      	beq.n	8002728 <SVCCTL_App_Notification+0x6c>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 80026e0:	e0bd      	b.n	800285e <SVCCTL_App_Notification+0x1a2>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 80026e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e4:	3302      	adds	r3, #2
 80026e6:	60bb      	str	r3, [r7, #8]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	4b5f      	ldr	r3, [pc, #380]	; (8002870 <SVCCTL_App_Notification+0x1b4>)
 80026f2:	8adb      	ldrh	r3, [r3, #22]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d109      	bne.n	800270c <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 80026f8:	4b5d      	ldr	r3, [pc, #372]	; (8002870 <SVCCTL_App_Notification+0x1b4>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80026fe:	4b5c      	ldr	r3, [pc, #368]	; (8002870 <SVCCTL_App_Notification+0x1b4>)
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT WITH CLIENT \n");
 8002706:	485b      	ldr	r0, [pc, #364]	; (8002874 <SVCCTL_App_Notification+0x1b8>)
 8002708:	f008 fa76 	bl	800abf8 <puts>
      Adv_Request(APP_BLE_FAST_ADV);
 800270c:	2001      	movs	r0, #1
 800270e:	f000 f973 	bl	80029f8 <Adv_Request>
      handleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8002712:	4b59      	ldr	r3, [pc, #356]	; (8002878 <SVCCTL_App_Notification+0x1bc>)
 8002714:	2201      	movs	r2, #1
 8002716:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8002718:	4b55      	ldr	r3, [pc, #340]	; (8002870 <SVCCTL_App_Notification+0x1b4>)
 800271a:	8ada      	ldrh	r2, [r3, #22]
 800271c:	4b56      	ldr	r3, [pc, #344]	; (8002878 <SVCCTL_App_Notification+0x1bc>)
 800271e:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&handleNotification);
 8002720:	4855      	ldr	r0, [pc, #340]	; (8002878 <SVCCTL_App_Notification+0x1bc>)
 8002722:	f000 fab9 	bl	8002c98 <Custom_APP_Notification>
    break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8002726:	e09d      	b.n	8002864 <SVCCTL_App_Notification+0x1a8>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	3302      	adds	r3, #2
 800272c:	613b      	str	r3, [r7, #16]
      switch (meta_evt->subevent)
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d005      	beq.n	8002742 <SVCCTL_App_Notification+0x86>
 8002736:	2b03      	cmp	r3, #3
 8002738:	d12d      	bne.n	8002796 <SVCCTL_App_Notification+0xda>
          APP_DBG_MSG("\r\n\r** CONNECTION UPDATE EVENT WITH CLIENT \n");
 800273a:	4850      	ldr	r0, [pc, #320]	; (800287c <SVCCTL_App_Notification+0x1c0>)
 800273c:	f008 fa5c 	bl	800abf8 <puts>
          break;
 8002740:	e02a      	b.n	8002798 <SVCCTL_App_Notification+0xdc>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	3301      	adds	r3, #1
 8002746:	60fb      	str	r3, [r7, #12]
          APP_DBG_MSG("HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE for connection handle 0x%x\n", connection_complete_event->Connection_Handle);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800274e:	b29b      	uxth	r3, r3
 8002750:	4619      	mov	r1, r3
 8002752:	484b      	ldr	r0, [pc, #300]	; (8002880 <SVCCTL_App_Notification+0x1c4>)
 8002754:	f008 f9ca 	bl	800aaec <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8002758:	4b45      	ldr	r3, [pc, #276]	; (8002870 <SVCCTL_App_Notification+0x1b4>)
 800275a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800275e:	2b04      	cmp	r3, #4
 8002760:	d104      	bne.n	800276c <SVCCTL_App_Notification+0xb0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8002762:	4b43      	ldr	r3, [pc, #268]	; (8002870 <SVCCTL_App_Notification+0x1b4>)
 8002764:	2206      	movs	r2, #6
 8002766:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 800276a:	e003      	b.n	8002774 <SVCCTL_App_Notification+0xb8>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800276c:	4b40      	ldr	r3, [pc, #256]	; (8002870 <SVCCTL_App_Notification+0x1b4>)
 800276e:	2205      	movs	r2, #5
 8002770:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800277a:	b29a      	uxth	r2, r3
 800277c:	4b3c      	ldr	r3, [pc, #240]	; (8002870 <SVCCTL_App_Notification+0x1b4>)
 800277e:	82da      	strh	r2, [r3, #22]
          handleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8002780:	4b3d      	ldr	r3, [pc, #244]	; (8002878 <SVCCTL_App_Notification+0x1bc>)
 8002782:	2200      	movs	r2, #0
 8002784:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8002786:	4b3a      	ldr	r3, [pc, #232]	; (8002870 <SVCCTL_App_Notification+0x1b4>)
 8002788:	8ada      	ldrh	r2, [r3, #22]
 800278a:	4b3b      	ldr	r3, [pc, #236]	; (8002878 <SVCCTL_App_Notification+0x1bc>)
 800278c:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&handleNotification);
 800278e:	483a      	ldr	r0, [pc, #232]	; (8002878 <SVCCTL_App_Notification+0x1bc>)
 8002790:	f000 fa82 	bl	8002c98 <Custom_APP_Notification>
        break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8002794:	e000      	b.n	8002798 <SVCCTL_App_Notification+0xdc>
          break;
 8002796:	bf00      	nop
    break; /* HCI_LE_META_EVT_CODE */
 8002798:	e064      	b.n	8002864 <SVCCTL_App_Notification+0x1a8>
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279c:	3302      	adds	r3, #2
 800279e:	623b      	str	r3, [r7, #32]
      switch (blecore_evt->ecode)
 80027a0:	6a3b      	ldr	r3, [r7, #32]
 80027a2:	881b      	ldrh	r3, [r3, #0]
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027aa:	d054      	beq.n	8002856 <SVCCTL_App_Notification+0x19a>
 80027ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027b0:	dc57      	bgt.n	8002862 <SVCCTL_App_Notification+0x1a6>
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	d051      	beq.n	800285a <SVCCTL_App_Notification+0x19e>
 80027b6:	2b04      	cmp	r3, #4
 80027b8:	db53      	blt.n	8002862 <SVCCTL_App_Notification+0x1a6>
 80027ba:	f240 420a 	movw	r2, #1034	; 0x40a
 80027be:	4293      	cmp	r3, r2
 80027c0:	dc4f      	bgt.n	8002862 <SVCCTL_App_Notification+0x1a6>
 80027c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027c6:	dd4c      	ble.n	8002862 <SVCCTL_App_Notification+0x1a6>
 80027c8:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 80027cc:	2b09      	cmp	r3, #9
 80027ce:	d848      	bhi.n	8002862 <SVCCTL_App_Notification+0x1a6>
 80027d0:	a201      	add	r2, pc, #4	; (adr r2, 80027d8 <SVCCTL_App_Notification+0x11c>)
 80027d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d6:	bf00      	nop
 80027d8:	08002843 	.word	0x08002843
 80027dc:	08002811 	.word	0x08002811
 80027e0:	08002863 	.word	0x08002863
 80027e4:	08002863 	.word	0x08002863
 80027e8:	08002863 	.word	0x08002863
 80027ec:	08002863 	.word	0x08002863
 80027f0:	08002801 	.word	0x08002801
 80027f4:	08002863 	.word	0x08002863
 80027f8:	0800281f 	.word	0x0800281f
 80027fc:	08002809 	.word	0x08002809
        APP_DBG_MSG("\r\n\r** ACI_GAP_PROC_COMPLETE_VSEVT_CODE \n");
 8002800:	4820      	ldr	r0, [pc, #128]	; (8002884 <SVCCTL_App_Notification+0x1c8>)
 8002802:	f008 f9f9 	bl	800abf8 <puts>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8002806:	e029      	b.n	800285c <SVCCTL_App_Notification+0x1a0>
         APP_DBG_MSG("\r\n\r** ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE \n");
 8002808:	481f      	ldr	r0, [pc, #124]	; (8002888 <SVCCTL_App_Notification+0x1cc>)
 800280a:	f008 f9f5 	bl	800abf8 <puts>
        break;
 800280e:	e025      	b.n	800285c <SVCCTL_App_Notification+0x1a0>
            aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8002810:	4b17      	ldr	r3, [pc, #92]	; (8002870 <SVCCTL_App_Notification+0x1b4>)
 8002812:	8adb      	ldrh	r3, [r3, #22]
 8002814:	491d      	ldr	r1, [pc, #116]	; (800288c <SVCCTL_App_Notification+0x1d0>)
 8002816:	4618      	mov	r0, r3
 8002818:	f005 fb3c 	bl	8007e94 <aci_gap_pass_key_resp>
        break;
 800281c:	e01e      	b.n	800285c <SVCCTL_App_Notification+0x1a0>
            evt_numeric_value = (aci_gap_numeric_comparison_value_event_rp0 *)blecore_evt->data;
 800281e:	6a3b      	ldr	r3, [r7, #32]
 8002820:	3302      	adds	r3, #2
 8002822:	61fb      	str	r3, [r7, #28]
            numeric_value = evt_numeric_value->Numeric_Value;
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800282a:	61bb      	str	r3, [r7, #24]
            APP_DBG_MSG("numeric_value = %ld\n", numeric_value);
 800282c:	69b9      	ldr	r1, [r7, #24]
 800282e:	4818      	ldr	r0, [pc, #96]	; (8002890 <SVCCTL_App_Notification+0x1d4>)
 8002830:	f008 f95c 	bl	800aaec <iprintf>
            aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8002834:	4b0e      	ldr	r3, [pc, #56]	; (8002870 <SVCCTL_App_Notification+0x1b4>)
 8002836:	8adb      	ldrh	r3, [r3, #22]
 8002838:	2101      	movs	r1, #1
 800283a:	4618      	mov	r0, r3
 800283c:	f005 fcd4 	bl	80081e8 <aci_gap_numeric_comparison_value_confirm_yesno>
        break;
 8002840:	e00c      	b.n	800285c <SVCCTL_App_Notification+0x1a0>
            pairing_complete = (aci_gap_pairing_complete_event_rp0*)blecore_evt->data;
 8002842:	6a3b      	ldr	r3, [r7, #32]
 8002844:	3302      	adds	r3, #2
 8002846:	617b      	str	r3, [r7, #20]
            APP_DBG_MSG("BLE_CTRL_App_Notification: ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE, pairing_complete->Status = %d\n",pairing_complete->Status);
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	789b      	ldrb	r3, [r3, #2]
 800284c:	4619      	mov	r1, r3
 800284e:	4811      	ldr	r0, [pc, #68]	; (8002894 <SVCCTL_App_Notification+0x1d8>)
 8002850:	f008 f94c 	bl	800aaec <iprintf>
        break;
 8002854:	e002      	b.n	800285c <SVCCTL_App_Notification+0x1a0>
      break;
 8002856:	bf00      	nop
 8002858:	e003      	b.n	8002862 <SVCCTL_App_Notification+0x1a6>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800285a:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800285c:	e001      	b.n	8002862 <SVCCTL_App_Notification+0x1a6>
      break;
 800285e:	bf00      	nop
 8002860:	e000      	b.n	8002864 <SVCCTL_App_Notification+0x1a8>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8002862:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8002864:	2301      	movs	r3, #1
}
 8002866:	4618      	mov	r0, r3
 8002868:	3728      	adds	r7, #40	; 0x28
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	20000134 	.word	0x20000134
 8002874:	0800be08 	.word	0x0800be08
 8002878:	200004a0 	.word	0x200004a0
 800287c:	0800be30 	.word	0x0800be30
 8002880:	0800be5c 	.word	0x0800be5c
 8002884:	0800bea0 	.word	0x0800bea0
 8002888:	0800bec8 	.word	0x0800bec8
 800288c:	0001b207 	.word	0x0001b207
 8002890:	0800bef8 	.word	0x0800bef8
 8002894:	0800bf10 	.word	0x0800bf10

08002898 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800289e:	4b06      	ldr	r3, [pc, #24]	; (80028b8 <Ble_Tl_Init+0x20>)
 80028a0:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 80028a2:	4b06      	ldr	r3, [pc, #24]	; (80028bc <Ble_Tl_Init+0x24>)
 80028a4:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80028a6:	463b      	mov	r3, r7
 80028a8:	4619      	mov	r1, r3
 80028aa:	4805      	ldr	r0, [pc, #20]	; (80028c0 <Ble_Tl_Init+0x28>)
 80028ac:	f006 fa46 	bl	8008d3c <hci_init>

  return;
 80028b0:	bf00      	nop
}
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	20030028 	.word	0x20030028
 80028bc:	08002bd5 	.word	0x08002bd5
 80028c0:	08002b9d 	.word	0x08002b9d

080028c4 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 80028c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028c6:	b08d      	sub	sp, #52	; 0x34
 80028c8:	af06      	add	r7, sp, #24

  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 80028ca:	2300      	movs	r3, #0
 80028cc:	80bb      	strh	r3, [r7, #4]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 80028ce:	f006 f8de 	bl	8008a8e <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 80028d2:	f000 f8d1 	bl	8002a78 <BleGetBdAddress>
 80028d6:	6178      	str	r0, [r7, #20]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	2106      	movs	r1, #6
 80028dc:	2000      	movs	r0, #0
 80028de:	f005 ff96 	bl	800880e <aci_hal_write_config_data>
#endif

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 80028e2:	4a40      	ldr	r2, [pc, #256]	; (80029e4 <Ble_Hci_Gap_Gatt_Init+0x120>)
 80028e4:	2110      	movs	r1, #16
 80028e6:	2018      	movs	r0, #24
 80028e8:	f005 ff91 	bl	800880e <aci_hal_write_config_data>

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 80028ec:	4a3e      	ldr	r2, [pc, #248]	; (80029e8 <Ble_Hci_Gap_Gatt_Init+0x124>)
 80028ee:	2110      	movs	r1, #16
 80028f0:	2008      	movs	r0, #8
 80028f2:	f005 ff8c 	bl	800880e <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 80028f6:	2119      	movs	r1, #25
 80028f8:	2001      	movs	r0, #1
 80028fa:	f006 f80d 	bl	8008918 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 80028fe:	f005 fcda 	bl	80082b6 <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 8002902:	2300      	movs	r3, #0
 8002904:	74fb      	strb	r3, [r7, #19]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8002906:	7cfb      	ldrb	r3, [r7, #19]
 8002908:	f043 0301 	orr.w	r3, r3, #1
 800290c:	74fb      	strb	r3, [r7, #19]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 800290e:	7cfb      	ldrb	r3, [r7, #19]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d01d      	beq.n	8002950 <Ble_Hci_Gap_Gatt_Init+0x8c>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8002914:	4b35      	ldr	r3, [pc, #212]	; (80029ec <Ble_Hci_Gap_Gatt_Init+0x128>)
 8002916:	60fb      	str	r3, [r7, #12]
    aci_gap_init(role,
 8002918:	f107 020a 	add.w	r2, r7, #10
 800291c:	7cf8      	ldrb	r0, [r7, #19]
 800291e:	1dbb      	adds	r3, r7, #6
 8002920:	9301      	str	r3, [sp, #4]
 8002922:	f107 0308 	add.w	r3, r7, #8
 8002926:	9300      	str	r3, [sp, #0]
 8002928:	4613      	mov	r3, r2
 800292a:	2209      	movs	r2, #9
 800292c:	2100      	movs	r1, #0
 800292e:	f005 fb18 	bl	8007f62 <aci_gap_init>
                 CFG_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle,
                 &gap_dev_name_char_handle,
                 &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 8002932:	897c      	ldrh	r4, [r7, #10]
 8002934:	893d      	ldrh	r5, [r7, #8]
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f7fd fc22 	bl	8000180 <strlen>
 800293c:	4603      	mov	r3, r0
 800293e:	b2da      	uxtb	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	9300      	str	r3, [sp, #0]
 8002944:	4613      	mov	r3, r2
 8002946:	2200      	movs	r2, #0
 8002948:	4629      	mov	r1, r5
 800294a:	4620      	mov	r0, r4
 800294c:	f005 feb6 	bl	80086bc <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 8002950:	8978      	ldrh	r0, [r7, #10]
 8002952:	88f9      	ldrh	r1, [r7, #6]
 8002954:	1d3b      	adds	r3, r7, #4
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	2302      	movs	r3, #2
 800295a:	2200      	movs	r2, #0
 800295c:	f005 feae 	bl	80086bc <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
  /**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8002960:	2202      	movs	r2, #2
 8002962:	2102      	movs	r1, #2
 8002964:	2000      	movs	r0, #0
 8002966:	f006 f8b6 	bl	8008ad6 <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800296a:	4b21      	ldr	r3, [pc, #132]	; (80029f0 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 800296c:	2201      	movs	r2, #1
 800296e:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8002970:	4b1f      	ldr	r3, [pc, #124]	; (80029f0 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	4618      	mov	r0, r3
 8002976:	f005 f975 	bl	8007c64 <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800297a:	4b1d      	ldr	r3, [pc, #116]	; (80029f0 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 800297c:	2201      	movs	r2, #1
 800297e:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8002980:	4b1b      	ldr	r3, [pc, #108]	; (80029f0 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8002982:	2208      	movs	r2, #8
 8002984:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8002986:	4b1a      	ldr	r3, [pc, #104]	; (80029f0 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8002988:	2210      	movs	r2, #16
 800298a:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800298c:	4b18      	ldr	r3, [pc, #96]	; (80029f0 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 800298e:	2200      	movs	r2, #0
 8002990:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8002992:	4b17      	ldr	r3, [pc, #92]	; (80029f0 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 8002994:	4a17      	ldr	r2, [pc, #92]	; (80029f4 <Ble_Hci_Gap_Gatt_Init+0x130>)
 8002996:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8002998:	4b15      	ldr	r3, [pc, #84]	; (80029f0 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 800299a:	2200      	movs	r2, #0
 800299c:	709a      	strb	r2, [r3, #2]

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800299e:	4b14      	ldr	r3, [pc, #80]	; (80029f0 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 80029a0:	789c      	ldrb	r4, [r3, #2]
 80029a2:	4b13      	ldr	r3, [pc, #76]	; (80029f0 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 80029a4:	785d      	ldrb	r5, [r3, #1]
 80029a6:	4b12      	ldr	r3, [pc, #72]	; (80029f0 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 80029a8:	791b      	ldrb	r3, [r3, #4]
 80029aa:	4a11      	ldr	r2, [pc, #68]	; (80029f0 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 80029ac:	7952      	ldrb	r2, [r2, #5]
 80029ae:	4910      	ldr	r1, [pc, #64]	; (80029f0 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 80029b0:	78c9      	ldrb	r1, [r1, #3]
 80029b2:	480f      	ldr	r0, [pc, #60]	; (80029f0 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 80029b4:	6880      	ldr	r0, [r0, #8]
 80029b6:	2600      	movs	r6, #0
 80029b8:	9604      	str	r6, [sp, #16]
 80029ba:	9003      	str	r0, [sp, #12]
 80029bc:	9102      	str	r1, [sp, #8]
 80029be:	9201      	str	r2, [sp, #4]
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	2300      	movs	r3, #0
 80029c4:	2201      	movs	r2, #1
 80029c6:	4629      	mov	r1, r5
 80029c8:	4620      	mov	r0, r4
 80029ca:	f005 f99f 	bl	8007d0c <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 80029ce:	4b08      	ldr	r3, [pc, #32]	; (80029f0 <Ble_Hci_Gap_Gatt_Init+0x12c>)
 80029d0:	789b      	ldrb	r3, [r3, #2]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <Ble_Hci_Gap_Gatt_Init+0x116>
   {
     aci_gap_configure_whitelist();
 80029d6:	f005 fbe3 	bl	80081a0 <aci_gap_configure_whitelist>
   }
}
 80029da:	bf00      	nop
 80029dc:	371c      	adds	r7, #28
 80029de:	46bd      	mov	sp, r7
 80029e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029e2:	bf00      	nop
 80029e4:	0800c1c8 	.word	0x0800c1c8
 80029e8:	0800c1d8 	.word	0x0800c1d8
 80029ec:	0800bf70 	.word	0x0800bf70
 80029f0:	20000134 	.word	0x20000134
 80029f4:	0001b207 	.word	0x0001b207

080029f8 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b08c      	sub	sp, #48	; 0x30
 80029fc:	af08      	add	r7, sp, #32
 80029fe:	4603      	mov	r3, r0
 8002a00:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8002a02:	2392      	movs	r3, #146	; 0x92
 8002a04:	73fb      	strb	r3, [r7, #15]

    BleApplicationContext.Device_Connection_Status = New_Status;
 8002a06:	4a18      	ldr	r2, [pc, #96]	; (8002a68 <Adv_Request+0x70>)
 8002a08:	79fb      	ldrb	r3, [r7, #7]
 8002a0a:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 8002a0e:	2300      	movs	r3, #0
 8002a10:	9306      	str	r3, [sp, #24]
 8002a12:	2300      	movs	r3, #0
 8002a14:	9305      	str	r3, [sp, #20]
 8002a16:	2300      	movs	r3, #0
 8002a18:	9304      	str	r3, [sp, #16]
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	9303      	str	r3, [sp, #12]
 8002a1e:	2300      	movs	r3, #0
 8002a20:	9302      	str	r3, [sp, #8]
 8002a22:	2300      	movs	r3, #0
 8002a24:	9301      	str	r3, [sp, #4]
 8002a26:	2300      	movs	r3, #0
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	22a0      	movs	r2, #160	; 0xa0
 8002a2e:	2180      	movs	r1, #128	; 0x80
 8002a30:	2000      	movs	r0, #0
 8002a32:	f005 f81d 	bl	8007a70 <aci_gap_set_discoverable>
 8002a36:	4603      	mov	r3, r0
 8002a38:	73fb      	strb	r3, [r7, #15]
        0,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(ad_data), (uint8_t*) ad_data);
 8002a3a:	490c      	ldr	r1, [pc, #48]	; (8002a6c <Adv_Request+0x74>)
 8002a3c:	2017      	movs	r0, #23
 8002a3e:	f005 fb3d 	bl	80080bc <aci_gap_update_adv_data>
 8002a42:	4603      	mov	r3, r0
 8002a44:	73fb      	strb	r3, [r7, #15]

    if (ret == BLE_STATUS_SUCCESS)
 8002a46:	7bfb      	ldrb	r3, [r7, #15]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d103      	bne.n	8002a54 <Adv_Request+0x5c>
    {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
 8002a4c:	4808      	ldr	r0, [pc, #32]	; (8002a70 <Adv_Request+0x78>)
 8002a4e:	f008 f8d3 	bl	800abf8 <puts>
    else
    {
        APP_DBG_MSG("Start Fast Advertising Failed , result: %d \n", ret);
    }

  return;
 8002a52:	e005      	b.n	8002a60 <Adv_Request+0x68>
        APP_DBG_MSG("Start Fast Advertising Failed , result: %d \n", ret);
 8002a54:	7bfb      	ldrb	r3, [r7, #15]
 8002a56:	4619      	mov	r1, r3
 8002a58:	4806      	ldr	r0, [pc, #24]	; (8002a74 <Adv_Request+0x7c>)
 8002a5a:	f008 f847 	bl	800aaec <iprintf>
  return;
 8002a5e:	bf00      	nop
}
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	20000134 	.word	0x20000134
 8002a6c:	20000008 	.word	0x20000008
 8002a70:	0800bf7c 	.word	0x0800bf7c
 8002a74:	0800bfa4 	.word	0x0800bfa4

08002a78 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8002a7e:	f7ff fdab 	bl	80025d8 <LL_FLASH_GetUDN>
 8002a82:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a8a:	d023      	beq.n	8002ad4 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8002a8c:	f7ff fdbc 	bl	8002608 <LL_FLASH_GetSTCompanyID>
 8002a90:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8002a92:	f7ff fdad 	bl	80025f0 <LL_FLASH_GetDeviceID>
 8002a96:	6078      	str	r0, [r7, #4]
 * bit[23:16] : Device ID.
 * bit[15:0] : The last 16bits from the UDN
 * Note: In order to use the Public Address in a final product, a dedicated
 * 24bits company ID (OUI) shall be bought.
 */
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	b2da      	uxtb	r2, r3
 8002a9c:	4b16      	ldr	r3, [pc, #88]	; (8002af8 <BleGetBdAddress+0x80>)
 8002a9e:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	0a1b      	lsrs	r3, r3, #8
 8002aa4:	b2da      	uxtb	r2, r3
 8002aa6:	4b14      	ldr	r3, [pc, #80]	; (8002af8 <BleGetBdAddress+0x80>)
 8002aa8:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)device_id;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	b2da      	uxtb	r2, r3
 8002aae:	4b12      	ldr	r3, [pc, #72]	; (8002af8 <BleGetBdAddress+0x80>)
 8002ab0:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)(company_id & 0x000000FF);
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	4b10      	ldr	r3, [pc, #64]	; (8002af8 <BleGetBdAddress+0x80>)
 8002ab8:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	0a1b      	lsrs	r3, r3, #8
 8002abe:	b2da      	uxtb	r2, r3
 8002ac0:	4b0d      	ldr	r3, [pc, #52]	; (8002af8 <BleGetBdAddress+0x80>)
 8002ac2:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x00FF0000) >> 16 );
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	0c1b      	lsrs	r3, r3, #16
 8002ac8:	b2da      	uxtb	r2, r3
 8002aca:	4b0b      	ldr	r3, [pc, #44]	; (8002af8 <BleGetBdAddress+0x80>)
 8002acc:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 8002ace:	4b0a      	ldr	r3, [pc, #40]	; (8002af8 <BleGetBdAddress+0x80>)
 8002ad0:	617b      	str	r3, [r7, #20]
 8002ad2:	e00b      	b.n	8002aec <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 8002ad4:	2000      	movs	r0, #0
 8002ad6:	f006 fae7 	bl	80090a8 <OTP_Read>
 8002ada:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d002      	beq.n	8002ae8 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	617b      	str	r3, [r7, #20]
 8002ae6:	e001      	b.n	8002aec <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 8002ae8:	4b04      	ldr	r3, [pc, #16]	; (8002afc <BleGetBdAddress+0x84>)
 8002aea:	617b      	str	r3, [r7, #20]
    }
  }

  return bd_addr;
 8002aec:	697b      	ldr	r3, [r7, #20]
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3718      	adds	r7, #24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20000498 	.word	0x20000498
 8002afc:	0800c1c0 	.word	0x0800c1c0

08002b00 <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */

/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8002b06:	4b10      	ldr	r3, [pc, #64]	; (8002b48 <Adv_Cancel+0x48>)
 8002b08:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002b0c:	2b05      	cmp	r3, #5
 8002b0e:	d017      	beq.n	8002b40 <Adv_Cancel+0x40>

  {

    tBleStatus result = 0x00;
 8002b10:	2300      	movs	r3, #0
 8002b12:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 8002b14:	f004 ff88 	bl	8007a28 <aci_gap_set_non_discoverable>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8002b1c:	4b0a      	ldr	r3, [pc, #40]	; (8002b48 <Adv_Cancel+0x48>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if (result == BLE_STATUS_SUCCESS)
 8002b24:	79fb      	ldrb	r3, [r7, #7]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d106      	bne.n	8002b38 <Adv_Cancel+0x38>
    {
      APP_DBG_MSG("  \r\n\r");APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 8002b2a:	4808      	ldr	r0, [pc, #32]	; (8002b4c <Adv_Cancel+0x4c>)
 8002b2c:	f007 ffde 	bl	800aaec <iprintf>
 8002b30:	4807      	ldr	r0, [pc, #28]	; (8002b50 <Adv_Cancel+0x50>)
 8002b32:	f007 ffdb 	bl	800aaec <iprintf>
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 8002b36:	e003      	b.n	8002b40 <Adv_Cancel+0x40>
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 8002b38:	4806      	ldr	r0, [pc, #24]	; (8002b54 <Adv_Cancel+0x54>)
 8002b3a:	f007 ffd7 	bl	800aaec <iprintf>
  return;
 8002b3e:	bf00      	nop
 8002b40:	bf00      	nop
}
 8002b42:	3708      	adds	r7, #8
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	20000134 	.word	0x20000134
 8002b4c:	0800bfd4 	.word	0x0800bfd4
 8002b50:	0800bfdc 	.word	0x0800bfdc
 8002b54:	0800bff8 	.word	0x0800bff8

08002b58 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8002b60:	2100      	movs	r1, #0
 8002b62:	2002      	movs	r0, #2
 8002b64:	f007 fe60 	bl	800a828 <UTIL_SEQ_SetTask>
  return;
 8002b68:	bf00      	nop
}
 8002b6a:	3708      	adds	r7, #8
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8002b78:	2001      	movs	r0, #1
 8002b7a:	f007 fec1 	bl	800a900 <UTIL_SEQ_SetEvt>
  return;
 8002b7e:	bf00      	nop
}
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b082      	sub	sp, #8
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8002b8e:	2001      	movs	r0, #1
 8002b90:	f007 fed6 	bl	800a940 <UTIL_SEQ_WaitEvt>
  return;
 8002b94:	bf00      	nop
}
 8002b96:	3708      	adds	r7, #8
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	3308      	adds	r3, #8
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f007 fa50 	bl	800a054 <SVCCTL_UserEvtRx>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8002bb8:	7afb      	ldrb	r3, [r7, #11]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d003      	beq.n	8002bc6 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	701a      	strb	r2, [r3, #0]
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8002bc4:	e003      	b.n	8002bce <BLE_UserEvtRx+0x32>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	701a      	strb	r2, [r3, #0]
  return;
 8002bcc:	bf00      	nop
}
 8002bce:	3710      	adds	r7, #16
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	4603      	mov	r3, r0
 8002bdc:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 8002bde:	79fb      	ldrb	r3, [r7, #7]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d002      	beq.n	8002bea <BLE_StatusNot+0x16>
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d006      	beq.n	8002bf6 <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 8002be8:	e00b      	b.n	8002c02 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8002bea:	231f      	movs	r3, #31
 8002bec:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f007 fe46 	bl	800a880 <UTIL_SEQ_PauseTask>
      break;
 8002bf4:	e005      	b.n	8002c02 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8002bf6:	231f      	movs	r3, #31
 8002bf8:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f007 fe60 	bl	800a8c0 <UTIL_SEQ_ResumeTask>
      break;
 8002c00:	bf00      	nop
  }
  return;
 8002c02:	bf00      	nop
}
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
	...

08002c0c <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */
  static uint16_t temp_value, hr_energy;
    
  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch(pNotification->Custom_Evt_Opcode)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	2b05      	cmp	r3, #5
 8002c1a:	d830      	bhi.n	8002c7e <Custom_STM_App_Notification+0x72>
 8002c1c:	a201      	add	r2, pc, #4	; (adr r2, 8002c24 <Custom_STM_App_Notification+0x18>)
 8002c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c22:	bf00      	nop
 8002c24:	08002c3d 	.word	0x08002c3d
 8002c28:	08002c4f 	.word	0x08002c4f
 8002c2c:	08002c7f 	.word	0x08002c7f
 8002c30:	08002c7f 	.word	0x08002c7f
 8002c34:	08002c7f 	.word	0x08002c7f
 8002c38:	08002c7f 	.word	0x08002c7f
    /* USER CODE END CUSTOM_STM_App_Notification_Custom_Evt_Opcode */

  /* FER_WPSERVICE */
    case CUSTOM_STM_TEMP_READ_EVT:
      /* USER CODE BEGIN CUSTOM_STM_TEMP_READ_EVT */
    	UpdateCharData[0] =  (uint16_t) 28;
 8002c3c:	4b12      	ldr	r3, [pc, #72]	; (8002c88 <Custom_STM_App_Notification+0x7c>)
 8002c3e:	221c      	movs	r2, #28
 8002c40:	701a      	strb	r2, [r3, #0]
    	UpdateCharData[1] =  (uint16_t) 98;
 8002c42:	4b11      	ldr	r3, [pc, #68]	; (8002c88 <Custom_STM_App_Notification+0x7c>)
 8002c44:	2262      	movs	r2, #98	; 0x62
 8002c46:	705a      	strb	r2, [r3, #1]
    	Custom_Temp_Update_Char();
 8002c48:	f000 f84c 	bl	8002ce4 <Custom_Temp_Update_Char>
      /* USER CODE END CUSTOM_STM_TEMP_READ_EVT */
      break;
 8002c4c:	e018      	b.n	8002c80 <Custom_STM_App_Notification+0x74>

    case CUSTOM_STM_TEMP_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_TEMP_NOTIFY_ENABLED_EVT */

    	Custom_App_Context.Temp_Notification_Status = 1;
 8002c4e:	4b0f      	ldr	r3, [pc, #60]	; (8002c8c <Custom_STM_App_Notification+0x80>)
 8002c50:	2201      	movs	r2, #1
 8002c52:	701a      	strb	r2, [r3, #0]
    	temp_value=temp_value+1;
 8002c54:	4b0e      	ldr	r3, [pc, #56]	; (8002c90 <Custom_STM_App_Notification+0x84>)
 8002c56:	881b      	ldrh	r3, [r3, #0]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	4b0c      	ldr	r3, [pc, #48]	; (8002c90 <Custom_STM_App_Notification+0x84>)
 8002c5e:	801a      	strh	r2, [r3, #0]
        NotifyCharData[1] = (uint8_t)temp_value;
 8002c60:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <Custom_STM_App_Notification+0x84>)
 8002c62:	881b      	ldrh	r3, [r3, #0]
 8002c64:	b2da      	uxtb	r2, r3
 8002c66:	4b0b      	ldr	r3, [pc, #44]	; (8002c94 <Custom_STM_App_Notification+0x88>)
 8002c68:	705a      	strb	r2, [r3, #1]
        NotifyCharData[2] = (uint8_t)(temp_value >> 8);
 8002c6a:	4b09      	ldr	r3, [pc, #36]	; (8002c90 <Custom_STM_App_Notification+0x84>)
 8002c6c:	881b      	ldrh	r3, [r3, #0]
 8002c6e:	0a1b      	lsrs	r3, r3, #8
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	b2da      	uxtb	r2, r3
 8002c74:	4b07      	ldr	r3, [pc, #28]	; (8002c94 <Custom_STM_App_Notification+0x88>)
 8002c76:	709a      	strb	r2, [r3, #2]

        Custom_Temp_Send_Notification();
 8002c78:	f000 f83e 	bl	8002cf8 <Custom_Temp_Send_Notification>

      /* USER CODE END CUSTOM_STM_TEMP_NOTIFY_ENABLED_EVT */
      break;
 8002c7c:	e000      	b.n	8002c80 <Custom_STM_App_Notification+0x74>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 8002c7e:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 8002c80:	bf00      	nop
}
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	200004a4 	.word	0x200004a4
 8002c8c:	200001b8 	.word	0x200001b8
 8002c90:	20000694 	.word	0x20000694
 8002c94:	2000059c 	.word	0x2000059c

08002c98 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch(pNotification->Custom_Evt_Opcode)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d002      	beq.n	8002cae <Custom_APP_Notification+0x16>
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d002      	beq.n	8002cb2 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8002cac:	e002      	b.n	8002cb4 <Custom_APP_Notification+0x1c>
      break;
 8002cae:	bf00      	nop
 8002cb0:	e000      	b.n	8002cb4 <Custom_APP_Notification+0x1c>
      break;
 8002cb2:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8002cb4:	bf00      	nop
}
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */
			UpdateCharData[0] =  (uint16_t) 28;
 8002cc4:	4b06      	ldr	r3, [pc, #24]	; (8002ce0 <Custom_APP_Init+0x20>)
 8002cc6:	221c      	movs	r2, #28
 8002cc8:	701a      	strb	r2, [r3, #0]
			UpdateCharData[1] =  (uint16_t) 98;
 8002cca:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <Custom_APP_Init+0x20>)
 8002ccc:	2262      	movs	r2, #98	; 0x62
 8002cce:	705a      	strb	r2, [r3, #1]
			UpdateCharData[2] =  (uint16_t) 29;
 8002cd0:	4b03      	ldr	r3, [pc, #12]	; (8002ce0 <Custom_APP_Init+0x20>)
 8002cd2:	221d      	movs	r2, #29
 8002cd4:	709a      	strb	r2, [r3, #2]
	    	Custom_Temp_Update_Char();
 8002cd6:	f000 f805 	bl	8002ce4 <Custom_Temp_Update_Char>
  /* USER CODE END CUSTOM_APP_Init */
  return;
 8002cda:	bf00      	nop
}
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	200004a4 	.word	0x200004a4

08002ce4 <Custom_Temp_Update_Char>:
 *
 *************************************************************/

  /* FER_WPSERVICE */
void Custom_Temp_Update_Char(void) /* Property Read */
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  Custom_STM_App_Update_Char(CUSTOM_STM_TEMP, (uint8_t *)UpdateCharData);
 8002ce8:	4902      	ldr	r1, [pc, #8]	; (8002cf4 <Custom_Temp_Update_Char+0x10>)
 8002cea:	2000      	movs	r0, #0
 8002cec:	f000 f91c 	bl	8002f28 <Custom_STM_App_Update_Char>
  /* USER CODE BEGIN Temp_UC*/

  /* USER CODE END Temp_UC*/
  return;
 8002cf0:	bf00      	nop
}
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	200004a4 	.word	0x200004a4

08002cf8 <Custom_Temp_Send_Notification>:

void Custom_Temp_Send_Notification(void) /* Property Notification */
 {
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  if(Custom_App_Context.Temp_Notification_Status)
 8002cfc:	4b06      	ldr	r3, [pc, #24]	; (8002d18 <Custom_Temp_Send_Notification+0x20>)
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d004      	beq.n	8002d0e <Custom_Temp_Send_Notification+0x16>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_TEMP, (uint8_t *)NotifyCharData);
 8002d04:	4905      	ldr	r1, [pc, #20]	; (8002d1c <Custom_Temp_Send_Notification+0x24>)
 8002d06:	2000      	movs	r0, #0
 8002d08:	f000 f90e 	bl	8002f28 <Custom_STM_App_Update_Char>
  }
  else
  {
    APP_DBG_MSG("-- CUSTOM APPLICATION : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n ");
  }
  return;
 8002d0c:	e003      	b.n	8002d16 <Custom_Temp_Send_Notification+0x1e>
    APP_DBG_MSG("-- CUSTOM APPLICATION : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n ");
 8002d0e:	4804      	ldr	r0, [pc, #16]	; (8002d20 <Custom_Temp_Send_Notification+0x28>)
 8002d10:	f007 feec 	bl	800aaec <iprintf>
  return;
 8002d14:	bf00      	nop
}
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	200001b8 	.word	0x200001b8
 8002d1c:	2000059c 	.word	0x2000059c
 8002d20:	0800c01c 	.word	0x0800c01c

08002d24 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b08a      	sub	sp, #40	; 0x28
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
                           Gatt Event Mask = GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP are defined, so:
                           BLE core event ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE must be considered*/
  /* aci_gatt_read_permit_req_event_rp0    *read_req; */ 
  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	3301      	adds	r3, #1
 8002d36:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 8002d38:	6a3b      	ldr	r3, [r7, #32]
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2bff      	cmp	r3, #255	; 0xff
 8002d3e:	d164      	bne.n	8002e0a <Custom_STM_Event_Handler+0xe6>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8002d40:	6a3b      	ldr	r3, [r7, #32]
 8002d42:	3302      	adds	r3, #2
 8002d44:	61fb      	str	r3, [r7, #28]
      switch(blecore_evt->ecode)
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	881b      	ldrh	r3, [r3, #0]
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	f640 4214 	movw	r2, #3092	; 0xc14
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d056      	beq.n	8002e02 <Custom_STM_Event_Handler+0xde>
 8002d54:	f640 4214 	movw	r2, #3092	; 0xc14
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	dc54      	bgt.n	8002e06 <Custom_STM_Event_Handler+0xe2>
 8002d5c:	f640 4201 	movw	r2, #3073	; 0xc01
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d003      	beq.n	8002d6c <Custom_STM_Event_Handler+0x48>
 8002d64:	f640 4213 	movw	r2, #3091	; 0xc13
 8002d68:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 8002d6a:	e04d      	b.n	8002e08 <Custom_STM_Event_Handler+0xe4>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	3302      	adds	r3, #2
 8002d70:	61bb      	str	r3, [r7, #24]
          if(attribute_modified->Attr_Handle == (CustomContext.CustomTempHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	885b      	ldrh	r3, [r3, #2]
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	461a      	mov	r2, r3
 8002d7a:	4b27      	ldr	r3, [pc, #156]	; (8002e18 <Custom_STM_Event_Handler+0xf4>)
 8002d7c:	885b      	ldrh	r3, [r3, #2]
 8002d7e:	3302      	adds	r3, #2
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d119      	bne.n	8002db8 <Custom_STM_Event_Handler+0x94>
            return_value = SVCCTL_EvtAckFlowEnable;
 8002d84:	2301      	movs	r3, #1
 8002d86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            switch(attribute_modified->Attr_Data[0])
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	7a1b      	ldrb	r3, [r3, #8]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d002      	beq.n	8002d98 <Custom_STM_Event_Handler+0x74>
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d008      	beq.n	8002da8 <Custom_STM_Event_Handler+0x84>
              break;
 8002d96:	e033      	b.n	8002e00 <Custom_STM_Event_Handler+0xdc>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_TEMP_NOTIFY_DISABLED_EVT;
 8002d98:	2302      	movs	r3, #2
 8002d9a:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8002d9c:	f107 0308 	add.w	r3, r7, #8
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff ff33 	bl	8002c0c <Custom_STM_App_Notification>
                break;
 8002da6:	e02b      	b.n	8002e00 <Custom_STM_Event_Handler+0xdc>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_TEMP_NOTIFY_ENABLED_EVT;
 8002da8:	2301      	movs	r3, #1
 8002daa:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8002dac:	f107 0308 	add.w	r3, r7, #8
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff ff2b 	bl	8002c0c <Custom_STM_App_Notification>
                break;
 8002db6:	e023      	b.n	8002e00 <Custom_STM_Event_Handler+0xdc>
          else if(attribute_modified->Attr_Handle == (CustomContext.CustomHumidHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	885b      	ldrh	r3, [r3, #2]
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	4b15      	ldr	r3, [pc, #84]	; (8002e18 <Custom_STM_Event_Handler+0xf4>)
 8002dc2:	889b      	ldrh	r3, [r3, #4]
 8002dc4:	3302      	adds	r3, #2
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d119      	bne.n	8002dfe <Custom_STM_Event_Handler+0xda>
            return_value = SVCCTL_EvtAckFlowEnable;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            switch(attribute_modified->Attr_Data[0])
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	7a1b      	ldrb	r3, [r3, #8]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d002      	beq.n	8002dde <Custom_STM_Event_Handler+0xba>
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d008      	beq.n	8002dee <Custom_STM_Event_Handler+0xca>
              break;
 8002ddc:	e010      	b.n	8002e00 <Custom_STM_Event_Handler+0xdc>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_HUMID_NOTIFY_DISABLED_EVT;
 8002dde:	2305      	movs	r3, #5
 8002de0:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8002de2:	f107 0308 	add.w	r3, r7, #8
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff ff10 	bl	8002c0c <Custom_STM_App_Notification>
                break;
 8002dec:	e008      	b.n	8002e00 <Custom_STM_Event_Handler+0xdc>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_HUMID_NOTIFY_ENABLED_EVT;
 8002dee:	2304      	movs	r3, #4
 8002df0:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8002df2:	f107 0308 	add.w	r3, r7, #8
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff ff08 	bl	8002c0c <Custom_STM_App_Notification>
                break;
 8002dfc:	e000      	b.n	8002e00 <Custom_STM_Event_Handler+0xdc>
          }  /* if(attribute_modified->Attr_Handle == (CustomContext.CustomHumidHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/
 8002dfe:	bf00      	nop
          break;
 8002e00:	e002      	b.n	8002e08 <Custom_STM_Event_Handler+0xe4>
          break;
 8002e02:	bf00      	nop
 8002e04:	e002      	b.n	8002e0c <Custom_STM_Event_Handler+0xe8>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8002e06:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8002e08:	e000      	b.n	8002e0c <Custom_STM_Event_Handler+0xe8>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8002e0a:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8002e0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end Custom_STM_Event_Handler */
 8002e10:	4618      	mov	r0, r3
 8002e12:	3728      	adds	r7, #40	; 0x28
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	200001bc 	.word	0x200001bc

08002e1c <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b08a      	sub	sp, #40	; 0x28
 8002e20:	af06      	add	r7, sp, #24
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8002e22:	483d      	ldr	r0, [pc, #244]	; (8002f18 <SVCCTL_InitCustomSvc+0xfc>)
 8002e24:	f007 f8fc 	bl	800a020 <SVCCTL_RegisterSvcHandler>
   *                                1 for Temperature configuration descriptor +
   *                                1 for Humidity configuration descriptor +
   *                              = 7
   */

  uuid.Char_UUID_16 = 0xa000;
 8002e28:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002e2c:	803b      	strh	r3, [r7, #0]
  aci_gatt_add_service(UUID_TYPE_16,
 8002e2e:	4639      	mov	r1, r7
 8002e30:	4b3a      	ldr	r3, [pc, #232]	; (8002f1c <SVCCTL_InitCustomSvc+0x100>)
 8002e32:	9300      	str	r3, [sp, #0]
 8002e34:	2307      	movs	r3, #7
 8002e36:	2201      	movs	r2, #1
 8002e38:	2001      	movs	r0, #1
 8002e3a:	f005 fa61 	bl	8008300 <aci_gatt_add_service>
                       &(CustomContext.CustomFer_WpsHdle));

  /**
   *  Temperature
   */
  COPY_TEMPERATURE_UUID(uuid.Char_UUID_128);
 8002e3e:	2319      	movs	r3, #25
 8002e40:	703b      	strb	r3, [r7, #0]
 8002e42:	23ed      	movs	r3, #237	; 0xed
 8002e44:	707b      	strb	r3, [r7, #1]
 8002e46:	2382      	movs	r3, #130	; 0x82
 8002e48:	70bb      	strb	r3, [r7, #2]
 8002e4a:	23ae      	movs	r3, #174	; 0xae
 8002e4c:	70fb      	strb	r3, [r7, #3]
 8002e4e:	23ed      	movs	r3, #237	; 0xed
 8002e50:	713b      	strb	r3, [r7, #4]
 8002e52:	2321      	movs	r3, #33	; 0x21
 8002e54:	717b      	strb	r3, [r7, #5]
 8002e56:	234c      	movs	r3, #76	; 0x4c
 8002e58:	71bb      	strb	r3, [r7, #6]
 8002e5a:	239d      	movs	r3, #157	; 0x9d
 8002e5c:	71fb      	strb	r3, [r7, #7]
 8002e5e:	2341      	movs	r3, #65	; 0x41
 8002e60:	723b      	strb	r3, [r7, #8]
 8002e62:	2345      	movs	r3, #69	; 0x45
 8002e64:	727b      	strb	r3, [r7, #9]
 8002e66:	2322      	movs	r3, #34	; 0x22
 8002e68:	72bb      	strb	r3, [r7, #10]
 8002e6a:	238e      	movs	r3, #142	; 0x8e
 8002e6c:	72fb      	strb	r3, [r7, #11]
 8002e6e:	2300      	movs	r3, #0
 8002e70:	733b      	strb	r3, [r7, #12]
 8002e72:	23aa      	movs	r3, #170	; 0xaa
 8002e74:	737b      	strb	r3, [r7, #13]
 8002e76:	2300      	movs	r3, #0
 8002e78:	73bb      	strb	r3, [r7, #14]
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	73fb      	strb	r3, [r7, #15]
  aci_gatt_add_char(CustomContext.CustomFer_WpsHdle,
 8002e7e:	4b27      	ldr	r3, [pc, #156]	; (8002f1c <SVCCTL_InitCustomSvc+0x100>)
 8002e80:	8818      	ldrh	r0, [r3, #0]
 8002e82:	2310      	movs	r3, #16
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	463a      	mov	r2, r7
 8002e88:	4925      	ldr	r1, [pc, #148]	; (8002f20 <SVCCTL_InitCustomSvc+0x104>)
 8002e8a:	9105      	str	r1, [sp, #20]
 8002e8c:	2101      	movs	r1, #1
 8002e8e:	9104      	str	r1, [sp, #16]
 8002e90:	2110      	movs	r1, #16
 8002e92:	9103      	str	r1, [sp, #12]
 8002e94:	2100      	movs	r1, #0
 8002e96:	9102      	str	r1, [sp, #8]
 8002e98:	2100      	movs	r1, #0
 8002e9a:	9101      	str	r1, [sp, #4]
 8002e9c:	2112      	movs	r1, #18
 8002e9e:	9100      	str	r1, [sp, #0]
 8002ea0:	2102      	movs	r1, #2
 8002ea2:	f005 fb03 	bl	80084ac <aci_gatt_add_char>
                    CHAR_VALUE_LEN_VARIABLE,
                    &(CustomContext.CustomTempHdle));
  /**
   *  Humidity
   */
  COPY_HUMIDITY_UUID(uuid.Char_UUID_128);
 8002ea6:	2319      	movs	r3, #25
 8002ea8:	703b      	strb	r3, [r7, #0]
 8002eaa:	23ed      	movs	r3, #237	; 0xed
 8002eac:	707b      	strb	r3, [r7, #1]
 8002eae:	2382      	movs	r3, #130	; 0x82
 8002eb0:	70bb      	strb	r3, [r7, #2]
 8002eb2:	23ae      	movs	r3, #174	; 0xae
 8002eb4:	70fb      	strb	r3, [r7, #3]
 8002eb6:	23ed      	movs	r3, #237	; 0xed
 8002eb8:	713b      	strb	r3, [r7, #4]
 8002eba:	2321      	movs	r3, #33	; 0x21
 8002ebc:	717b      	strb	r3, [r7, #5]
 8002ebe:	234c      	movs	r3, #76	; 0x4c
 8002ec0:	71bb      	strb	r3, [r7, #6]
 8002ec2:	239d      	movs	r3, #157	; 0x9d
 8002ec4:	71fb      	strb	r3, [r7, #7]
 8002ec6:	2341      	movs	r3, #65	; 0x41
 8002ec8:	723b      	strb	r3, [r7, #8]
 8002eca:	2345      	movs	r3, #69	; 0x45
 8002ecc:	727b      	strb	r3, [r7, #9]
 8002ece:	2322      	movs	r3, #34	; 0x22
 8002ed0:	72bb      	strb	r3, [r7, #10]
 8002ed2:	238e      	movs	r3, #142	; 0x8e
 8002ed4:	72fb      	strb	r3, [r7, #11]
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	733b      	strb	r3, [r7, #12]
 8002eda:	23aa      	movs	r3, #170	; 0xaa
 8002edc:	737b      	strb	r3, [r7, #13]
 8002ede:	2300      	movs	r3, #0
 8002ee0:	73bb      	strb	r3, [r7, #14]
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	73fb      	strb	r3, [r7, #15]
  aci_gatt_add_char(CustomContext.CustomFer_WpsHdle,
 8002ee6:	4b0d      	ldr	r3, [pc, #52]	; (8002f1c <SVCCTL_InitCustomSvc+0x100>)
 8002ee8:	8818      	ldrh	r0, [r3, #0]
 8002eea:	2310      	movs	r3, #16
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	463a      	mov	r2, r7
 8002ef0:	490c      	ldr	r1, [pc, #48]	; (8002f24 <SVCCTL_InitCustomSvc+0x108>)
 8002ef2:	9105      	str	r1, [sp, #20]
 8002ef4:	2101      	movs	r1, #1
 8002ef6:	9104      	str	r1, [sp, #16]
 8002ef8:	2110      	movs	r1, #16
 8002efa:	9103      	str	r1, [sp, #12]
 8002efc:	2100      	movs	r1, #0
 8002efe:	9102      	str	r1, [sp, #8]
 8002f00:	2100      	movs	r1, #0
 8002f02:	9101      	str	r1, [sp, #4]
 8002f04:	2112      	movs	r1, #18
 8002f06:	9100      	str	r1, [sp, #0]
 8002f08:	2102      	movs	r1, #2
 8002f0a:	f005 facf 	bl	80084ac <aci_gatt_add_char>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8002f0e:	bf00      	nop
}
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	08002d25 	.word	0x08002d25
 8002f1c:	200001bc 	.word	0x200001bc
 8002f20:	200001be 	.word	0x200001be
 8002f24:	200001c0 	.word	0x200001c0

08002f28 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af02      	add	r7, sp, #8
 8002f2e:	4603      	mov	r3, r0
 8002f30:	6039      	str	r1, [r7, #0]
 8002f32:	71fb      	strb	r3, [r7, #7]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 8002f34:	2392      	movs	r3, #146	; 0x92
 8002f36:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch(CharOpcode)
 8002f38:	79fb      	ldrb	r3, [r7, #7]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d002      	beq.n	8002f44 <Custom_STM_App_Update_Char+0x1c>
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d00e      	beq.n	8002f60 <Custom_STM_App_Update_Char+0x38>
            */
      /* USER CODE END CUSTOM_STM_Service_1_Char_2*/
      break;

    default:
      break;
 8002f42:	e01b      	b.n	8002f7c <Custom_STM_App_Update_Char+0x54>
      result = aci_gatt_update_char_value(CustomContext.CustomFer_WpsHdle,
 8002f44:	4b10      	ldr	r3, [pc, #64]	; (8002f88 <Custom_STM_App_Update_Char+0x60>)
 8002f46:	8818      	ldrh	r0, [r3, #0]
 8002f48:	4b0f      	ldr	r3, [pc, #60]	; (8002f88 <Custom_STM_App_Update_Char+0x60>)
 8002f4a:	8859      	ldrh	r1, [r3, #2]
 8002f4c:	2210      	movs	r2, #16
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	9300      	str	r3, [sp, #0]
 8002f52:	4613      	mov	r3, r2
 8002f54:	2200      	movs	r2, #0
 8002f56:	f005 fbb1 	bl	80086bc <aci_gatt_update_char_value>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	73fb      	strb	r3, [r7, #15]
      break;
 8002f5e:	e00d      	b.n	8002f7c <Custom_STM_App_Update_Char+0x54>
      result = aci_gatt_update_char_value(CustomContext.CustomFer_WpsHdle,
 8002f60:	4b09      	ldr	r3, [pc, #36]	; (8002f88 <Custom_STM_App_Update_Char+0x60>)
 8002f62:	8818      	ldrh	r0, [r3, #0]
 8002f64:	4b08      	ldr	r3, [pc, #32]	; (8002f88 <Custom_STM_App_Update_Char+0x60>)
 8002f66:	8899      	ldrh	r1, [r3, #4]
 8002f68:	2210      	movs	r2, #16
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	2200      	movs	r2, #0
 8002f72:	f005 fba3 	bl	80086bc <aci_gatt_update_char_value>
 8002f76:	4603      	mov	r3, r0
 8002f78:	73fb      	strb	r3, [r7, #15]
      break;
 8002f7a:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return result;
 8002f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	200001bc 	.word	0x200001bc

08002f8c <LL_PWR_EnableBootC2>:
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8002f90:	4b05      	ldr	r3, [pc, #20]	; (8002fa8 <LL_PWR_EnableBootC2+0x1c>)
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	4a04      	ldr	r2, [pc, #16]	; (8002fa8 <LL_PWR_EnableBootC2+0x1c>)
 8002f96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f9a:	60d3      	str	r3, [r2, #12]
}
 8002f9c:	bf00      	nop
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	58000400 	.word	0x58000400

08002fac <LL_C2_EXTI_EnableEvent_32_63>:
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8002fb4:	4b06      	ldr	r3, [pc, #24]	; (8002fd0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8002fb6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8002fba:	4905      	ldr	r1, [pc, #20]	; (8002fd0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	58000800 	.word	0x58000800

08002fd4 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8002fdc:	4b05      	ldr	r3, [pc, #20]	; (8002ff4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002fde:	6a1a      	ldr	r2, [r3, #32]
 8002fe0:	4904      	ldr	r1, [pc, #16]	; (8002ff4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	620b      	str	r3, [r1, #32]
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr
 8002ff4:	58000800 	.word	0x58000800

08002ff8 <LL_AHB3_GRP1_EnableClock>:
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003004:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003006:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4313      	orrs	r3, r2
 800300e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003010:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003014:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4013      	ands	r3, r2
 800301a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800301c:	68fb      	ldr	r3, [r7, #12]
}
 800301e:	bf00      	nop
 8003020:	3714      	adds	r7, #20
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr

0800302a <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800302a:	b480      	push	{r7}
 800302c:	b085      	sub	sp, #20
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8003032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003036:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800303a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4313      	orrs	r3, r2
 8003042:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8003046:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800304a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4013      	ands	r3, r2
 8003052:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003054:	68fb      	ldr	r3, [r7, #12]
}
 8003056:	bf00      	nop
 8003058:	3714      	adds	r7, #20
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr

08003062 <LL_C1_IPCC_EnableIT_TXF>:
{
 8003062:	b480      	push	{r7}
 8003064:	b083      	sub	sp, #12
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	601a      	str	r2, [r3, #0]
}
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr

08003082 <LL_C1_IPCC_EnableIT_RXO>:
{
 8003082:	b480      	push	{r7}
 8003084:	b083      	sub	sp, #12
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f043 0201 	orr.w	r2, r3, #1
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	601a      	str	r2, [r3, #0]
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <LL_C1_IPCC_EnableTransmitChannel>:
{
 80030a2:	b480      	push	{r7}
 80030a4:	b083      	sub	sp, #12
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
 80030aa:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	041b      	lsls	r3, r3, #16
 80030b4:	43db      	mvns	r3, r3
 80030b6:	401a      	ands	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	605a      	str	r2, [r3, #4]
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <LL_C1_IPCC_DisableTransmitChannel>:
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	041b      	lsls	r3, r3, #16
 80030da:	431a      	orrs	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	605a      	str	r2, [r3, #4]
}
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <LL_C1_IPCC_EnableReceiveChannel>:
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685a      	ldr	r2, [r3, #4]
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	43db      	mvns	r3, r3
 80030fe:	401a      	ands	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	605a      	str	r2, [r3, #4]
}
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	683a      	ldr	r2, [r7, #0]
 800311e:	609a      	str	r2, [r3, #8]
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <LL_C1_IPCC_SetFlag_CHx>:
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	041a      	lsls	r2, r3, #16
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	609a      	str	r2, [r3, #8]
}
 800313e:	bf00      	nop
 8003140:	370c      	adds	r7, #12
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr

0800314a <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800314a:	b480      	push	{r7}
 800314c:	b083      	sub	sp, #12
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
 8003152:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	68da      	ldr	r2, [r3, #12]
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	4013      	ands	r3, r2
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	429a      	cmp	r2, r3
 8003160:	d101      	bne.n	8003166 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8003162:	2301      	movs	r3, #1
 8003164:	e000      	b.n	8003168 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69da      	ldr	r2, [r3, #28]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	4013      	ands	r3, r2
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	429a      	cmp	r2, r3
 800318a:	d101      	bne.n	8003190 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800318c:	2301      	movs	r3, #1
 800318e:	e000      	b.n	8003192 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
	...

080031a0 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80031a4:	2102      	movs	r1, #2
 80031a6:	4819      	ldr	r0, [pc, #100]	; (800320c <HW_IPCC_Rx_Handler+0x6c>)
 80031a8:	f7ff ffe4 	bl	8003174 <LL_C2_IPCC_IsActiveFlag_CHx>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d009      	beq.n	80031c6 <HW_IPCC_Rx_Handler+0x26>
 80031b2:	4b16      	ldr	r3, [pc, #88]	; (800320c <HW_IPCC_Rx_Handler+0x6c>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	43db      	mvns	r3, r3
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d002      	beq.n	80031c6 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 80031c0:	f000 f8da 	bl	8003378 <HW_IPCC_SYS_EvtHandler>
 80031c4:	e01f      	b.n	8003206 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 80031c6:	2101      	movs	r1, #1
 80031c8:	4810      	ldr	r0, [pc, #64]	; (800320c <HW_IPCC_Rx_Handler+0x6c>)
 80031ca:	f7ff ffd3 	bl	8003174 <LL_C2_IPCC_IsActiveFlag_CHx>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d008      	beq.n	80031e6 <HW_IPCC_Rx_Handler+0x46>
 80031d4:	4b0d      	ldr	r3, [pc, #52]	; (800320c <HW_IPCC_Rx_Handler+0x6c>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f003 0301 	and.w	r3, r3, #1
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d102      	bne.n	80031e6 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 80031e0:	f000 f88e 	bl	8003300 <HW_IPCC_BLE_EvtHandler>
 80031e4:	e00f      	b.n	8003206 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80031e6:	2108      	movs	r1, #8
 80031e8:	4808      	ldr	r0, [pc, #32]	; (800320c <HW_IPCC_Rx_Handler+0x6c>)
 80031ea:	f7ff ffc3 	bl	8003174 <LL_C2_IPCC_IsActiveFlag_CHx>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d009      	beq.n	8003208 <HW_IPCC_Rx_Handler+0x68>
 80031f4:	4b05      	ldr	r3, [pc, #20]	; (800320c <HW_IPCC_Rx_Handler+0x6c>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	43db      	mvns	r3, r3
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d002      	beq.n	8003208 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 8003202:	f000 f905 	bl	8003410 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8003206:	bf00      	nop
 8003208:	bf00      	nop
}
 800320a:	bd80      	pop	{r7, pc}
 800320c:	58000c00 	.word	0x58000c00

08003210 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8003214:	2102      	movs	r1, #2
 8003216:	481a      	ldr	r0, [pc, #104]	; (8003280 <HW_IPCC_Tx_Handler+0x70>)
 8003218:	f7ff ff97 	bl	800314a <LL_C1_IPCC_IsActiveFlag_CHx>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d109      	bne.n	8003236 <HW_IPCC_Tx_Handler+0x26>
 8003222:	4b17      	ldr	r3, [pc, #92]	; (8003280 <HW_IPCC_Tx_Handler+0x70>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	43db      	mvns	r3, r3
 8003228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d002      	beq.n	8003236 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8003230:	f000 f896 	bl	8003360 <HW_IPCC_SYS_CmdEvtHandler>
 8003234:	e020      	b.n	8003278 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8003236:	2108      	movs	r1, #8
 8003238:	4811      	ldr	r0, [pc, #68]	; (8003280 <HW_IPCC_Tx_Handler+0x70>)
 800323a:	f7ff ff86 	bl	800314a <LL_C1_IPCC_IsActiveFlag_CHx>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d109      	bne.n	8003258 <HW_IPCC_Tx_Handler+0x48>
 8003244:	4b0e      	ldr	r3, [pc, #56]	; (8003280 <HW_IPCC_Tx_Handler+0x70>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	43db      	mvns	r3, r3
 800324a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d002      	beq.n	8003258 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 8003252:	f000 f8bf 	bl	80033d4 <HW_IPCC_MM_FreeBufHandler>
 8003256:	e00f      	b.n	8003278 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8003258:	2120      	movs	r1, #32
 800325a:	4809      	ldr	r0, [pc, #36]	; (8003280 <HW_IPCC_Tx_Handler+0x70>)
 800325c:	f7ff ff75 	bl	800314a <LL_C1_IPCC_IsActiveFlag_CHx>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d109      	bne.n	800327a <HW_IPCC_Tx_Handler+0x6a>
 8003266:	4b06      	ldr	r3, [pc, #24]	; (8003280 <HW_IPCC_Tx_Handler+0x70>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	43db      	mvns	r3, r3
 800326c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d002      	beq.n	800327a <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8003274:	f000 f850 	bl	8003318 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8003278:	bf00      	nop
 800327a:	bf00      	nop
}
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	58000c00 	.word	0x58000c00

08003284 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8003288:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800328c:	f7ff fecd 	bl	800302a <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8003290:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003294:	f7ff fe8a 	bl	8002fac <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8003298:	f44f 7000 	mov.w	r0, #512	; 0x200
 800329c:	f7ff fe9a 	bl	8002fd4 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 80032a0:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 80032a2:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 80032a4:	f7ff fe72 	bl	8002f8c <LL_PWR_EnableBootC2>

  return;
 80032a8:	bf00      	nop
}
 80032aa:	bd80      	pop	{r7, pc}

080032ac <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80032b0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80032b4:	f7ff fea0 	bl	8002ff8 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80032b8:	4806      	ldr	r0, [pc, #24]	; (80032d4 <HW_IPCC_Init+0x28>)
 80032ba:	f7ff fee2 	bl	8003082 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80032be:	4805      	ldr	r0, [pc, #20]	; (80032d4 <HW_IPCC_Init+0x28>)
 80032c0:	f7ff fecf 	bl	8003062 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80032c4:	202c      	movs	r0, #44	; 0x2c
 80032c6:	f000 fb44 	bl	8003952 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80032ca:	202d      	movs	r0, #45	; 0x2d
 80032cc:	f000 fb41 	bl	8003952 <HAL_NVIC_EnableIRQ>

  return;
 80032d0:	bf00      	nop
}
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	58000c00 	.word	0x58000c00

080032d8 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80032dc:	2101      	movs	r1, #1
 80032de:	4802      	ldr	r0, [pc, #8]	; (80032e8 <HW_IPCC_BLE_Init+0x10>)
 80032e0:	f7ff ff04 	bl	80030ec <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80032e4:	bf00      	nop
}
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	58000c00 	.word	0x58000c00

080032ec <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 80032f0:	2101      	movs	r1, #1
 80032f2:	4802      	ldr	r0, [pc, #8]	; (80032fc <HW_IPCC_BLE_SendCmd+0x10>)
 80032f4:	f7ff ff1a 	bl	800312c <LL_C1_IPCC_SetFlag_CHx>

  return;
 80032f8:	bf00      	nop
}
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	58000c00 	.word	0x58000c00

08003300 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8003300:	b580      	push	{r7, lr}
 8003302:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8003304:	f006 ff8a 	bl	800a21c <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8003308:	2101      	movs	r1, #1
 800330a:	4802      	ldr	r0, [pc, #8]	; (8003314 <HW_IPCC_BLE_EvtHandler+0x14>)
 800330c:	f7ff ff00 	bl	8003110 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8003310:	bf00      	nop
}
 8003312:	bd80      	pop	{r7, pc}
 8003314:	58000c00 	.word	0x58000c00

08003318 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800331c:	2120      	movs	r1, #32
 800331e:	4803      	ldr	r0, [pc, #12]	; (800332c <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8003320:	f7ff fed2 	bl	80030c8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8003324:	f006 ffaa 	bl	800a27c <HW_IPCC_BLE_AclDataAckNot>

  return;
 8003328:	bf00      	nop
}
 800332a:	bd80      	pop	{r7, pc}
 800332c:	58000c00 	.word	0x58000c00

08003330 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8003334:	2102      	movs	r1, #2
 8003336:	4802      	ldr	r0, [pc, #8]	; (8003340 <HW_IPCC_SYS_Init+0x10>)
 8003338:	f7ff fed8 	bl	80030ec <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800333c:	bf00      	nop
}
 800333e:	bd80      	pop	{r7, pc}
 8003340:	58000c00 	.word	0x58000c00

08003344 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8003348:	2102      	movs	r1, #2
 800334a:	4804      	ldr	r0, [pc, #16]	; (800335c <HW_IPCC_SYS_SendCmd+0x18>)
 800334c:	f7ff feee 	bl	800312c <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8003350:	2102      	movs	r1, #2
 8003352:	4802      	ldr	r0, [pc, #8]	; (800335c <HW_IPCC_SYS_SendCmd+0x18>)
 8003354:	f7ff fea5 	bl	80030a2 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8003358:	bf00      	nop
}
 800335a:	bd80      	pop	{r7, pc}
 800335c:	58000c00 	.word	0x58000c00

08003360 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8003360:	b580      	push	{r7, lr}
 8003362:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8003364:	2102      	movs	r1, #2
 8003366:	4803      	ldr	r0, [pc, #12]	; (8003374 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8003368:	f7ff feae 	bl	80030c8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800336c:	f006 ffd6 	bl	800a31c <HW_IPCC_SYS_CmdEvtNot>

  return;
 8003370:	bf00      	nop
}
 8003372:	bd80      	pop	{r7, pc}
 8003374:	58000c00 	.word	0x58000c00

08003378 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800337c:	f006 ffe4 	bl	800a348 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8003380:	2102      	movs	r1, #2
 8003382:	4802      	ldr	r0, [pc, #8]	; (800338c <HW_IPCC_SYS_EvtHandler+0x14>)
 8003384:	f7ff fec4 	bl	8003110 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8003388:	bf00      	nop
}
 800338a:	bd80      	pop	{r7, pc}
 800338c:	58000c00 	.word	0x58000c00

08003390 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8003398:	2108      	movs	r1, #8
 800339a:	480c      	ldr	r0, [pc, #48]	; (80033cc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800339c:	f7ff fed5 	bl	800314a <LL_C1_IPCC_IsActiveFlag_CHx>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d007      	beq.n	80033b6 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 80033a6:	4a0a      	ldr	r2, [pc, #40]	; (80033d0 <HW_IPCC_MM_SendFreeBuf+0x40>)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80033ac:	2108      	movs	r1, #8
 80033ae:	4807      	ldr	r0, [pc, #28]	; (80033cc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80033b0:	f7ff fe77 	bl	80030a2 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 80033b4:	e006      	b.n	80033c4 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80033ba:	2108      	movs	r1, #8
 80033bc:	4803      	ldr	r0, [pc, #12]	; (80033cc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80033be:	f7ff feb5 	bl	800312c <LL_C1_IPCC_SetFlag_CHx>
  return;
 80033c2:	bf00      	nop
}
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	58000c00 	.word	0x58000c00
 80033d0:	20000698 	.word	0x20000698

080033d4 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80033d8:	2108      	movs	r1, #8
 80033da:	4806      	ldr	r0, [pc, #24]	; (80033f4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80033dc:	f7ff fe74 	bl	80030c8 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80033e0:	4b05      	ldr	r3, [pc, #20]	; (80033f8 <HW_IPCC_MM_FreeBufHandler+0x24>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80033e6:	2108      	movs	r1, #8
 80033e8:	4802      	ldr	r0, [pc, #8]	; (80033f4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80033ea:	f7ff fe9f 	bl	800312c <LL_C1_IPCC_SetFlag_CHx>

  return;
 80033ee:	bf00      	nop
}
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	58000c00 	.word	0x58000c00
 80033f8:	20000698 	.word	0x20000698

080033fc <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8003400:	2108      	movs	r1, #8
 8003402:	4802      	ldr	r0, [pc, #8]	; (800340c <HW_IPCC_TRACES_Init+0x10>)
 8003404:	f7ff fe72 	bl	80030ec <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8003408:	bf00      	nop
}
 800340a:	bd80      	pop	{r7, pc}
 800340c:	58000c00 	.word	0x58000c00

08003410 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8003414:	f007 f840 	bl	800a498 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8003418:	2108      	movs	r1, #8
 800341a:	4802      	ldr	r0, [pc, #8]	; (8003424 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800341c:	f7ff fe78 	bl	8003110 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8003420:	bf00      	nop
}
 8003422:	bd80      	pop	{r7, pc}
 8003424:	58000c00 	.word	0x58000c00

08003428 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8003428:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800342a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800342c:	3304      	adds	r3, #4

0800342e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800342e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003430:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8003432:	d3f9      	bcc.n	8003428 <CopyDataInit>
  bx lr
 8003434:	4770      	bx	lr

08003436 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8003436:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8003438:	3004      	adds	r0, #4

0800343a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800343a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800343c:	d3fb      	bcc.n	8003436 <FillZerobss>
  bx lr
 800343e:	4770      	bx	lr

08003440 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003440:	480c      	ldr	r0, [pc, #48]	; (8003474 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8003442:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003444:	f000 f828 	bl	8003498 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8003448:	480b      	ldr	r0, [pc, #44]	; (8003478 <LoopForever+0x8>)
 800344a:	490c      	ldr	r1, [pc, #48]	; (800347c <LoopForever+0xc>)
 800344c:	4a0c      	ldr	r2, [pc, #48]	; (8003480 <LoopForever+0x10>)
 800344e:	2300      	movs	r3, #0
 8003450:	f7ff ffed 	bl	800342e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003454:	480b      	ldr	r0, [pc, #44]	; (8003484 <LoopForever+0x14>)
 8003456:	490c      	ldr	r1, [pc, #48]	; (8003488 <LoopForever+0x18>)
 8003458:	2300      	movs	r3, #0
 800345a:	f7ff ffee 	bl	800343a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800345e:	480b      	ldr	r0, [pc, #44]	; (800348c <LoopForever+0x1c>)
 8003460:	490b      	ldr	r1, [pc, #44]	; (8003490 <LoopForever+0x20>)
 8003462:	2300      	movs	r3, #0
 8003464:	f7ff ffe9 	bl	800343a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003468:	f007 fb06 	bl	800aa78 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 800346c:	f7fe fc2a 	bl	8001cc4 <main>

08003470 <LoopForever>:

LoopForever:
  b LoopForever
 8003470:	e7fe      	b.n	8003470 <LoopForever>
 8003472:	0000      	.short	0x0000
  ldr   r0, =_estack
 8003474:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8003478:	20000008 	.word	0x20000008
 800347c:	20000098 	.word	0x20000098
 8003480:	0800c368 	.word	0x0800c368
  INIT_BSS _sbss, _ebss
 8003484:	20000210 	.word	0x20000210
 8003488:	200017e4 	.word	0x200017e4
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800348c:	200301e0 	.word	0x200301e0
 8003490:	20030a57 	.word	0x20030a57

08003494 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003494:	e7fe      	b.n	8003494 <ADC1_IRQHandler>
	...

08003498 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003498:	b480      	push	{r7}
 800349a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 800349c:	4b26      	ldr	r3, [pc, #152]	; (8003538 <SystemInit+0xa0>)
 800349e:	2200      	movs	r2, #0
 80034a0:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80034a2:	4b25      	ldr	r3, [pc, #148]	; (8003538 <SystemInit+0xa0>)
 80034a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a8:	4a23      	ldr	r2, [pc, #140]	; (8003538 <SystemInit+0xa0>)
 80034aa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034ae:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80034b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034bc:	f043 0301 	orr.w	r3, r3, #1
 80034c0:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80034c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034c6:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80034ca:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80034cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034d6:	4b19      	ldr	r3, [pc, #100]	; (800353c <SystemInit+0xa4>)
 80034d8:	4013      	ands	r3, r2
 80034da:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80034dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034e8:	f023 0305 	bic.w	r3, r3, #5
 80034ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80034f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034fc:	f023 0301 	bic.w	r3, r3, #1
 8003500:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8003504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003508:	4a0d      	ldr	r2, [pc, #52]	; (8003540 <SystemInit+0xa8>)
 800350a:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800350c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003510:	4a0b      	ldr	r2, [pc, #44]	; (8003540 <SystemInit+0xa8>)
 8003512:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003514:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800351e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003522:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003528:	2200      	movs	r2, #0
 800352a:	619a      	str	r2, [r3, #24]
}
 800352c:	bf00      	nop
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	e000ed00 	.word	0xe000ed00
 800353c:	faf6fefb 	.word	0xfaf6fefb
 8003540:	22041000 	.word	0x22041000

08003544 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003548:	4b05      	ldr	r3, [pc, #20]	; (8003560 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	4a04      	ldr	r2, [pc, #16]	; (8003560 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800354e:	f043 0301 	orr.w	r3, r3, #1
 8003552:	6053      	str	r3, [r2, #4]
}
 8003554:	bf00      	nop
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	e0042000 	.word	0xe0042000

08003564 <LL_DBGMCU_EnableDBGStopMode>:
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003568:	4b05      	ldr	r3, [pc, #20]	; (8003580 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	4a04      	ldr	r2, [pc, #16]	; (8003580 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 800356e:	f043 0302 	orr.w	r3, r3, #2
 8003572:	6053      	str	r3, [r2, #4]
}
 8003574:	bf00      	nop
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	e0042000 	.word	0xe0042000

08003584 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800358a:	2300      	movs	r3, #0
 800358c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800358e:	4b0c      	ldr	r3, [pc, #48]	; (80035c0 <HAL_Init+0x3c>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a0b      	ldr	r2, [pc, #44]	; (80035c0 <HAL_Init+0x3c>)
 8003594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003598:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800359a:	2003      	movs	r0, #3
 800359c:	f000 f9b4 	bl	8003908 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80035a0:	2000      	movs	r0, #0
 80035a2:	f000 f80f 	bl	80035c4 <HAL_InitTick>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d002      	beq.n	80035b2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	71fb      	strb	r3, [r7, #7]
 80035b0:	e001      	b.n	80035b6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80035b2:	f7fe fd94 	bl	80020de <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80035b6:	79fb      	ldrb	r3, [r7, #7]
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3708      	adds	r7, #8
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	58004000 	.word	0x58004000

080035c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80035cc:	2300      	movs	r3, #0
 80035ce:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80035d0:	4b17      	ldr	r3, [pc, #92]	; (8003630 <HAL_InitTick+0x6c>)
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d024      	beq.n	8003622 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 80035d8:	f002 f872 	bl	80056c0 <HAL_RCC_GetHCLKFreq>
 80035dc:	4602      	mov	r2, r0
 80035de:	4b14      	ldr	r3, [pc, #80]	; (8003630 <HAL_InitTick+0x6c>)
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	4619      	mov	r1, r3
 80035e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035e8:	fbb3 f3f1 	udiv	r3, r3, r1
 80035ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f0:	4618      	mov	r0, r3
 80035f2:	f000 f9ca 	bl	800398a <HAL_SYSTICK_Config>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d10f      	bne.n	800361c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b0f      	cmp	r3, #15
 8003600:	d809      	bhi.n	8003616 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003602:	2200      	movs	r2, #0
 8003604:	6879      	ldr	r1, [r7, #4]
 8003606:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800360a:	f000 f988 	bl	800391e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800360e:	4a09      	ldr	r2, [pc, #36]	; (8003634 <HAL_InitTick+0x70>)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6013      	str	r3, [r2, #0]
 8003614:	e007      	b.n	8003626 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	73fb      	strb	r3, [r7, #15]
 800361a:	e004      	b.n	8003626 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	73fb      	strb	r3, [r7, #15]
 8003620:	e001      	b.n	8003626 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003626:	7bfb      	ldrb	r3, [r7, #15]
}
 8003628:	4618      	mov	r0, r3
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	20000028 	.word	0x20000028
 8003634:	20000024 	.word	0x20000024

08003638 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800363c:	4b06      	ldr	r3, [pc, #24]	; (8003658 <HAL_IncTick+0x20>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	461a      	mov	r2, r3
 8003642:	4b06      	ldr	r3, [pc, #24]	; (800365c <HAL_IncTick+0x24>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4413      	add	r3, r2
 8003648:	4a04      	ldr	r2, [pc, #16]	; (800365c <HAL_IncTick+0x24>)
 800364a:	6013      	str	r3, [r2, #0]
}
 800364c:	bf00      	nop
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	20000028 	.word	0x20000028
 800365c:	2000069c 	.word	0x2000069c

08003660 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
  return uwTick;
 8003664:	4b03      	ldr	r3, [pc, #12]	; (8003674 <HAL_GetTick+0x14>)
 8003666:	681b      	ldr	r3, [r3, #0]
}
 8003668:	4618      	mov	r0, r3
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	2000069c 	.word	0x2000069c

08003678 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800367c:	4b03      	ldr	r3, [pc, #12]	; (800368c <HAL_GetTickPrio+0x14>)
 800367e:	681b      	ldr	r3, [r3, #0]
}
 8003680:	4618      	mov	r0, r3
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	20000024 	.word	0x20000024

08003690 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8003694:	f7ff ff56 	bl	8003544 <LL_DBGMCU_EnableDBGSleepMode>
}
 8003698:	bf00      	nop
 800369a:	bd80      	pop	{r7, pc}

0800369c <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 80036a0:	f7ff ff60 	bl	8003564 <LL_DBGMCU_EnableDBGStopMode>
}
 80036a4:	bf00      	nop
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f003 0307 	and.w	r3, r3, #7
 80036b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036b8:	4b0c      	ldr	r3, [pc, #48]	; (80036ec <__NVIC_SetPriorityGrouping+0x44>)
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036c4:	4013      	ands	r3, r2
 80036c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036da:	4a04      	ldr	r2, [pc, #16]	; (80036ec <__NVIC_SetPriorityGrouping+0x44>)
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	60d3      	str	r3, [r2, #12]
}
 80036e0:	bf00      	nop
 80036e2:	3714      	adds	r7, #20
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr
 80036ec:	e000ed00 	.word	0xe000ed00

080036f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036f4:	4b04      	ldr	r3, [pc, #16]	; (8003708 <__NVIC_GetPriorityGrouping+0x18>)
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	0a1b      	lsrs	r3, r3, #8
 80036fa:	f003 0307 	and.w	r3, r3, #7
}
 80036fe:	4618      	mov	r0, r3
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr
 8003708:	e000ed00 	.word	0xe000ed00

0800370c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	4603      	mov	r3, r0
 8003714:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800371a:	2b00      	cmp	r3, #0
 800371c:	db0b      	blt.n	8003736 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800371e:	79fb      	ldrb	r3, [r7, #7]
 8003720:	f003 021f 	and.w	r2, r3, #31
 8003724:	4907      	ldr	r1, [pc, #28]	; (8003744 <__NVIC_EnableIRQ+0x38>)
 8003726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800372a:	095b      	lsrs	r3, r3, #5
 800372c:	2001      	movs	r0, #1
 800372e:	fa00 f202 	lsl.w	r2, r0, r2
 8003732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003736:	bf00      	nop
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	e000e100 	.word	0xe000e100

08003748 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	4603      	mov	r3, r0
 8003750:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003756:	2b00      	cmp	r3, #0
 8003758:	db12      	blt.n	8003780 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800375a:	79fb      	ldrb	r3, [r7, #7]
 800375c:	f003 021f 	and.w	r2, r3, #31
 8003760:	490a      	ldr	r1, [pc, #40]	; (800378c <__NVIC_DisableIRQ+0x44>)
 8003762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003766:	095b      	lsrs	r3, r3, #5
 8003768:	2001      	movs	r0, #1
 800376a:	fa00 f202 	lsl.w	r2, r0, r2
 800376e:	3320      	adds	r3, #32
 8003770:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003774:	f3bf 8f4f 	dsb	sy
}
 8003778:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800377a:	f3bf 8f6f 	isb	sy
}
 800377e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr
 800378c:	e000e100 	.word	0xe000e100

08003790 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	4603      	mov	r3, r0
 8003798:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800379a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	db0c      	blt.n	80037bc <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037a2:	79fb      	ldrb	r3, [r7, #7]
 80037a4:	f003 021f 	and.w	r2, r3, #31
 80037a8:	4907      	ldr	r1, [pc, #28]	; (80037c8 <__NVIC_SetPendingIRQ+0x38>)
 80037aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ae:	095b      	lsrs	r3, r3, #5
 80037b0:	2001      	movs	r0, #1
 80037b2:	fa00 f202 	lsl.w	r2, r0, r2
 80037b6:	3340      	adds	r3, #64	; 0x40
 80037b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr
 80037c8:	e000e100 	.word	0xe000e100

080037cc <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	4603      	mov	r3, r0
 80037d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	db0c      	blt.n	80037f8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037de:	79fb      	ldrb	r3, [r7, #7]
 80037e0:	f003 021f 	and.w	r2, r3, #31
 80037e4:	4907      	ldr	r1, [pc, #28]	; (8003804 <__NVIC_ClearPendingIRQ+0x38>)
 80037e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ea:	095b      	lsrs	r3, r3, #5
 80037ec:	2001      	movs	r0, #1
 80037ee:	fa00 f202 	lsl.w	r2, r0, r2
 80037f2:	3360      	adds	r3, #96	; 0x60
 80037f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	e000e100 	.word	0xe000e100

08003808 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	4603      	mov	r3, r0
 8003810:	6039      	str	r1, [r7, #0]
 8003812:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003818:	2b00      	cmp	r3, #0
 800381a:	db0a      	blt.n	8003832 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	b2da      	uxtb	r2, r3
 8003820:	490c      	ldr	r1, [pc, #48]	; (8003854 <__NVIC_SetPriority+0x4c>)
 8003822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003826:	0112      	lsls	r2, r2, #4
 8003828:	b2d2      	uxtb	r2, r2
 800382a:	440b      	add	r3, r1
 800382c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003830:	e00a      	b.n	8003848 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	b2da      	uxtb	r2, r3
 8003836:	4908      	ldr	r1, [pc, #32]	; (8003858 <__NVIC_SetPriority+0x50>)
 8003838:	79fb      	ldrb	r3, [r7, #7]
 800383a:	f003 030f 	and.w	r3, r3, #15
 800383e:	3b04      	subs	r3, #4
 8003840:	0112      	lsls	r2, r2, #4
 8003842:	b2d2      	uxtb	r2, r2
 8003844:	440b      	add	r3, r1
 8003846:	761a      	strb	r2, [r3, #24]
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr
 8003854:	e000e100 	.word	0xe000e100
 8003858:	e000ed00 	.word	0xe000ed00

0800385c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800385c:	b480      	push	{r7}
 800385e:	b089      	sub	sp, #36	; 0x24
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f003 0307 	and.w	r3, r3, #7
 800386e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	f1c3 0307 	rsb	r3, r3, #7
 8003876:	2b04      	cmp	r3, #4
 8003878:	bf28      	it	cs
 800387a:	2304      	movcs	r3, #4
 800387c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	3304      	adds	r3, #4
 8003882:	2b06      	cmp	r3, #6
 8003884:	d902      	bls.n	800388c <NVIC_EncodePriority+0x30>
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	3b03      	subs	r3, #3
 800388a:	e000      	b.n	800388e <NVIC_EncodePriority+0x32>
 800388c:	2300      	movs	r3, #0
 800388e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003890:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	fa02 f303 	lsl.w	r3, r2, r3
 800389a:	43da      	mvns	r2, r3
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	401a      	ands	r2, r3
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	fa01 f303 	lsl.w	r3, r1, r3
 80038ae:	43d9      	mvns	r1, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038b4:	4313      	orrs	r3, r2
         );
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3724      	adds	r7, #36	; 0x24
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
	...

080038c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	3b01      	subs	r3, #1
 80038d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038d4:	d301      	bcc.n	80038da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038d6:	2301      	movs	r3, #1
 80038d8:	e00f      	b.n	80038fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038da:	4a0a      	ldr	r2, [pc, #40]	; (8003904 <SysTick_Config+0x40>)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	3b01      	subs	r3, #1
 80038e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038e2:	210f      	movs	r1, #15
 80038e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038e8:	f7ff ff8e 	bl	8003808 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038ec:	4b05      	ldr	r3, [pc, #20]	; (8003904 <SysTick_Config+0x40>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038f2:	4b04      	ldr	r3, [pc, #16]	; (8003904 <SysTick_Config+0x40>)
 80038f4:	2207      	movs	r2, #7
 80038f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	e000e010 	.word	0xe000e010

08003908 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f7ff fec9 	bl	80036a8 <__NVIC_SetPriorityGrouping>
}
 8003916:	bf00      	nop
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b086      	sub	sp, #24
 8003922:	af00      	add	r7, sp, #0
 8003924:	4603      	mov	r3, r0
 8003926:	60b9      	str	r1, [r7, #8]
 8003928:	607a      	str	r2, [r7, #4]
 800392a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800392c:	f7ff fee0 	bl	80036f0 <__NVIC_GetPriorityGrouping>
 8003930:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	68b9      	ldr	r1, [r7, #8]
 8003936:	6978      	ldr	r0, [r7, #20]
 8003938:	f7ff ff90 	bl	800385c <NVIC_EncodePriority>
 800393c:	4602      	mov	r2, r0
 800393e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003942:	4611      	mov	r1, r2
 8003944:	4618      	mov	r0, r3
 8003946:	f7ff ff5f 	bl	8003808 <__NVIC_SetPriority>
}
 800394a:	bf00      	nop
 800394c:	3718      	adds	r7, #24
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b082      	sub	sp, #8
 8003956:	af00      	add	r7, sp, #0
 8003958:	4603      	mov	r3, r0
 800395a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800395c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003960:	4618      	mov	r0, r3
 8003962:	f7ff fed3 	bl	800370c <__NVIC_EnableIRQ>
}
 8003966:	bf00      	nop
 8003968:	3708      	adds	r7, #8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b082      	sub	sp, #8
 8003972:	af00      	add	r7, sp, #0
 8003974:	4603      	mov	r3, r0
 8003976:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397c:	4618      	mov	r0, r3
 800397e:	f7ff fee3 	bl	8003748 <__NVIC_DisableIRQ>
}
 8003982:	bf00      	nop
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800398a:	b580      	push	{r7, lr}
 800398c:	b082      	sub	sp, #8
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7ff ff96 	bl	80038c4 <SysTick_Config>
 8003998:	4603      	mov	r3, r0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3708      	adds	r7, #8
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80039a2:	b580      	push	{r7, lr}
 80039a4:	b082      	sub	sp, #8
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	4603      	mov	r3, r0
 80039aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80039ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7ff feed 	bl	8003790 <__NVIC_SetPendingIRQ>
}
 80039b6:	bf00      	nop
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b082      	sub	sp, #8
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	4603      	mov	r3, r0
 80039c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80039c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7ff fefd 	bl	80037cc <__NVIC_ClearPendingIRQ>
}
 80039d2:	bf00      	nop
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
	...

080039dc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e08e      	b.n	8003b0c <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	461a      	mov	r2, r3
 80039f4:	4b47      	ldr	r3, [pc, #284]	; (8003b14 <HAL_DMA_Init+0x138>)
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d80f      	bhi.n	8003a1a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	461a      	mov	r2, r3
 8003a00:	4b45      	ldr	r3, [pc, #276]	; (8003b18 <HAL_DMA_Init+0x13c>)
 8003a02:	4413      	add	r3, r2
 8003a04:	4a45      	ldr	r2, [pc, #276]	; (8003b1c <HAL_DMA_Init+0x140>)
 8003a06:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0a:	091b      	lsrs	r3, r3, #4
 8003a0c:	009a      	lsls	r2, r3, #2
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a42      	ldr	r2, [pc, #264]	; (8003b20 <HAL_DMA_Init+0x144>)
 8003a16:	641a      	str	r2, [r3, #64]	; 0x40
 8003a18:	e00e      	b.n	8003a38 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	461a      	mov	r2, r3
 8003a20:	4b40      	ldr	r3, [pc, #256]	; (8003b24 <HAL_DMA_Init+0x148>)
 8003a22:	4413      	add	r3, r2
 8003a24:	4a3d      	ldr	r2, [pc, #244]	; (8003b1c <HAL_DMA_Init+0x140>)
 8003a26:	fba2 2303 	umull	r2, r3, r2, r3
 8003a2a:	091b      	lsrs	r3, r3, #4
 8003a2c:	009a      	lsls	r2, r3, #2
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a3c      	ldr	r2, [pc, #240]	; (8003b28 <HAL_DMA_Init+0x14c>)
 8003a36:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a52:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003a5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 fa74 	bl	8003f78 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a98:	d102      	bne.n	8003aa0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685a      	ldr	r2, [r3, #4]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aa8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003aac:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ab6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d010      	beq.n	8003ae2 <HAL_DMA_Init+0x106>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	2b04      	cmp	r3, #4
 8003ac6:	d80c      	bhi.n	8003ae2 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 fa93 	bl	8003ff4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ade:	605a      	str	r2, [r3, #4]
 8003ae0:	e008      	b.n	8003af4 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2201      	movs	r2, #1
 8003afe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	40020407 	.word	0x40020407
 8003b18:	bffdfff8 	.word	0xbffdfff8
 8003b1c:	cccccccd 	.word	0xcccccccd
 8003b20:	40020000 	.word	0x40020000
 8003b24:	bffdfbf8 	.word	0xbffdfbf8
 8003b28:	40020400 	.word	0x40020400

08003b2c <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b086      	sub	sp, #24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
 8003b38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d101      	bne.n	8003b4c <HAL_DMA_Start_IT+0x20>
 8003b48:	2302      	movs	r3, #2
 8003b4a:	e066      	b.n	8003c1a <HAL_DMA_Start_IT+0xee>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d155      	bne.n	8003c0c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2202      	movs	r2, #2
 8003b64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f022 0201 	bic.w	r2, r2, #1
 8003b7c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	68b9      	ldr	r1, [r7, #8]
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f000 f9b9 	bl	8003efc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d008      	beq.n	8003ba4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f042 020e 	orr.w	r2, r2, #14
 8003ba0:	601a      	str	r2, [r3, #0]
 8003ba2:	e00f      	b.n	8003bc4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f022 0204 	bic.w	r2, r2, #4
 8003bb2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f042 020a 	orr.w	r2, r2, #10
 8003bc2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d007      	beq.n	8003be2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003be0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d007      	beq.n	8003bfa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bf8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f042 0201 	orr.w	r2, r2, #1
 8003c08:	601a      	str	r2, [r3, #0]
 8003c0a:	e005      	b.n	8003c18 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003c14:	2302      	movs	r3, #2
 8003c16:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003c18:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3718      	adds	r7, #24
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c22:	b480      	push	{r7}
 8003c24:	b083      	sub	sp, #12
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d101      	bne.n	8003c34 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e04f      	b.n	8003cd4 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d008      	beq.n	8003c52 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2204      	movs	r2, #4
 8003c44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e040      	b.n	8003cd4 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 020e 	bic.w	r2, r2, #14
 8003c60:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c70:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 0201 	bic.w	r2, r2, #1
 8003c80:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c86:	f003 021c 	and.w	r2, r3, #28
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8e:	2101      	movs	r1, #1
 8003c90:	fa01 f202 	lsl.w	r2, r1, r2
 8003c94:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003c9e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00c      	beq.n	8003cc2 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cb6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003cc0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8003cd2:	2300      	movs	r3, #0
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d005      	beq.n	8003d04 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2204      	movs	r2, #4
 8003cfc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	73fb      	strb	r3, [r7, #15]
 8003d02:	e047      	b.n	8003d94 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 020e 	bic.w	r2, r2, #14
 8003d12:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f022 0201 	bic.w	r2, r2, #1
 8003d22:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d38:	f003 021c 	and.w	r2, r3, #28
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d40:	2101      	movs	r1, #1
 8003d42:	fa01 f202 	lsl.w	r2, r1, r2
 8003d46:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003d50:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00c      	beq.n	8003d74 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d68:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003d72:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d003      	beq.n	8003d94 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	4798      	blx	r3
    }
  }
  return status;
 8003d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3710      	adds	r7, #16
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}

08003d9e <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b084      	sub	sp, #16
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dba:	f003 031c 	and.w	r3, r3, #28
 8003dbe:	2204      	movs	r2, #4
 8003dc0:	409a      	lsls	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d026      	beq.n	8003e18 <HAL_DMA_IRQHandler+0x7a>
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	f003 0304 	and.w	r3, r3, #4
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d021      	beq.n	8003e18 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0320 	and.w	r3, r3, #32
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d107      	bne.n	8003df2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 0204 	bic.w	r2, r2, #4
 8003df0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df6:	f003 021c 	and.w	r2, r3, #28
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfe:	2104      	movs	r1, #4
 8003e00:	fa01 f202 	lsl.w	r2, r1, r2
 8003e04:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d071      	beq.n	8003ef2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003e16:	e06c      	b.n	8003ef2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1c:	f003 031c 	and.w	r3, r3, #28
 8003e20:	2202      	movs	r2, #2
 8003e22:	409a      	lsls	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	4013      	ands	r3, r2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d02e      	beq.n	8003e8a <HAL_DMA_IRQHandler+0xec>
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d029      	beq.n	8003e8a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0320 	and.w	r3, r3, #32
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d10b      	bne.n	8003e5c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f022 020a 	bic.w	r2, r2, #10
 8003e52:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e60:	f003 021c 	and.w	r2, r3, #28
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e68:	2102      	movs	r1, #2
 8003e6a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e6e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d038      	beq.n	8003ef2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003e88:	e033      	b.n	8003ef2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8e:	f003 031c 	and.w	r3, r3, #28
 8003e92:	2208      	movs	r2, #8
 8003e94:	409a      	lsls	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d02a      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0x156>
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	f003 0308 	and.w	r3, r3, #8
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d025      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f022 020e 	bic.w	r2, r2, #14
 8003eb6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ebc:	f003 021c 	and.w	r2, r3, #28
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec4:	2101      	movs	r1, #1
 8003ec6:	fa01 f202 	lsl.w	r2, r1, r2
 8003eca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d004      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003ef2:	bf00      	nop
 8003ef4:	bf00      	nop
}
 8003ef6:	3710      	adds	r7, #16
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
 8003f08:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003f12:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d004      	beq.n	8003f26 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003f24:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f2a:	f003 021c 	and.w	r2, r3, #28
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	2101      	movs	r1, #1
 8003f34:	fa01 f202 	lsl.w	r2, r1, r2
 8003f38:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	683a      	ldr	r2, [r7, #0]
 8003f40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	2b10      	cmp	r3, #16
 8003f48:	d108      	bne.n	8003f5c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68ba      	ldr	r2, [r7, #8]
 8003f58:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003f5a:	e007      	b.n	8003f6c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68ba      	ldr	r2, [r7, #8]
 8003f62:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	60da      	str	r2, [r3, #12]
}
 8003f6c:	bf00      	nop
 8003f6e:	3714      	adds	r7, #20
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	461a      	mov	r2, r3
 8003f86:	4b17      	ldr	r3, [pc, #92]	; (8003fe4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d80a      	bhi.n	8003fa2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f90:	089b      	lsrs	r3, r3, #2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003f98:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	6493      	str	r3, [r2, #72]	; 0x48
 8003fa0:	e007      	b.n	8003fb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa6:	089b      	lsrs	r3, r3, #2
 8003fa8:	009a      	lsls	r2, r3, #2
 8003faa:	4b0f      	ldr	r3, [pc, #60]	; (8003fe8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003fac:	4413      	add	r3, r2
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	3b08      	subs	r3, #8
 8003fba:	4a0c      	ldr	r2, [pc, #48]	; (8003fec <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc0:	091b      	lsrs	r3, r3, #4
 8003fc2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a0a      	ldr	r2, [pc, #40]	; (8003ff0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003fc8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f003 031f 	and.w	r3, r3, #31
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	409a      	lsls	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003fd8:	bf00      	nop
 8003fda:	3714      	adds	r7, #20
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr
 8003fe4:	40020407 	.word	0x40020407
 8003fe8:	4002081c 	.word	0x4002081c
 8003fec:	cccccccd 	.word	0xcccccccd
 8003ff0:	40020880 	.word	0x40020880

08003ff4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004004:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	4b0b      	ldr	r3, [pc, #44]	; (8004038 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800400a:	4413      	add	r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	461a      	mov	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a09      	ldr	r2, [pc, #36]	; (800403c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8004018:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	3b01      	subs	r3, #1
 800401e:	f003 0303 	and.w	r3, r3, #3
 8004022:	2201      	movs	r2, #1
 8004024:	409a      	lsls	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800402a:	bf00      	nop
 800402c:	3714      	adds	r7, #20
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	1000823f 	.word	0x1000823f
 800403c:	40020940 	.word	0x40020940

08004040 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA channel.
  * @param  pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004050:	b2db      	uxtb	r3, r3
 8004052:	2b01      	cmp	r3, #1
 8004054:	d12b      	bne.n	80040ae <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800405c:	2b01      	cmp	r3, #1
 800405e:	d101      	bne.n	8004064 <HAL_DMAEx_ConfigMuxSync+0x24>
 8004060:	2302      	movs	r3, #2
 8004062:	e025      	b.n	80040b0 <HAL_DMAEx_ConfigMuxSync+0x70>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	4b12      	ldr	r3, [pc, #72]	; (80040bc <HAL_DMAEx_ConfigMuxSync+0x7c>)
 8004074:	4013      	ands	r3, r2
 8004076:	683a      	ldr	r2, [r7, #0]
 8004078:	6811      	ldr	r1, [r2, #0]
 800407a:	683a      	ldr	r2, [r7, #0]
 800407c:	68d2      	ldr	r2, [r2, #12]
 800407e:	3a01      	subs	r2, #1
 8004080:	04d2      	lsls	r2, r2, #19
 8004082:	4311      	orrs	r1, r2
 8004084:	683a      	ldr	r2, [r7, #0]
 8004086:	6852      	ldr	r2, [r2, #4]
 8004088:	4311      	orrs	r1, r2
 800408a:	683a      	ldr	r2, [r7, #0]
 800408c:	7a12      	ldrb	r2, [r2, #8]
 800408e:	0412      	lsls	r2, r2, #16
 8004090:	4311      	orrs	r1, r2
 8004092:	683a      	ldr	r2, [r7, #0]
 8004094:	7a52      	ldrb	r2, [r2, #9]
 8004096:	0252      	lsls	r2, r2, #9
 8004098:	4311      	orrs	r1, r2
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800409e:	430b      	orrs	r3, r1
 80040a0:	6013      	str	r3, [r2, #0]
                pSyncConfig->SyncPolarity                                       | \
                ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)                 | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 80040aa:	2300      	movs	r3, #0
 80040ac:	e000      	b.n	80040b0 <HAL_DMAEx_ConfigMuxSync+0x70>
  }
  else
  {
    /*DMA State not Ready*/
    return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
  }
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr
 80040bc:	e000fdff 	.word	0xe000fdff

080040c0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b087      	sub	sp, #28
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80040ca:	2300      	movs	r3, #0
 80040cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040ce:	e14c      	b.n	800436a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	2101      	movs	r1, #1
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	fa01 f303 	lsl.w	r3, r1, r3
 80040dc:	4013      	ands	r3, r2
 80040de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	f000 813e 	beq.w	8004364 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f003 0303 	and.w	r3, r3, #3
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d005      	beq.n	8004100 <HAL_GPIO_Init+0x40>
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f003 0303 	and.w	r3, r3, #3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d130      	bne.n	8004162 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	2203      	movs	r2, #3
 800410c:	fa02 f303 	lsl.w	r3, r2, r3
 8004110:	43db      	mvns	r3, r3
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	4013      	ands	r3, r2
 8004116:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	68da      	ldr	r2, [r3, #12]
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	005b      	lsls	r3, r3, #1
 8004120:	fa02 f303 	lsl.w	r3, r2, r3
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	4313      	orrs	r3, r2
 8004128:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004136:	2201      	movs	r2, #1
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	fa02 f303 	lsl.w	r3, r2, r3
 800413e:	43db      	mvns	r3, r3
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	4013      	ands	r3, r2
 8004144:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	091b      	lsrs	r3, r3, #4
 800414c:	f003 0201 	and.w	r2, r3, #1
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	fa02 f303 	lsl.w	r3, r2, r3
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	4313      	orrs	r3, r2
 800415a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	693a      	ldr	r2, [r7, #16]
 8004160:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f003 0303 	and.w	r3, r3, #3
 800416a:	2b03      	cmp	r3, #3
 800416c:	d017      	beq.n	800419e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	005b      	lsls	r3, r3, #1
 8004178:	2203      	movs	r2, #3
 800417a:	fa02 f303 	lsl.w	r3, r2, r3
 800417e:	43db      	mvns	r3, r3
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	4013      	ands	r3, r2
 8004184:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	689a      	ldr	r2, [r3, #8]
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	fa02 f303 	lsl.w	r3, r2, r3
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	4313      	orrs	r3, r2
 8004196:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f003 0303 	and.w	r3, r3, #3
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d123      	bne.n	80041f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	08da      	lsrs	r2, r3, #3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	3208      	adds	r2, #8
 80041b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	f003 0307 	and.w	r3, r3, #7
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	220f      	movs	r2, #15
 80041c2:	fa02 f303 	lsl.w	r3, r2, r3
 80041c6:	43db      	mvns	r3, r3
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	4013      	ands	r3, r2
 80041cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	691a      	ldr	r2, [r3, #16]
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f003 0307 	and.w	r3, r3, #7
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	fa02 f303 	lsl.w	r3, r2, r3
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	08da      	lsrs	r2, r3, #3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	3208      	adds	r2, #8
 80041ec:	6939      	ldr	r1, [r7, #16]
 80041ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	005b      	lsls	r3, r3, #1
 80041fc:	2203      	movs	r2, #3
 80041fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004202:	43db      	mvns	r3, r3
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	4013      	ands	r3, r2
 8004208:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f003 0203 	and.w	r2, r3, #3
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	fa02 f303 	lsl.w	r3, r2, r3
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	4313      	orrs	r3, r2
 800421e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800422e:	2b00      	cmp	r3, #0
 8004230:	f000 8098 	beq.w	8004364 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004234:	4a54      	ldr	r2, [pc, #336]	; (8004388 <HAL_GPIO_Init+0x2c8>)
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	089b      	lsrs	r3, r3, #2
 800423a:	3302      	adds	r3, #2
 800423c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004240:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	f003 0303 	and.w	r3, r3, #3
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	220f      	movs	r2, #15
 800424c:	fa02 f303 	lsl.w	r3, r2, r3
 8004250:	43db      	mvns	r3, r3
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	4013      	ands	r3, r2
 8004256:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800425e:	d019      	beq.n	8004294 <HAL_GPIO_Init+0x1d4>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a4a      	ldr	r2, [pc, #296]	; (800438c <HAL_GPIO_Init+0x2cc>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d013      	beq.n	8004290 <HAL_GPIO_Init+0x1d0>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a49      	ldr	r2, [pc, #292]	; (8004390 <HAL_GPIO_Init+0x2d0>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d00d      	beq.n	800428c <HAL_GPIO_Init+0x1cc>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a48      	ldr	r2, [pc, #288]	; (8004394 <HAL_GPIO_Init+0x2d4>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d007      	beq.n	8004288 <HAL_GPIO_Init+0x1c8>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a47      	ldr	r2, [pc, #284]	; (8004398 <HAL_GPIO_Init+0x2d8>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d101      	bne.n	8004284 <HAL_GPIO_Init+0x1c4>
 8004280:	2304      	movs	r3, #4
 8004282:	e008      	b.n	8004296 <HAL_GPIO_Init+0x1d6>
 8004284:	2307      	movs	r3, #7
 8004286:	e006      	b.n	8004296 <HAL_GPIO_Init+0x1d6>
 8004288:	2303      	movs	r3, #3
 800428a:	e004      	b.n	8004296 <HAL_GPIO_Init+0x1d6>
 800428c:	2302      	movs	r3, #2
 800428e:	e002      	b.n	8004296 <HAL_GPIO_Init+0x1d6>
 8004290:	2301      	movs	r3, #1
 8004292:	e000      	b.n	8004296 <HAL_GPIO_Init+0x1d6>
 8004294:	2300      	movs	r3, #0
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	f002 0203 	and.w	r2, r2, #3
 800429c:	0092      	lsls	r2, r2, #2
 800429e:	4093      	lsls	r3, r2
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80042a6:	4938      	ldr	r1, [pc, #224]	; (8004388 <HAL_GPIO_Init+0x2c8>)
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	089b      	lsrs	r3, r3, #2
 80042ac:	3302      	adds	r3, #2
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80042b4:	4b39      	ldr	r3, [pc, #228]	; (800439c <HAL_GPIO_Init+0x2dc>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	43db      	mvns	r3, r3
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	4013      	ands	r3, r2
 80042c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d003      	beq.n	80042d8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80042d0:	693a      	ldr	r2, [r7, #16]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80042d8:	4a30      	ldr	r2, [pc, #192]	; (800439c <HAL_GPIO_Init+0x2dc>)
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80042de:	4b2f      	ldr	r3, [pc, #188]	; (800439c <HAL_GPIO_Init+0x2dc>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	43db      	mvns	r3, r3
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	4013      	ands	r3, r2
 80042ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	4313      	orrs	r3, r2
 8004300:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004302:	4a26      	ldr	r2, [pc, #152]	; (800439c <HAL_GPIO_Init+0x2dc>)
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004308:	4b24      	ldr	r3, [pc, #144]	; (800439c <HAL_GPIO_Init+0x2dc>)
 800430a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800430e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	43db      	mvns	r3, r3
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	4013      	ands	r3, r2
 8004318:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d003      	beq.n	800432e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	4313      	orrs	r3, r2
 800432c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800432e:	4a1b      	ldr	r2, [pc, #108]	; (800439c <HAL_GPIO_Init+0x2dc>)
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8004336:	4b19      	ldr	r3, [pc, #100]	; (800439c <HAL_GPIO_Init+0x2dc>)
 8004338:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800433c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	43db      	mvns	r3, r3
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	4013      	ands	r3, r2
 8004346:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d003      	beq.n	800435c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	4313      	orrs	r3, r2
 800435a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800435c:	4a0f      	ldr	r2, [pc, #60]	; (800439c <HAL_GPIO_Init+0x2dc>)
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	3301      	adds	r3, #1
 8004368:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	fa22 f303 	lsr.w	r3, r2, r3
 8004374:	2b00      	cmp	r3, #0
 8004376:	f47f aeab 	bne.w	80040d0 <HAL_GPIO_Init+0x10>
  }
}
 800437a:	bf00      	nop
 800437c:	bf00      	nop
 800437e:	371c      	adds	r7, #28
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr
 8004388:	40010000 	.word	0x40010000
 800438c:	48000400 	.word	0x48000400
 8004390:	48000800 	.word	0x48000800
 8004394:	48000c00 	.word	0x48000c00
 8004398:	48001000 	.word	0x48001000
 800439c:	58000800 	.word	0x58000800

080043a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	460b      	mov	r3, r1
 80043aa:	807b      	strh	r3, [r7, #2]
 80043ac:	4613      	mov	r3, r2
 80043ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80043b0:	787b      	ldrb	r3, [r7, #1]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d003      	beq.n	80043be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80043b6:	887a      	ldrh	r2, [r7, #2]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80043bc:	e002      	b.n	80043c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80043be:	887a      	ldrh	r2, [r7, #2]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80043d6:	4b0a      	ldr	r3, [pc, #40]	; (8004400 <HAL_HSEM_IRQHandler+0x30>)
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80043dc:	4b08      	ldr	r3, [pc, #32]	; (8004400 <HAL_HSEM_IRQHandler+0x30>)
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	43db      	mvns	r3, r3
 80043e4:	4906      	ldr	r1, [pc, #24]	; (8004400 <HAL_HSEM_IRQHandler+0x30>)
 80043e6:	4013      	ands	r3, r2
 80043e8:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80043ea:	4a05      	ldr	r2, [pc, #20]	; (8004400 <HAL_HSEM_IRQHandler+0x30>)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 f807 	bl	8004404 <HAL_HSEM_FreeCallback>
}
 80043f6:	bf00      	nop
 80043f8:	3708      	adds	r7, #8
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	58001500 	.word	0x58001500

08004404 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8004420:	2300      	movs	r3, #0
 8004422:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d01e      	beq.n	8004468 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800442a:	4b13      	ldr	r3, [pc, #76]	; (8004478 <HAL_IPCC_Init+0x60>)
 800442c:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d102      	bne.n	8004440 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f7fd fe60 	bl	8002100 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8004440:	68b8      	ldr	r0, [r7, #8]
 8004442:	f000 f85b 	bl	80044fc <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 f82c 	bl	80044b0 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2201      	movs	r2, #1
 8004462:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004466:	e001      	b.n	800446c <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800446c:	7bfb      	ldrb	r3, [r7, #15]
}
 800446e:	4618      	mov	r0, r3
 8004470:	3710      	adds	r7, #16
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	58000c00 	.word	0x58000c00

0800447c <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	4613      	mov	r3, r2
 8004488:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800448a:	bf00      	nop
 800448c:	3714      	adds	r7, #20
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr

08004496 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004496:	b480      	push	{r7}
 8004498:	b085      	sub	sp, #20
 800449a:	af00      	add	r7, sp, #0
 800449c:	60f8      	str	r0, [r7, #12]
 800449e:	60b9      	str	r1, [r7, #8]
 80044a0:	4613      	mov	r3, r2
 80044a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80044a4:	bf00      	nop
 80044a6:	3714      	adds	r7, #20
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80044b8:	2300      	movs	r3, #0
 80044ba:	60fb      	str	r3, [r7, #12]
 80044bc:	e00f      	b.n	80044de <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	4413      	add	r3, r2
 80044c6:	4a0b      	ldr	r2, [pc, #44]	; (80044f4 <IPCC_SetDefaultCallbacks+0x44>)
 80044c8:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	3306      	adds	r3, #6
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	4413      	add	r3, r2
 80044d4:	4a08      	ldr	r2, [pc, #32]	; (80044f8 <IPCC_SetDefaultCallbacks+0x48>)
 80044d6:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	3301      	adds	r3, #1
 80044dc:	60fb      	str	r3, [r7, #12]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2b05      	cmp	r3, #5
 80044e2:	d9ec      	bls.n	80044be <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80044e4:	bf00      	nop
 80044e6:	bf00      	nop
 80044e8:	3714      	adds	r7, #20
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	0800447d 	.word	0x0800447d
 80044f8:	08004497 	.word	0x08004497

080044fc <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8004510:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	223f      	movs	r2, #63	; 0x3f
 8004516:	609a      	str	r2, [r3, #8]
}
 8004518:	bf00      	nop
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004524:	b480      	push	{r7}
 8004526:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004528:	4b05      	ldr	r3, [pc, #20]	; (8004540 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a04      	ldr	r2, [pc, #16]	; (8004540 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800452e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004532:	6013      	str	r3, [r2, #0]
}
 8004534:	bf00      	nop
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	58000400 	.word	0x58000400

08004544 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004544:	b480      	push	{r7}
 8004546:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004548:	4b04      	ldr	r3, [pc, #16]	; (800455c <HAL_PWREx_GetVoltageRange+0x18>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004550:	4618      	mov	r0, r3
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	58000400 	.word	0x58000400

08004560 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004560:	b480      	push	{r7}
 8004562:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004564:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800456e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004572:	d101      	bne.n	8004578 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004574:	2301      	movs	r3, #1
 8004576:	e000      	b.n	800457a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <LL_RCC_HSE_Enable>:
{
 8004584:	b480      	push	{r7}
 8004586:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004588:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004592:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004596:	6013      	str	r3, [r2, #0]
}
 8004598:	bf00      	nop
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr

080045a2 <LL_RCC_HSE_Disable>:
{
 80045a2:	b480      	push	{r7}
 80045a4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80045a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045b4:	6013      	str	r3, [r2, #0]
}
 80045b6:	bf00      	nop
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <LL_RCC_HSE_IsReady>:
{
 80045c0:	b480      	push	{r7}
 80045c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80045c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045d2:	d101      	bne.n	80045d8 <LL_RCC_HSE_IsReady+0x18>
 80045d4:	2301      	movs	r3, #1
 80045d6:	e000      	b.n	80045da <LL_RCC_HSE_IsReady+0x1a>
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <LL_RCC_HSI_Enable>:
{
 80045e4:	b480      	push	{r7}
 80045e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80045e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045f6:	6013      	str	r3, [r2, #0]
}
 80045f8:	bf00      	nop
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr

08004602 <LL_RCC_HSI_Disable>:
{
 8004602:	b480      	push	{r7}
 8004604:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004606:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004610:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004614:	6013      	str	r3, [r2, #0]
}
 8004616:	bf00      	nop
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <LL_RCC_HSI_IsReady>:
{
 8004620:	b480      	push	{r7}
 8004622:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004624:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800462e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004632:	d101      	bne.n	8004638 <LL_RCC_HSI_IsReady+0x18>
 8004634:	2301      	movs	r3, #1
 8004636:	e000      	b.n	800463a <LL_RCC_HSI_IsReady+0x1a>
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800464c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	061b      	lsls	r3, r3, #24
 800465a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800465e:	4313      	orrs	r3, r2
 8004660:	604b      	str	r3, [r1, #4]
}
 8004662:	bf00      	nop
 8004664:	370c      	adds	r7, #12
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr

0800466e <LL_RCC_HSI48_Enable>:
{
 800466e:	b480      	push	{r7}
 8004670:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004672:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004676:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800467a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800467e:	f043 0301 	orr.w	r3, r3, #1
 8004682:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004686:	bf00      	nop
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <LL_RCC_HSI48_Disable>:
{
 8004690:	b480      	push	{r7}
 8004692:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004694:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004698:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800469c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046a0:	f023 0301 	bic.w	r3, r3, #1
 80046a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80046a8:	bf00      	nop
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <LL_RCC_HSI48_IsReady>:
{
 80046b2:	b480      	push	{r7}
 80046b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80046b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d101      	bne.n	80046ca <LL_RCC_HSI48_IsReady+0x18>
 80046c6:	2301      	movs	r3, #1
 80046c8:	e000      	b.n	80046cc <LL_RCC_HSI48_IsReady+0x1a>
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr

080046d6 <LL_RCC_LSE_Enable>:
{
 80046d6:	b480      	push	{r7}
 80046d8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80046da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046e6:	f043 0301 	orr.w	r3, r3, #1
 80046ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80046ee:	bf00      	nop
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <LL_RCC_LSE_Disable>:
{
 80046f8:	b480      	push	{r7}
 80046fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80046fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004704:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004708:	f023 0301 	bic.w	r3, r3, #1
 800470c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004710:	bf00      	nop
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr

0800471a <LL_RCC_LSE_EnableBypass>:
{
 800471a:	b480      	push	{r7}
 800471c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800471e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004726:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800472a:	f043 0304 	orr.w	r3, r3, #4
 800472e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004732:	bf00      	nop
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <LL_RCC_LSE_DisableBypass>:
{
 800473c:	b480      	push	{r7}
 800473e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004748:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800474c:	f023 0304 	bic.w	r3, r3, #4
 8004750:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004754:	bf00      	nop
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr

0800475e <LL_RCC_LSE_IsReady>:
{
 800475e:	b480      	push	{r7}
 8004760:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004762:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b02      	cmp	r3, #2
 8004770:	d101      	bne.n	8004776 <LL_RCC_LSE_IsReady+0x18>
 8004772:	2301      	movs	r3, #1
 8004774:	e000      	b.n	8004778 <LL_RCC_LSE_IsReady+0x1a>
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr

08004782 <LL_RCC_LSI1_Enable>:
{
 8004782:	b480      	push	{r7}
 8004784:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004786:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800478a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800478e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004792:	f043 0301 	orr.w	r3, r3, #1
 8004796:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800479a:	bf00      	nop
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <LL_RCC_LSI1_Disable>:
{
 80047a4:	b480      	push	{r7}
 80047a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80047a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047b4:	f023 0301 	bic.w	r3, r3, #1
 80047b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80047bc:	bf00      	nop
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr

080047c6 <LL_RCC_LSI1_IsReady>:
{
 80047c6:	b480      	push	{r7}
 80047c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80047ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d101      	bne.n	80047de <LL_RCC_LSI1_IsReady+0x18>
 80047da:	2301      	movs	r3, #1
 80047dc:	e000      	b.n	80047e0 <LL_RCC_LSI1_IsReady+0x1a>
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr

080047ea <LL_RCC_LSI2_Enable>:
{
 80047ea:	b480      	push	{r7}
 80047ec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80047ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047fa:	f043 0304 	orr.w	r3, r3, #4
 80047fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004802:	bf00      	nop
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <LL_RCC_LSI2_Disable>:
{
 800480c:	b480      	push	{r7}
 800480e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004810:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004814:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004818:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800481c:	f023 0304 	bic.w	r3, r3, #4
 8004820:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004824:	bf00      	nop
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr

0800482e <LL_RCC_LSI2_IsReady>:
{
 800482e:	b480      	push	{r7}
 8004830:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004832:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004836:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800483a:	f003 0308 	and.w	r3, r3, #8
 800483e:	2b08      	cmp	r3, #8
 8004840:	d101      	bne.n	8004846 <LL_RCC_LSI2_IsReady+0x18>
 8004842:	2301      	movs	r3, #1
 8004844:	e000      	b.n	8004848 <LL_RCC_LSI2_IsReady+0x1a>
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr

08004852 <LL_RCC_LSI2_SetTrimming>:
{
 8004852:	b480      	push	{r7}
 8004854:	b083      	sub	sp, #12
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800485a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800485e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004862:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	021b      	lsls	r3, r3, #8
 800486a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800486e:	4313      	orrs	r3, r2
 8004870:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <LL_RCC_MSI_Enable>:
{
 8004880:	b480      	push	{r7}
 8004882:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004884:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800488e:	f043 0301 	orr.w	r3, r3, #1
 8004892:	6013      	str	r3, [r2, #0]
}
 8004894:	bf00      	nop
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <LL_RCC_MSI_Disable>:
{
 800489e:	b480      	push	{r7}
 80048a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80048a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048ac:	f023 0301 	bic.w	r3, r3, #1
 80048b0:	6013      	str	r3, [r2, #0]
}
 80048b2:	bf00      	nop
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <LL_RCC_MSI_IsReady>:
{
 80048bc:	b480      	push	{r7}
 80048be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80048c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d101      	bne.n	80048d2 <LL_RCC_MSI_IsReady+0x16>
 80048ce:	2301      	movs	r3, #1
 80048d0:	e000      	b.n	80048d4 <LL_RCC_MSI_IsReady+0x18>
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <LL_RCC_MSI_SetRange>:
{
 80048de:	b480      	push	{r7}
 80048e0:	b083      	sub	sp, #12
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80048e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	600b      	str	r3, [r1, #0]
}
 80048fa:	bf00      	nop
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr

08004906 <LL_RCC_MSI_GetRange>:
{
 8004906:	b480      	push	{r7}
 8004908:	b083      	sub	sp, #12
 800490a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800490c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004916:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2bb0      	cmp	r3, #176	; 0xb0
 800491c:	d901      	bls.n	8004922 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800491e:	23b0      	movs	r3, #176	; 0xb0
 8004920:	607b      	str	r3, [r7, #4]
  return msiRange;
 8004922:	687b      	ldr	r3, [r7, #4]
}
 8004924:	4618      	mov	r0, r3
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004938:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	021b      	lsls	r3, r3, #8
 8004946:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800494a:	4313      	orrs	r3, r2
 800494c:	604b      	str	r3, [r1, #4]
}
 800494e:	bf00      	nop
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr

0800495a <LL_RCC_SetSysClkSource>:
{
 800495a:	b480      	push	{r7}
 800495c:	b083      	sub	sp, #12
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004962:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f023 0203 	bic.w	r2, r3, #3
 800496c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4313      	orrs	r3, r2
 8004974:	608b      	str	r3, [r1, #8]
}
 8004976:	bf00      	nop
 8004978:	370c      	adds	r7, #12
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr

08004982 <LL_RCC_GetSysClkSource>:
{
 8004982:	b480      	push	{r7}
 8004984:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f003 030c 	and.w	r3, r3, #12
}
 8004990:	4618      	mov	r0, r3
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr

0800499a <LL_RCC_SetAHBPrescaler>:
{
 800499a:	b480      	push	{r7}
 800499c:	b083      	sub	sp, #12
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80049a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	608b      	str	r3, [r1, #8]
}
 80049b6:	bf00      	nop
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr

080049c2 <LL_C2_RCC_SetAHBPrescaler>:
{
 80049c2:	b480      	push	{r7}
 80049c4:	b083      	sub	sp, #12
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80049ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049ce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80049d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4313      	orrs	r3, r2
 80049de:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80049e2:	bf00      	nop
 80049e4:	370c      	adds	r7, #12
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr

080049ee <LL_RCC_SetAHB4Prescaler>:
{
 80049ee:	b480      	push	{r7}
 80049f0:	b083      	sub	sp, #12
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80049f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049fa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80049fe:	f023 020f 	bic.w	r2, r3, #15
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	091b      	lsrs	r3, r3, #4
 8004a06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004a10:	bf00      	nop
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <LL_RCC_SetAPB1Prescaler>:
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004a24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	608b      	str	r3, [r1, #8]
}
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <LL_RCC_SetAPB2Prescaler>:
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	608b      	str	r3, [r1, #8]
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <LL_RCC_GetAHBPrescaler>:
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <LL_RCC_GetAHB4Prescaler>:
{
 8004a84:	b480      	push	{r7}
 8004a86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004a88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a8c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004a90:	011b      	lsls	r3, r3, #4
 8004a92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <LL_RCC_GetAPB1Prescaler>:
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004aa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <LL_RCC_GetAPB2Prescaler>:
{
 8004ab8:	b480      	push	{r7}
 8004aba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004abc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <LL_RCC_PLL_Enable>:
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004ad4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ade:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ae2:	6013      	str	r3, [r2, #0]
}
 8004ae4:	bf00      	nop
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <LL_RCC_PLL_Disable>:
{
 8004aee:	b480      	push	{r7}
 8004af0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004af2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004afc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b00:	6013      	str	r3, [r2, #0]
}
 8004b02:	bf00      	nop
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <LL_RCC_PLL_IsReady>:
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004b10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b1e:	d101      	bne.n	8004b24 <LL_RCC_PLL_IsReady+0x18>
 8004b20:	2301      	movs	r3, #1
 8004b22:	e000      	b.n	8004b26 <LL_RCC_PLL_IsReady+0x1a>
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <LL_RCC_PLL_GetN>:
{
 8004b30:	b480      	push	{r7}
 8004b32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004b34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	0a1b      	lsrs	r3, r3, #8
 8004b3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr

08004b4a <LL_RCC_PLL_GetR>:
{
 8004b4a:	b480      	push	{r7}
 8004b4c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004b4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr

08004b62 <LL_RCC_PLL_GetDivider>:
{
 8004b62:	b480      	push	{r7}
 8004b64:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004b66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr

08004b7a <LL_RCC_PLL_GetMainSource>:
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004b7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	f003 0303 	and.w	r3, r3, #3
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr

08004b92 <LL_RCC_IsActiveFlag_HPRE>:
{
 8004b92:	b480      	push	{r7}
 8004b94:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004b96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ba4:	d101      	bne.n	8004baa <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e000      	b.n	8004bac <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr

08004bb6 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004bba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bbe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bca:	d101      	bne.n	8004bd0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e000      	b.n	8004bd2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8004bdc:	b480      	push	{r7}
 8004bde:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004be4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004be8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bf0:	d101      	bne.n	8004bf6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e000      	b.n	8004bf8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr

08004c02 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8004c02:	b480      	push	{r7}
 8004c04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004c06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c14:	d101      	bne.n	8004c1a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004c16:	2301      	movs	r3, #1
 8004c18:	e000      	b.n	8004c1c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr

08004c26 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8004c26:	b480      	push	{r7}
 8004c28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004c2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c34:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c38:	d101      	bne.n	8004c3e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e000      	b.n	8004c40 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
	...

08004c4c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c4c:	b590      	push	{r4, r7, lr}
 8004c4e:	b08d      	sub	sp, #52	; 0x34
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d101      	bne.n	8004c5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e37f      	b.n	800535e <HAL_RCC_OscConfig+0x712>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0320 	and.w	r3, r3, #32
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	f000 8092 	beq.w	8004d90 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c6c:	f7ff fe89 	bl	8004982 <LL_RCC_GetSysClkSource>
 8004c70:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c72:	f7ff ff82 	bl	8004b7a <LL_RCC_PLL_GetMainSource>
 8004c76:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d005      	beq.n	8004c8a <HAL_RCC_OscConfig+0x3e>
 8004c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c80:	2b0c      	cmp	r3, #12
 8004c82:	d14c      	bne.n	8004d1e <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d149      	bne.n	8004d1e <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c8a:	f7ff fe17 	bl	80048bc <LL_RCC_MSI_IsReady>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d005      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x54>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	69db      	ldr	r3, [r3, #28]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d101      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e35e      	b.n	800535e <HAL_RCC_OscConfig+0x712>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004ca4:	f7ff fe2f 	bl	8004906 <LL_RCC_MSI_GetRange>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	429c      	cmp	r4, r3
 8004cac:	d914      	bls.n	8004cd8 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f000 fd44 	bl	8005740 <RCC_SetFlashLatencyFromMSIRange>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d001      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e34d      	b.n	800535e <HAL_RCC_OscConfig+0x712>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7ff fe09 	bl	80048de <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a1b      	ldr	r3, [r3, #32]
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7ff fe2d 	bl	8004930 <LL_RCC_MSI_SetCalibTrimming>
 8004cd6:	e013      	b.n	8004d00 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f7ff fdfe 	bl	80048de <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7ff fe22 	bl	8004930 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f000 fd25 	bl	8005740 <RCC_SetFlashLatencyFromMSIRange>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d001      	beq.n	8004d00 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e32e      	b.n	800535e <HAL_RCC_OscConfig+0x712>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004d00:	f000 fcde 	bl	80056c0 <HAL_RCC_GetHCLKFreq>
 8004d04:	4603      	mov	r3, r0
 8004d06:	4aa5      	ldr	r2, [pc, #660]	; (8004f9c <HAL_RCC_OscConfig+0x350>)
 8004d08:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004d0a:	4ba5      	ldr	r3, [pc, #660]	; (8004fa0 <HAL_RCC_OscConfig+0x354>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7fe fc58 	bl	80035c4 <HAL_InitTick>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d039      	beq.n	8004d8e <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e31f      	b.n	800535e <HAL_RCC_OscConfig+0x712>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	69db      	ldr	r3, [r3, #28]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d01e      	beq.n	8004d64 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004d26:	f7ff fdab 	bl	8004880 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d2a:	f7fe fc99 	bl	8003660 <HAL_GetTick>
 8004d2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004d30:	e008      	b.n	8004d44 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d32:	f7fe fc95 	bl	8003660 <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d901      	bls.n	8004d44 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e30c      	b.n	800535e <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004d44:	f7ff fdba 	bl	80048bc <LL_RCC_MSI_IsReady>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d0f1      	beq.n	8004d32 <HAL_RCC_OscConfig+0xe6>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7ff fdc3 	bl	80048de <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a1b      	ldr	r3, [r3, #32]
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7ff fde7 	bl	8004930 <LL_RCC_MSI_SetCalibTrimming>
 8004d62:	e015      	b.n	8004d90 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004d64:	f7ff fd9b 	bl	800489e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d68:	f7fe fc7a 	bl	8003660 <HAL_GetTick>
 8004d6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004d6e:	e008      	b.n	8004d82 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d70:	f7fe fc76 	bl	8003660 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e2ed      	b.n	800535e <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004d82:	f7ff fd9b 	bl	80048bc <LL_RCC_MSI_IsReady>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1f1      	bne.n	8004d70 <HAL_RCC_OscConfig+0x124>
 8004d8c:	e000      	b.n	8004d90 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d8e:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0301 	and.w	r3, r3, #1
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d04e      	beq.n	8004e3a <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d9c:	f7ff fdf1 	bl	8004982 <LL_RCC_GetSysClkSource>
 8004da0:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004da2:	f7ff feea 	bl	8004b7a <LL_RCC_PLL_GetMainSource>
 8004da6:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004da8:	6a3b      	ldr	r3, [r7, #32]
 8004daa:	2b08      	cmp	r3, #8
 8004dac:	d005      	beq.n	8004dba <HAL_RCC_OscConfig+0x16e>
 8004dae:	6a3b      	ldr	r3, [r7, #32]
 8004db0:	2b0c      	cmp	r3, #12
 8004db2:	d10d      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	2b03      	cmp	r3, #3
 8004db8:	d10a      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dba:	f7ff fc01 	bl	80045c0 <LL_RCC_HSE_IsReady>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d039      	beq.n	8004e38 <HAL_RCC_OscConfig+0x1ec>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d135      	bne.n	8004e38 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e2c6      	b.n	800535e <HAL_RCC_OscConfig+0x712>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dd8:	d102      	bne.n	8004de0 <HAL_RCC_OscConfig+0x194>
 8004dda:	f7ff fbd3 	bl	8004584 <LL_RCC_HSE_Enable>
 8004dde:	e001      	b.n	8004de4 <HAL_RCC_OscConfig+0x198>
 8004de0:	f7ff fbdf 	bl	80045a2 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d012      	beq.n	8004e12 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dec:	f7fe fc38 	bl	8003660 <HAL_GetTick>
 8004df0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004df2:	e008      	b.n	8004e06 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004df4:	f7fe fc34 	bl	8003660 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	2b64      	cmp	r3, #100	; 0x64
 8004e00:	d901      	bls.n	8004e06 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e2ab      	b.n	800535e <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004e06:	f7ff fbdb 	bl	80045c0 <LL_RCC_HSE_IsReady>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d0f1      	beq.n	8004df4 <HAL_RCC_OscConfig+0x1a8>
 8004e10:	e013      	b.n	8004e3a <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e12:	f7fe fc25 	bl	8003660 <HAL_GetTick>
 8004e16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004e18:	e008      	b.n	8004e2c <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e1a:	f7fe fc21 	bl	8003660 <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	2b64      	cmp	r3, #100	; 0x64
 8004e26:	d901      	bls.n	8004e2c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e298      	b.n	800535e <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004e2c:	f7ff fbc8 	bl	80045c0 <LL_RCC_HSE_IsReady>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1f1      	bne.n	8004e1a <HAL_RCC_OscConfig+0x1ce>
 8004e36:	e000      	b.n	8004e3a <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e38:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d051      	beq.n	8004eea <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e46:	f7ff fd9c 	bl	8004982 <LL_RCC_GetSysClkSource>
 8004e4a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e4c:	f7ff fe95 	bl	8004b7a <LL_RCC_PLL_GetMainSource>
 8004e50:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	2b04      	cmp	r3, #4
 8004e56:	d005      	beq.n	8004e64 <HAL_RCC_OscConfig+0x218>
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	2b0c      	cmp	r3, #12
 8004e5c:	d113      	bne.n	8004e86 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d110      	bne.n	8004e86 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e64:	f7ff fbdc 	bl	8004620 <LL_RCC_HSI_IsReady>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d005      	beq.n	8004e7a <HAL_RCC_OscConfig+0x22e>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e271      	b.n	800535e <HAL_RCC_OscConfig+0x712>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7ff fbe0 	bl	8004644 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e84:	e031      	b.n	8004eea <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d019      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e8e:	f7ff fba9 	bl	80045e4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e92:	f7fe fbe5 	bl	8003660 <HAL_GetTick>
 8004e96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004e98:	e008      	b.n	8004eac <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e9a:	f7fe fbe1 	bl	8003660 <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d901      	bls.n	8004eac <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e258      	b.n	800535e <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004eac:	f7ff fbb8 	bl	8004620 <LL_RCC_HSI_IsReady>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d0f1      	beq.n	8004e9a <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f7ff fbc2 	bl	8004644 <LL_RCC_HSI_SetCalibTrimming>
 8004ec0:	e013      	b.n	8004eea <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ec2:	f7ff fb9e 	bl	8004602 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec6:	f7fe fbcb 	bl	8003660 <HAL_GetTick>
 8004eca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004ecc:	e008      	b.n	8004ee0 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ece:	f7fe fbc7 	bl	8003660 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d901      	bls.n	8004ee0 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e23e      	b.n	800535e <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004ee0:	f7ff fb9e 	bl	8004620 <LL_RCC_HSI_IsReady>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1f1      	bne.n	8004ece <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0308 	and.w	r3, r3, #8
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d106      	bne.n	8004f04 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	f000 80a4 	beq.w	800504c <HAL_RCC_OscConfig+0x400>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	695b      	ldr	r3, [r3, #20]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d077      	beq.n	8004ffc <HAL_RCC_OscConfig+0x3b0>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0310 	and.w	r3, r3, #16
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d04b      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x364>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004f18:	f7ff fc55 	bl	80047c6 <LL_RCC_LSI1_IsReady>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d113      	bne.n	8004f4a <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004f22:	f7ff fc2e 	bl	8004782 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f26:	f7fe fb9b 	bl	8003660 <HAL_GetTick>
 8004f2a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004f2c:	e008      	b.n	8004f40 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004f2e:	f7fe fb97 	bl	8003660 <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d901      	bls.n	8004f40 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e20e      	b.n	800535e <HAL_RCC_OscConfig+0x712>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004f40:	f7ff fc41 	bl	80047c6 <LL_RCC_LSI1_IsReady>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d0f1      	beq.n	8004f2e <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004f4a:	f7ff fc4e 	bl	80047ea <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f4e:	f7fe fb87 	bl	8003660 <HAL_GetTick>
 8004f52:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004f54:	e008      	b.n	8004f68 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004f56:	f7fe fb83 	bl	8003660 <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	2b03      	cmp	r3, #3
 8004f62:	d901      	bls.n	8004f68 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e1fa      	b.n	800535e <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004f68:	f7ff fc61 	bl	800482e <LL_RCC_LSI2_IsReady>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d0f1      	beq.n	8004f56 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	4618      	mov	r0, r3
 8004f78:	f7ff fc6b 	bl	8004852 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004f7c:	f7ff fc12 	bl	80047a4 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f80:	f7fe fb6e 	bl	8003660 <HAL_GetTick>
 8004f84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004f86:	e00d      	b.n	8004fa4 <HAL_RCC_OscConfig+0x358>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004f88:	f7fe fb6a 	bl	8003660 <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d906      	bls.n	8004fa4 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e1e1      	b.n	800535e <HAL_RCC_OscConfig+0x712>
 8004f9a:	bf00      	nop
 8004f9c:	20000020 	.word	0x20000020
 8004fa0:	20000024 	.word	0x20000024
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004fa4:	f7ff fc0f 	bl	80047c6 <LL_RCC_LSI1_IsReady>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1ec      	bne.n	8004f88 <HAL_RCC_OscConfig+0x33c>
 8004fae:	e04d      	b.n	800504c <HAL_RCC_OscConfig+0x400>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004fb0:	f7ff fbe7 	bl	8004782 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb4:	f7fe fb54 	bl	8003660 <HAL_GetTick>
 8004fb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004fba:	e008      	b.n	8004fce <HAL_RCC_OscConfig+0x382>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004fbc:	f7fe fb50 	bl	8003660 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d901      	bls.n	8004fce <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e1c7      	b.n	800535e <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004fce:	f7ff fbfa 	bl	80047c6 <LL_RCC_LSI1_IsReady>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d0f1      	beq.n	8004fbc <HAL_RCC_OscConfig+0x370>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004fd8:	f7ff fc18 	bl	800480c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004fdc:	e008      	b.n	8004ff0 <HAL_RCC_OscConfig+0x3a4>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004fde:	f7fe fb3f 	bl	8003660 <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	2b03      	cmp	r3, #3
 8004fea:	d901      	bls.n	8004ff0 <HAL_RCC_OscConfig+0x3a4>
          {
            return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e1b6      	b.n	800535e <HAL_RCC_OscConfig+0x712>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004ff0:	f7ff fc1d 	bl	800482e <LL_RCC_LSI2_IsReady>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1f1      	bne.n	8004fde <HAL_RCC_OscConfig+0x392>
 8004ffa:	e027      	b.n	800504c <HAL_RCC_OscConfig+0x400>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004ffc:	f7ff fc06 	bl	800480c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005000:	f7fe fb2e 	bl	8003660 <HAL_GetTick>
 8005004:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005006:	e008      	b.n	800501a <HAL_RCC_OscConfig+0x3ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005008:	f7fe fb2a 	bl	8003660 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	2b03      	cmp	r3, #3
 8005014:	d901      	bls.n	800501a <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e1a1      	b.n	800535e <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800501a:	f7ff fc08 	bl	800482e <LL_RCC_LSI2_IsReady>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d1f1      	bne.n	8005008 <HAL_RCC_OscConfig+0x3bc>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8005024:	f7ff fbbe 	bl	80047a4 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005028:	f7fe fb1a 	bl	8003660 <HAL_GetTick>
 800502c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800502e:	e008      	b.n	8005042 <HAL_RCC_OscConfig+0x3f6>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005030:	f7fe fb16 	bl	8003660 <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	2b02      	cmp	r3, #2
 800503c:	d901      	bls.n	8005042 <HAL_RCC_OscConfig+0x3f6>
        {
          return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e18d      	b.n	800535e <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005042:	f7ff fbc0 	bl	80047c6 <LL_RCC_LSI1_IsReady>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1f1      	bne.n	8005030 <HAL_RCC_OscConfig+0x3e4>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0304 	and.w	r3, r3, #4
 8005054:	2b00      	cmp	r3, #0
 8005056:	d05b      	beq.n	8005110 <HAL_RCC_OscConfig+0x4c4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005058:	4ba7      	ldr	r3, [pc, #668]	; (80052f8 <HAL_RCC_OscConfig+0x6ac>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005060:	2b00      	cmp	r3, #0
 8005062:	d114      	bne.n	800508e <HAL_RCC_OscConfig+0x442>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005064:	f7ff fa5e 	bl	8004524 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005068:	f7fe fafa 	bl	8003660 <HAL_GetTick>
 800506c:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800506e:	e008      	b.n	8005082 <HAL_RCC_OscConfig+0x436>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005070:	f7fe faf6 	bl	8003660 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b02      	cmp	r3, #2
 800507c:	d901      	bls.n	8005082 <HAL_RCC_OscConfig+0x436>
        {
          return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e16d      	b.n	800535e <HAL_RCC_OscConfig+0x712>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005082:	4b9d      	ldr	r3, [pc, #628]	; (80052f8 <HAL_RCC_OscConfig+0x6ac>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800508a:	2b00      	cmp	r3, #0
 800508c:	d0f0      	beq.n	8005070 <HAL_RCC_OscConfig+0x424>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	2b01      	cmp	r3, #1
 8005094:	d102      	bne.n	800509c <HAL_RCC_OscConfig+0x450>
 8005096:	f7ff fb1e 	bl	80046d6 <LL_RCC_LSE_Enable>
 800509a:	e00c      	b.n	80050b6 <HAL_RCC_OscConfig+0x46a>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	2b05      	cmp	r3, #5
 80050a2:	d104      	bne.n	80050ae <HAL_RCC_OscConfig+0x462>
 80050a4:	f7ff fb39 	bl	800471a <LL_RCC_LSE_EnableBypass>
 80050a8:	f7ff fb15 	bl	80046d6 <LL_RCC_LSE_Enable>
 80050ac:	e003      	b.n	80050b6 <HAL_RCC_OscConfig+0x46a>
 80050ae:	f7ff fb23 	bl	80046f8 <LL_RCC_LSE_Disable>
 80050b2:	f7ff fb43 	bl	800473c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d014      	beq.n	80050e8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050be:	f7fe facf 	bl	8003660 <HAL_GetTick>
 80050c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80050c4:	e00a      	b.n	80050dc <HAL_RCC_OscConfig+0x490>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050c6:	f7fe facb 	bl	8003660 <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d901      	bls.n	80050dc <HAL_RCC_OscConfig+0x490>
        {
          return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e140      	b.n	800535e <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSE_IsReady() == 0U)
 80050dc:	f7ff fb3f 	bl	800475e <LL_RCC_LSE_IsReady>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d0ef      	beq.n	80050c6 <HAL_RCC_OscConfig+0x47a>
 80050e6:	e013      	b.n	8005110 <HAL_RCC_OscConfig+0x4c4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050e8:	f7fe faba 	bl	8003660 <HAL_GetTick>
 80050ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80050ee:	e00a      	b.n	8005106 <HAL_RCC_OscConfig+0x4ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050f0:	f7fe fab6 	bl	8003660 <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80050fe:	4293      	cmp	r3, r2
 8005100:	d901      	bls.n	8005106 <HAL_RCC_OscConfig+0x4ba>
        {
          return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e12b      	b.n	800535e <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005106:	f7ff fb2a 	bl	800475e <LL_RCC_LSE_IsReady>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1ef      	bne.n	80050f0 <HAL_RCC_OscConfig+0x4a4>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005118:	2b00      	cmp	r3, #0
 800511a:	d02c      	beq.n	8005176 <HAL_RCC_OscConfig+0x52a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005120:	2b00      	cmp	r3, #0
 8005122:	d014      	beq.n	800514e <HAL_RCC_OscConfig+0x502>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005124:	f7ff faa3 	bl	800466e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005128:	f7fe fa9a 	bl	8003660 <HAL_GetTick>
 800512c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800512e:	e008      	b.n	8005142 <HAL_RCC_OscConfig+0x4f6>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005130:	f7fe fa96 	bl	8003660 <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	2b02      	cmp	r3, #2
 800513c:	d901      	bls.n	8005142 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e10d      	b.n	800535e <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005142:	f7ff fab6 	bl	80046b2 <LL_RCC_HSI48_IsReady>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d0f1      	beq.n	8005130 <HAL_RCC_OscConfig+0x4e4>
 800514c:	e013      	b.n	8005176 <HAL_RCC_OscConfig+0x52a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800514e:	f7ff fa9f 	bl	8004690 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005152:	f7fe fa85 	bl	8003660 <HAL_GetTick>
 8005156:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005158:	e008      	b.n	800516c <HAL_RCC_OscConfig+0x520>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800515a:	f7fe fa81 	bl	8003660 <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	2b02      	cmp	r3, #2
 8005166:	d901      	bls.n	800516c <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e0f8      	b.n	800535e <HAL_RCC_OscConfig+0x712>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800516c:	f7ff faa1 	bl	80046b2 <LL_RCC_HSI48_IsReady>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1f1      	bne.n	800515a <HAL_RCC_OscConfig+0x50e>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800517a:	2b00      	cmp	r3, #0
 800517c:	f000 80ee 	beq.w	800535c <HAL_RCC_OscConfig+0x710>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005180:	f7ff fbff 	bl	8004982 <LL_RCC_GetSysClkSource>
 8005184:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8005186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005192:	2b02      	cmp	r3, #2
 8005194:	f040 80b4 	bne.w	8005300 <HAL_RCC_OscConfig+0x6b4>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f003 0203 	and.w	r2, r3, #3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d123      	bne.n	80051ee <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d11c      	bne.n	80051ee <HAL_RCC_OscConfig+0x5a2>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	0a1b      	lsrs	r3, r3, #8
 80051b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d114      	bne.n	80051ee <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d10d      	bne.n	80051ee <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80051dc:	429a      	cmp	r2, r3
 80051de:	d106      	bne.n	80051ee <HAL_RCC_OscConfig+0x5a2>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d05d      	beq.n	80052aa <HAL_RCC_OscConfig+0x65e>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	2b0c      	cmp	r3, #12
 80051f2:	d058      	beq.n	80052a6 <HAL_RCC_OscConfig+0x65a>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80051f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d001      	beq.n	8005206 <HAL_RCC_OscConfig+0x5ba>

          {
            return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e0ab      	b.n	800535e <HAL_RCC_OscConfig+0x712>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005206:	f7ff fc72 	bl	8004aee <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800520a:	f7fe fa29 	bl	8003660 <HAL_GetTick>
 800520e:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005210:	e008      	b.n	8005224 <HAL_RCC_OscConfig+0x5d8>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005212:	f7fe fa25 	bl	8003660 <HAL_GetTick>
 8005216:	4602      	mov	r2, r0
 8005218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	2b02      	cmp	r3, #2
 800521e:	d901      	bls.n	8005224 <HAL_RCC_OscConfig+0x5d8>
              {
                return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e09c      	b.n	800535e <HAL_RCC_OscConfig+0x712>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005224:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d1ef      	bne.n	8005212 <HAL_RCC_OscConfig+0x5c6>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005232:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005236:	68da      	ldr	r2, [r3, #12]
 8005238:	4b30      	ldr	r3, [pc, #192]	; (80052fc <HAL_RCC_OscConfig+0x6b0>)
 800523a:	4013      	ands	r3, r2
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005244:	4311      	orrs	r1, r2
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800524a:	0212      	lsls	r2, r2, #8
 800524c:	4311      	orrs	r1, r2
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005252:	4311      	orrs	r1, r2
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005258:	4311      	orrs	r1, r2
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800525e:	430a      	orrs	r2, r1
 8005260:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005264:	4313      	orrs	r3, r2
 8005266:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005268:	f7ff fc32 	bl	8004ad0 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800526c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005276:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800527a:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800527c:	f7fe f9f0 	bl	8003660 <HAL_GetTick>
 8005280:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005282:	e008      	b.n	8005296 <HAL_RCC_OscConfig+0x64a>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005284:	f7fe f9ec 	bl	8003660 <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	2b02      	cmp	r3, #2
 8005290:	d901      	bls.n	8005296 <HAL_RCC_OscConfig+0x64a>
              {
                return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e063      	b.n	800535e <HAL_RCC_OscConfig+0x712>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d0ef      	beq.n	8005284 <HAL_RCC_OscConfig+0x638>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052a4:	e05a      	b.n	800535c <HAL_RCC_OscConfig+0x710>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e059      	b.n	800535e <HAL_RCC_OscConfig+0x712>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d151      	bne.n	800535c <HAL_RCC_OscConfig+0x710>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80052b8:	f7ff fc0a 	bl	8004ad0 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80052bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80052cc:	f7fe f9c8 	bl	8003660 <HAL_GetTick>
 80052d0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052d2:	e008      	b.n	80052e6 <HAL_RCC_OscConfig+0x69a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052d4:	f7fe f9c4 	bl	8003660 <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d901      	bls.n	80052e6 <HAL_RCC_OscConfig+0x69a>
            {
              return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e03b      	b.n	800535e <HAL_RCC_OscConfig+0x712>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d0ef      	beq.n	80052d4 <HAL_RCC_OscConfig+0x688>
 80052f4:	e032      	b.n	800535c <HAL_RCC_OscConfig+0x710>
 80052f6:	bf00      	nop
 80052f8:	58000400 	.word	0x58000400
 80052fc:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	2b0c      	cmp	r3, #12
 8005304:	d028      	beq.n	8005358 <HAL_RCC_OscConfig+0x70c>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005306:	f7ff fbf2 	bl	8004aee <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800530a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005314:	f023 0303 	bic.w	r3, r3, #3
 8005318:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 800531a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005324:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8005328:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800532c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800532e:	f7fe f997 	bl	8003660 <HAL_GetTick>
 8005332:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005334:	e008      	b.n	8005348 <HAL_RCC_OscConfig+0x6fc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005336:	f7fe f993 	bl	8003660 <HAL_GetTick>
 800533a:	4602      	mov	r2, r0
 800533c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	2b02      	cmp	r3, #2
 8005342:	d901      	bls.n	8005348 <HAL_RCC_OscConfig+0x6fc>
          {
            return HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	e00a      	b.n	800535e <HAL_RCC_OscConfig+0x712>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005348:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d1ef      	bne.n	8005336 <HAL_RCC_OscConfig+0x6ea>
 8005356:	e001      	b.n	800535c <HAL_RCC_OscConfig+0x710>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e000      	b.n	800535e <HAL_RCC_OscConfig+0x712>
      }
    }
  }
  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3734      	adds	r7, #52	; 0x34
 8005362:	46bd      	mov	sp, r7
 8005364:	bd90      	pop	{r4, r7, pc}
 8005366:	bf00      	nop

08005368 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d101      	bne.n	800537c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e12d      	b.n	80055d8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800537c:	4b98      	ldr	r3, [pc, #608]	; (80055e0 <HAL_RCC_ClockConfig+0x278>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0307 	and.w	r3, r3, #7
 8005384:	683a      	ldr	r2, [r7, #0]
 8005386:	429a      	cmp	r2, r3
 8005388:	d91b      	bls.n	80053c2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800538a:	4b95      	ldr	r3, [pc, #596]	; (80055e0 <HAL_RCC_ClockConfig+0x278>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f023 0207 	bic.w	r2, r3, #7
 8005392:	4993      	ldr	r1, [pc, #588]	; (80055e0 <HAL_RCC_ClockConfig+0x278>)
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	4313      	orrs	r3, r2
 8005398:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800539a:	f7fe f961 	bl	8003660 <HAL_GetTick>
 800539e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053a0:	e008      	b.n	80053b4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80053a2:	f7fe f95d 	bl	8003660 <HAL_GetTick>
 80053a6:	4602      	mov	r2, r0
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d901      	bls.n	80053b4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	e111      	b.n	80055d8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053b4:	4b8a      	ldr	r3, [pc, #552]	; (80055e0 <HAL_RCC_ClockConfig+0x278>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0307 	and.w	r3, r3, #7
 80053bc:	683a      	ldr	r2, [r7, #0]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d1ef      	bne.n	80053a2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0302 	and.w	r3, r3, #2
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d016      	beq.n	80053fc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	4618      	mov	r0, r3
 80053d4:	f7ff fae1 	bl	800499a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80053d8:	f7fe f942 	bl	8003660 <HAL_GetTick>
 80053dc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80053de:	e008      	b.n	80053f2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80053e0:	f7fe f93e 	bl	8003660 <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d901      	bls.n	80053f2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e0f2      	b.n	80055d8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80053f2:	f7ff fbce 	bl	8004b92 <LL_RCC_IsActiveFlag_HPRE>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d0f1      	beq.n	80053e0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0320 	and.w	r3, r3, #32
 8005404:	2b00      	cmp	r3, #0
 8005406:	d016      	beq.n	8005436 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	695b      	ldr	r3, [r3, #20]
 800540c:	4618      	mov	r0, r3
 800540e:	f7ff fad8 	bl	80049c2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005412:	f7fe f925 	bl	8003660 <HAL_GetTick>
 8005416:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005418:	e008      	b.n	800542c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800541a:	f7fe f921 	bl	8003660 <HAL_GetTick>
 800541e:	4602      	mov	r2, r0
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	2b02      	cmp	r3, #2
 8005426:	d901      	bls.n	800542c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	e0d5      	b.n	80055d8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800542c:	f7ff fbc3 	bl	8004bb6 <LL_RCC_IsActiveFlag_C2HPRE>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d0f1      	beq.n	800541a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800543e:	2b00      	cmp	r3, #0
 8005440:	d016      	beq.n	8005470 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	699b      	ldr	r3, [r3, #24]
 8005446:	4618      	mov	r0, r3
 8005448:	f7ff fad1 	bl	80049ee <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800544c:	f7fe f908 	bl	8003660 <HAL_GetTick>
 8005450:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005452:	e008      	b.n	8005466 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005454:	f7fe f904 	bl	8003660 <HAL_GetTick>
 8005458:	4602      	mov	r2, r0
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	2b02      	cmp	r3, #2
 8005460:	d901      	bls.n	8005466 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e0b8      	b.n	80055d8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005466:	f7ff fbb9 	bl	8004bdc <LL_RCC_IsActiveFlag_SHDHPRE>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d0f1      	beq.n	8005454 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0304 	and.w	r3, r3, #4
 8005478:	2b00      	cmp	r3, #0
 800547a:	d016      	beq.n	80054aa <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	4618      	mov	r0, r3
 8005482:	f7ff facb 	bl	8004a1c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005486:	f7fe f8eb 	bl	8003660 <HAL_GetTick>
 800548a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800548c:	e008      	b.n	80054a0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800548e:	f7fe f8e7 	bl	8003660 <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	2b02      	cmp	r3, #2
 800549a:	d901      	bls.n	80054a0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e09b      	b.n	80055d8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80054a0:	f7ff fbaf 	bl	8004c02 <LL_RCC_IsActiveFlag_PPRE1>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d0f1      	beq.n	800548e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0308 	and.w	r3, r3, #8
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d017      	beq.n	80054e6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	00db      	lsls	r3, r3, #3
 80054bc:	4618      	mov	r0, r3
 80054be:	f7ff fac1 	bl	8004a44 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80054c2:	f7fe f8cd 	bl	8003660 <HAL_GetTick>
 80054c6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80054c8:	e008      	b.n	80054dc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80054ca:	f7fe f8c9 	bl	8003660 <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d901      	bls.n	80054dc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e07d      	b.n	80055d8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80054dc:	f7ff fba3 	bl	8004c26 <LL_RCC_IsActiveFlag_PPRE2>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d0f1      	beq.n	80054ca <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0301 	and.w	r3, r3, #1
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d043      	beq.n	800557a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d106      	bne.n	8005508 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80054fa:	f7ff f861 	bl	80045c0 <LL_RCC_HSE_IsReady>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d11e      	bne.n	8005542 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e067      	b.n	80055d8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	2b03      	cmp	r3, #3
 800550e:	d106      	bne.n	800551e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005510:	f7ff fafc 	bl	8004b0c <LL_RCC_PLL_IsReady>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d113      	bne.n	8005542 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e05c      	b.n	80055d8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d106      	bne.n	8005534 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005526:	f7ff f9c9 	bl	80048bc <LL_RCC_MSI_IsReady>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d108      	bne.n	8005542 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e051      	b.n	80055d8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005534:	f7ff f874 	bl	8004620 <LL_RCC_HSI_IsReady>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d101      	bne.n	8005542 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e04a      	b.n	80055d8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	4618      	mov	r0, r3
 8005548:	f7ff fa07 	bl	800495a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800554c:	f7fe f888 	bl	8003660 <HAL_GetTick>
 8005550:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005552:	e00a      	b.n	800556a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005554:	f7fe f884 	bl	8003660 <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005562:	4293      	cmp	r3, r2
 8005564:	d901      	bls.n	800556a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e036      	b.n	80055d8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800556a:	f7ff fa0a 	bl	8004982 <LL_RCC_GetSysClkSource>
 800556e:	4602      	mov	r2, r0
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	429a      	cmp	r2, r3
 8005578:	d1ec      	bne.n	8005554 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800557a:	4b19      	ldr	r3, [pc, #100]	; (80055e0 <HAL_RCC_ClockConfig+0x278>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0307 	and.w	r3, r3, #7
 8005582:	683a      	ldr	r2, [r7, #0]
 8005584:	429a      	cmp	r2, r3
 8005586:	d21b      	bcs.n	80055c0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005588:	4b15      	ldr	r3, [pc, #84]	; (80055e0 <HAL_RCC_ClockConfig+0x278>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f023 0207 	bic.w	r2, r3, #7
 8005590:	4913      	ldr	r1, [pc, #76]	; (80055e0 <HAL_RCC_ClockConfig+0x278>)
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	4313      	orrs	r3, r2
 8005596:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005598:	f7fe f862 	bl	8003660 <HAL_GetTick>
 800559c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800559e:	e008      	b.n	80055b2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80055a0:	f7fe f85e 	bl	8003660 <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d901      	bls.n	80055b2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e012      	b.n	80055d8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055b2:	4b0b      	ldr	r3, [pc, #44]	; (80055e0 <HAL_RCC_ClockConfig+0x278>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 0307 	and.w	r3, r3, #7
 80055ba:	683a      	ldr	r2, [r7, #0]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d1ef      	bne.n	80055a0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80055c0:	f000 f87e 	bl	80056c0 <HAL_RCC_GetHCLKFreq>
 80055c4:	4603      	mov	r3, r0
 80055c6:	4a07      	ldr	r2, [pc, #28]	; (80055e4 <HAL_RCC_ClockConfig+0x27c>)
 80055c8:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80055ca:	f7fe f855 	bl	8003678 <HAL_GetTickPrio>
 80055ce:	4603      	mov	r3, r0
 80055d0:	4618      	mov	r0, r3
 80055d2:	f7fd fff7 	bl	80035c4 <HAL_InitTick>
 80055d6:	4603      	mov	r3, r0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3710      	adds	r7, #16
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	58004000 	.word	0x58004000
 80055e4:	20000020 	.word	0x20000020

080055e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055e8:	b590      	push	{r4, r7, lr}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055ee:	f7ff f9c8 	bl	8004982 <LL_RCC_GetSysClkSource>
 80055f2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d10a      	bne.n	8005610 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80055fa:	f7ff f984 	bl	8004906 <LL_RCC_MSI_GetRange>
 80055fe:	4603      	mov	r3, r0
 8005600:	091b      	lsrs	r3, r3, #4
 8005602:	f003 030f 	and.w	r3, r3, #15
 8005606:	4a2b      	ldr	r2, [pc, #172]	; (80056b4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800560c:	60fb      	str	r3, [r7, #12]
 800560e:	e04b      	b.n	80056a8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b04      	cmp	r3, #4
 8005614:	d102      	bne.n	800561c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005616:	4b28      	ldr	r3, [pc, #160]	; (80056b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005618:	60fb      	str	r3, [r7, #12]
 800561a:	e045      	b.n	80056a8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2b08      	cmp	r3, #8
 8005620:	d10a      	bne.n	8005638 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005622:	f7fe ff9d 	bl	8004560 <LL_RCC_HSE_IsEnabledDiv2>
 8005626:	4603      	mov	r3, r0
 8005628:	2b01      	cmp	r3, #1
 800562a:	d102      	bne.n	8005632 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800562c:	4b22      	ldr	r3, [pc, #136]	; (80056b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800562e:	60fb      	str	r3, [r7, #12]
 8005630:	e03a      	b.n	80056a8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005632:	4b22      	ldr	r3, [pc, #136]	; (80056bc <HAL_RCC_GetSysClockFreq+0xd4>)
 8005634:	60fb      	str	r3, [r7, #12]
 8005636:	e037      	b.n	80056a8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005638:	f7ff fa9f 	bl	8004b7a <LL_RCC_PLL_GetMainSource>
 800563c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	2b02      	cmp	r3, #2
 8005642:	d003      	beq.n	800564c <HAL_RCC_GetSysClockFreq+0x64>
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	2b03      	cmp	r3, #3
 8005648:	d003      	beq.n	8005652 <HAL_RCC_GetSysClockFreq+0x6a>
 800564a:	e00d      	b.n	8005668 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800564c:	4b1a      	ldr	r3, [pc, #104]	; (80056b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800564e:	60bb      	str	r3, [r7, #8]
        break;
 8005650:	e015      	b.n	800567e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005652:	f7fe ff85 	bl	8004560 <LL_RCC_HSE_IsEnabledDiv2>
 8005656:	4603      	mov	r3, r0
 8005658:	2b01      	cmp	r3, #1
 800565a:	d102      	bne.n	8005662 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800565c:	4b16      	ldr	r3, [pc, #88]	; (80056b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800565e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005660:	e00d      	b.n	800567e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005662:	4b16      	ldr	r3, [pc, #88]	; (80056bc <HAL_RCC_GetSysClockFreq+0xd4>)
 8005664:	60bb      	str	r3, [r7, #8]
        break;
 8005666:	e00a      	b.n	800567e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005668:	f7ff f94d 	bl	8004906 <LL_RCC_MSI_GetRange>
 800566c:	4603      	mov	r3, r0
 800566e:	091b      	lsrs	r3, r3, #4
 8005670:	f003 030f 	and.w	r3, r3, #15
 8005674:	4a0f      	ldr	r2, [pc, #60]	; (80056b4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800567a:	60bb      	str	r3, [r7, #8]
        break;
 800567c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 800567e:	f7ff fa57 	bl	8004b30 <LL_RCC_PLL_GetN>
 8005682:	4602      	mov	r2, r0
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	fb03 f402 	mul.w	r4, r3, r2
 800568a:	f7ff fa6a 	bl	8004b62 <LL_RCC_PLL_GetDivider>
 800568e:	4603      	mov	r3, r0
 8005690:	091b      	lsrs	r3, r3, #4
 8005692:	3301      	adds	r3, #1
 8005694:	fbb4 f4f3 	udiv	r4, r4, r3
 8005698:	f7ff fa57 	bl	8004b4a <LL_RCC_PLL_GetR>
 800569c:	4603      	mov	r3, r0
 800569e:	0f5b      	lsrs	r3, r3, #29
 80056a0:	3301      	adds	r3, #1
 80056a2:	fbb4 f3f3 	udiv	r3, r4, r3
 80056a6:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 80056a8:	68fb      	ldr	r3, [r7, #12]
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3714      	adds	r7, #20
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd90      	pop	{r4, r7, pc}
 80056b2:	bf00      	nop
 80056b4:	0800c248 	.word	0x0800c248
 80056b8:	00f42400 	.word	0x00f42400
 80056bc:	01e84800 	.word	0x01e84800

080056c0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056c0:	b598      	push	{r3, r4, r7, lr}
 80056c2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80056c4:	f7ff ff90 	bl	80055e8 <HAL_RCC_GetSysClockFreq>
 80056c8:	4604      	mov	r4, r0
 80056ca:	f7ff f9cf 	bl	8004a6c <LL_RCC_GetAHBPrescaler>
 80056ce:	4603      	mov	r3, r0
 80056d0:	091b      	lsrs	r3, r3, #4
 80056d2:	f003 030f 	and.w	r3, r3, #15
 80056d6:	4a03      	ldr	r2, [pc, #12]	; (80056e4 <HAL_RCC_GetHCLKFreq+0x24>)
 80056d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056dc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	bd98      	pop	{r3, r4, r7, pc}
 80056e4:	0800c1e8 	.word	0x0800c1e8

080056e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056e8:	b598      	push	{r3, r4, r7, lr}
 80056ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80056ec:	f7ff ffe8 	bl	80056c0 <HAL_RCC_GetHCLKFreq>
 80056f0:	4604      	mov	r4, r0
 80056f2:	f7ff f9d5 	bl	8004aa0 <LL_RCC_GetAPB1Prescaler>
 80056f6:	4603      	mov	r3, r0
 80056f8:	0a1b      	lsrs	r3, r3, #8
 80056fa:	f003 0307 	and.w	r3, r3, #7
 80056fe:	4a04      	ldr	r2, [pc, #16]	; (8005710 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005704:	f003 031f 	and.w	r3, r3, #31
 8005708:	fa24 f303 	lsr.w	r3, r4, r3
}
 800570c:	4618      	mov	r0, r3
 800570e:	bd98      	pop	{r3, r4, r7, pc}
 8005710:	0800c228 	.word	0x0800c228

08005714 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005714:	b598      	push	{r3, r4, r7, lr}
 8005716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005718:	f7ff ffd2 	bl	80056c0 <HAL_RCC_GetHCLKFreq>
 800571c:	4604      	mov	r4, r0
 800571e:	f7ff f9cb 	bl	8004ab8 <LL_RCC_GetAPB2Prescaler>
 8005722:	4603      	mov	r3, r0
 8005724:	0adb      	lsrs	r3, r3, #11
 8005726:	f003 0307 	and.w	r3, r3, #7
 800572a:	4a04      	ldr	r2, [pc, #16]	; (800573c <HAL_RCC_GetPCLK2Freq+0x28>)
 800572c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005730:	f003 031f 	and.w	r3, r3, #31
 8005734:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005738:	4618      	mov	r0, r3
 800573a:	bd98      	pop	{r3, r4, r7, pc}
 800573c:	0800c228 	.word	0x0800c228

08005740 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005740:	b590      	push	{r4, r7, lr}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2bb0      	cmp	r3, #176	; 0xb0
 800574c:	d903      	bls.n	8005756 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800574e:	4b15      	ldr	r3, [pc, #84]	; (80057a4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005752:	60fb      	str	r3, [r7, #12]
 8005754:	e007      	b.n	8005766 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	091b      	lsrs	r3, r3, #4
 800575a:	f003 030f 	and.w	r3, r3, #15
 800575e:	4a11      	ldr	r2, [pc, #68]	; (80057a4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005764:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005766:	f7ff f98d 	bl	8004a84 <LL_RCC_GetAHB4Prescaler>
 800576a:	4603      	mov	r3, r0
 800576c:	091b      	lsrs	r3, r3, #4
 800576e:	f003 030f 	and.w	r3, r3, #15
 8005772:	4a0d      	ldr	r2, [pc, #52]	; (80057a8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	fbb2 f3f3 	udiv	r3, r2, r3
 800577e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	4a0a      	ldr	r2, [pc, #40]	; (80057ac <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005784:	fba2 2303 	umull	r2, r3, r2, r3
 8005788:	0c9c      	lsrs	r4, r3, #18
 800578a:	f7fe fedb 	bl	8004544 <HAL_PWREx_GetVoltageRange>
 800578e:	4603      	mov	r3, r0
 8005790:	4619      	mov	r1, r3
 8005792:	4620      	mov	r0, r4
 8005794:	f000 f80c 	bl	80057b0 <RCC_SetFlashLatency>
 8005798:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 800579a:	4618      	mov	r0, r3
 800579c:	3714      	adds	r7, #20
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd90      	pop	{r4, r7, pc}
 80057a2:	bf00      	nop
 80057a4:	0800c248 	.word	0x0800c248
 80057a8:	0800c1e8 	.word	0x0800c1e8
 80057ac:	431bde83 	.word	0x431bde83

080057b0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80057b0:	b590      	push	{r4, r7, lr}
 80057b2:	b093      	sub	sp, #76	; 0x4c
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80057ba:	4b37      	ldr	r3, [pc, #220]	; (8005898 <RCC_SetFlashLatency+0xe8>)
 80057bc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80057c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80057c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80057c6:	4a35      	ldr	r2, [pc, #212]	; (800589c <RCC_SetFlashLatency+0xec>)
 80057c8:	f107 031c 	add.w	r3, r7, #28
 80057cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80057ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80057d2:	4b33      	ldr	r3, [pc, #204]	; (80058a0 <RCC_SetFlashLatency+0xf0>)
 80057d4:	f107 040c 	add.w	r4, r7, #12
 80057d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80057da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80057de:	2300      	movs	r3, #0
 80057e0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057e8:	d11a      	bne.n	8005820 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80057ea:	2300      	movs	r3, #0
 80057ec:	643b      	str	r3, [r7, #64]	; 0x40
 80057ee:	e013      	b.n	8005818 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80057f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	3348      	adds	r3, #72	; 0x48
 80057f6:	443b      	add	r3, r7
 80057f8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	429a      	cmp	r2, r3
 8005800:	d807      	bhi.n	8005812 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005802:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	3348      	adds	r3, #72	; 0x48
 8005808:	443b      	add	r3, r7
 800580a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800580e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005810:	e020      	b.n	8005854 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005812:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005814:	3301      	adds	r3, #1
 8005816:	643b      	str	r3, [r7, #64]	; 0x40
 8005818:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800581a:	2b03      	cmp	r3, #3
 800581c:	d9e8      	bls.n	80057f0 <RCC_SetFlashLatency+0x40>
 800581e:	e019      	b.n	8005854 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005820:	2300      	movs	r3, #0
 8005822:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005824:	e013      	b.n	800584e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	3348      	adds	r3, #72	; 0x48
 800582c:	443b      	add	r3, r7
 800582e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	429a      	cmp	r2, r3
 8005836:	d807      	bhi.n	8005848 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	3348      	adds	r3, #72	; 0x48
 800583e:	443b      	add	r3, r7
 8005840:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005844:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005846:	e005      	b.n	8005854 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800584a:	3301      	adds	r3, #1
 800584c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800584e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005850:	2b02      	cmp	r3, #2
 8005852:	d9e8      	bls.n	8005826 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8005854:	4b13      	ldr	r3, [pc, #76]	; (80058a4 <RCC_SetFlashLatency+0xf4>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f023 0207 	bic.w	r2, r3, #7
 800585c:	4911      	ldr	r1, [pc, #68]	; (80058a4 <RCC_SetFlashLatency+0xf4>)
 800585e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005860:	4313      	orrs	r3, r2
 8005862:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005864:	f7fd fefc 	bl	8003660 <HAL_GetTick>
 8005868:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800586a:	e008      	b.n	800587e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800586c:	f7fd fef8 	bl	8003660 <HAL_GetTick>
 8005870:	4602      	mov	r2, r0
 8005872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	2b02      	cmp	r3, #2
 8005878:	d901      	bls.n	800587e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	e007      	b.n	800588e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800587e:	4b09      	ldr	r3, [pc, #36]	; (80058a4 <RCC_SetFlashLatency+0xf4>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 0307 	and.w	r3, r3, #7
 8005886:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005888:	429a      	cmp	r2, r3
 800588a:	d1ef      	bne.n	800586c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800588c:	2300      	movs	r3, #0
}
 800588e:	4618      	mov	r0, r3
 8005890:	374c      	adds	r7, #76	; 0x4c
 8005892:	46bd      	mov	sp, r7
 8005894:	bd90      	pop	{r4, r7, pc}
 8005896:	bf00      	nop
 8005898:	0800c064 	.word	0x0800c064
 800589c:	0800c074 	.word	0x0800c074
 80058a0:	0800c080 	.word	0x0800c080
 80058a4:	58004000 	.word	0x58004000

080058a8 <LL_RCC_LSE_IsEnabled>:
{
 80058a8:	b480      	push	{r7}
 80058aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80058ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058b4:	f003 0301 	and.w	r3, r3, #1
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d101      	bne.n	80058c0 <LL_RCC_LSE_IsEnabled+0x18>
 80058bc:	2301      	movs	r3, #1
 80058be:	e000      	b.n	80058c2 <LL_RCC_LSE_IsEnabled+0x1a>
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <LL_RCC_LSE_IsReady>:
{
 80058cc:	b480      	push	{r7}
 80058ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80058d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058d8:	f003 0302 	and.w	r3, r3, #2
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d101      	bne.n	80058e4 <LL_RCC_LSE_IsReady+0x18>
 80058e0:	2301      	movs	r3, #1
 80058e2:	e000      	b.n	80058e6 <LL_RCC_LSE_IsReady+0x1a>
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <LL_RCC_SetRFWKPClockSource>:
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80058f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005900:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005904:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4313      	orrs	r3, r2
 800590c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <LL_RCC_SetSMPSClockSource>:
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005924:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592a:	f023 0203 	bic.w	r2, r3, #3
 800592e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4313      	orrs	r3, r2
 8005936:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005938:	bf00      	nop
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <LL_RCC_SetSMPSPrescaler>:
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800594c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005952:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005956:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4313      	orrs	r3, r2
 800595e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <LL_RCC_SetUSARTClockSource>:
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800597c:	f023 0203 	bic.w	r2, r3, #3
 8005980:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4313      	orrs	r3, r2
 8005988:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800598c:	bf00      	nop
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <LL_RCC_SetLPUARTClockSource>:
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80059a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80059ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80059b8:	bf00      	nop
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <LL_RCC_SetI2CClockSource>:
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80059cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059d0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	091b      	lsrs	r3, r3, #4
 80059d8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80059dc:	43db      	mvns	r3, r3
 80059de:	401a      	ands	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	011b      	lsls	r3, r3, #4
 80059e4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80059e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059ec:	4313      	orrs	r3, r2
 80059ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80059f2:	bf00      	nop
 80059f4:	370c      	adds	r7, #12
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr

080059fe <LL_RCC_SetLPTIMClockSource>:
{
 80059fe:	b480      	push	{r7}
 8005a00:	b083      	sub	sp, #12
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005a06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a0a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	0c1b      	lsrs	r3, r3, #16
 8005a12:	041b      	lsls	r3, r3, #16
 8005a14:	43db      	mvns	r3, r3
 8005a16:	401a      	ands	r2, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	041b      	lsls	r3, r3, #16
 8005a1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a20:	4313      	orrs	r3, r2
 8005a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005a26:	bf00      	nop
 8005a28:	370c      	adds	r7, #12
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr

08005a32 <LL_RCC_SetSAIClockSource>:
{
 8005a32:	b480      	push	{r7}
 8005a34:	b083      	sub	sp, #12
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005a3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a42:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005a52:	bf00      	nop
 8005a54:	370c      	adds	r7, #12
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr

08005a5e <LL_RCC_SetRNGClockSource>:
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b083      	sub	sp, #12
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005a66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a6e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005a72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005a7e:	bf00      	nop
 8005a80:	370c      	adds	r7, #12
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr

08005a8a <LL_RCC_SetCLK48ClockSource>:
{
 8005a8a:	b480      	push	{r7}
 8005a8c:	b083      	sub	sp, #12
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005a92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005aaa:	bf00      	nop
 8005aac:	370c      	adds	r7, #12
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr

08005ab6 <LL_RCC_SetUSBClockSource>:
{
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b082      	sub	sp, #8
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f7ff ffe3 	bl	8005a8a <LL_RCC_SetCLK48ClockSource>
}
 8005ac4:	bf00      	nop
 8005ac6:	3708      	adds	r7, #8
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <LL_RCC_SetADCClockSource>:
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005ad4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005adc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005ae0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005aec:	bf00      	nop
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <LL_RCC_SetRTCClockSource>:
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005b00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005b18:	bf00      	nop
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <LL_RCC_GetRTCClockSource>:
{
 8005b24:	b480      	push	{r7}
 8005b26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005b28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b30:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr

08005b3e <LL_RCC_ForceBackupDomainReset>:
{
 8005b3e:	b480      	push	{r7}
 8005b40:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005b56:	bf00      	nop
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005b60:	b480      	push	{r7}
 8005b62:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005b64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005b78:	bf00      	nop
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr

08005b82 <LL_RCC_PLLSAI1_Enable>:
{
 8005b82:	b480      	push	{r7}
 8005b84:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b94:	6013      	str	r3, [r2, #0]
}
 8005b96:	bf00      	nop
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <LL_RCC_PLLSAI1_Disable>:
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005ba4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005bb2:	6013      	str	r3, [r2, #0]
}
 8005bb4:	bf00      	nop
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr

08005bbe <LL_RCC_PLLSAI1_IsReady>:
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bd0:	d101      	bne.n	8005bd6 <LL_RCC_PLLSAI1_IsReady+0x18>
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e000      	b.n	8005bd8 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr

08005be2 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005be2:	b580      	push	{r7, lr}
 8005be4:	b088      	sub	sp, #32
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005bea:	2300      	movs	r3, #0
 8005bec:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005bee:	2300      	movs	r3, #0
 8005bf0:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d034      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c02:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005c06:	d021      	beq.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005c08:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005c0c:	d81b      	bhi.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005c0e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c12:	d01d      	beq.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005c14:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005c18:	d815      	bhi.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00b      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005c1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c22:	d110      	bne.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c32:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005c34:	e00d      	b.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	3304      	adds	r3, #4
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f000 f947 	bl	8005ece <RCCEx_PLLSAI1_ConfigNP>
 8005c40:	4603      	mov	r3, r0
 8005c42:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005c44:	e005      	b.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	77fb      	strb	r3, [r7, #31]
        break;
 8005c4a:	e002      	b.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005c4c:	bf00      	nop
 8005c4e:	e000      	b.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005c50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c52:	7ffb      	ldrb	r3, [r7, #31]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d105      	bne.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f7ff fee8 	bl	8005a32 <LL_RCC_SetSAIClockSource>
 8005c62:	e001      	b.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c64:	7ffb      	ldrb	r3, [r7, #31]
 8005c66:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d046      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005c74:	f7ff ff56 	bl	8005b24 <LL_RCC_GetRTCClockSource>
 8005c78:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7e:	69ba      	ldr	r2, [r7, #24]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d03c      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005c84:	f7fe fc4e 	bl	8004524 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d105      	bne.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c92:	4618      	mov	r0, r3
 8005c94:	f7ff ff30 	bl	8005af8 <LL_RCC_SetRTCClockSource>
 8005c98:	e02e      	b.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ca2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005ca4:	f7ff ff4b 	bl	8005b3e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005ca8:	f7ff ff5a 	bl	8005b60 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005cba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005cc4:	f7ff fdf0 	bl	80058a8 <LL_RCC_LSE_IsEnabled>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d114      	bne.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005cce:	f7fd fcc7 	bl	8003660 <HAL_GetTick>
 8005cd2:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005cd4:	e00b      	b.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cd6:	f7fd fcc3 	bl	8003660 <HAL_GetTick>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d902      	bls.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	77fb      	strb	r3, [r7, #31]
              break;
 8005cec:	e004      	b.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005cee:	f7ff fded 	bl	80058cc <LL_RCC_LSE_IsReady>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d1ee      	bne.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005cf8:	7ffb      	ldrb	r3, [r7, #31]
 8005cfa:	77bb      	strb	r3, [r7, #30]
 8005cfc:	e001      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cfe:	7ffb      	ldrb	r3, [r7, #31]
 8005d00:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d004      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	699b      	ldr	r3, [r3, #24]
 8005d12:	4618      	mov	r0, r3
 8005d14:	f7ff fe2a 	bl	800596c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0302 	and.w	r3, r3, #2
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d004      	beq.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	69db      	ldr	r3, [r3, #28]
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f7ff fe35 	bl	8005998 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 0310 	and.w	r3, r3, #16
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d004      	beq.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f7ff fe5d 	bl	80059fe <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0320 	and.w	r3, r3, #32
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d004      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d54:	4618      	mov	r0, r3
 8005d56:	f7ff fe52 	bl	80059fe <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0304 	and.w	r3, r3, #4
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d004      	beq.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7ff fe2a 	bl	80059c4 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 0308 	and.w	r3, r3, #8
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d004      	beq.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d80:	4618      	mov	r0, r3
 8005d82:	f7ff fe1f 	bl	80059c4 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d022      	beq.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7ff fe8d 	bl	8005ab6 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005da0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005da4:	d107      	bne.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005da6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005db0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005db4:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005dbe:	d10b      	bne.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	3304      	adds	r3, #4
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f000 f8dd 	bl	8005f84 <RCCEx_PLLSAI1_ConfigNQ>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8005dce:	7ffb      	ldrb	r3, [r7, #31]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d001      	beq.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8005dd4:	7ffb      	ldrb	r3, [r7, #31]
 8005dd6:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d02b      	beq.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dec:	d008      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005df6:	d003      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d105      	bne.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e04:	4618      	mov	r0, r3
 8005e06:	f7ff fe2a 	bl	8005a5e <LL_RCC_SetRNGClockSource>
 8005e0a:	e00a      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e14:	60fb      	str	r3, [r7, #12]
 8005e16:	2000      	movs	r0, #0
 8005e18:	f7ff fe21 	bl	8005a5e <LL_RCC_SetRNGClockSource>
 8005e1c:	68f8      	ldr	r0, [r7, #12]
 8005e1e:	f7ff fe34 	bl	8005a8a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e26:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005e2a:	d107      	bne.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005e2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e3a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d022      	beq.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f7ff fe3d 	bl	8005acc <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e5a:	d107      	bne.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e6a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e74:	d10b      	bne.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	3304      	adds	r3, #4
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f000 f8dd 	bl	800603a <RCCEx_PLLSAI1_ConfigNR>
 8005e80:	4603      	mov	r3, r0
 8005e82:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8005e84:	7ffb      	ldrb	r3, [r7, #31]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d001      	beq.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 8005e8a:	7ffb      	ldrb	r3, [r7, #31]
 8005e8c:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d004      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f7ff fd26 	bl	80058f0 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d009      	beq.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f7ff fd45 	bl	8005944 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f7ff fd2c 	bl	800591c <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8005ec4:	7fbb      	ldrb	r3, [r7, #30]
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3720      	adds	r7, #32
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}

08005ece <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005ece:	b580      	push	{r7, lr}
 8005ed0:	b084      	sub	sp, #16
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005eda:	f7ff fe61 	bl	8005ba0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005ede:	f7fd fbbf 	bl	8003660 <HAL_GetTick>
 8005ee2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005ee4:	e009      	b.n	8005efa <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ee6:	f7fd fbbb 	bl	8003660 <HAL_GetTick>
 8005eea:	4602      	mov	r2, r0
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	1ad3      	subs	r3, r2, r3
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d902      	bls.n	8005efa <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ef8:	e004      	b.n	8005f04 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005efa:	f7ff fe60 	bl	8005bbe <LL_RCC_PLLSAI1_IsReady>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d1f0      	bne.n	8005ee6 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005f04:	7bfb      	ldrb	r3, [r7, #15]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d137      	bne.n	8005f7a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005f0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	021b      	lsls	r3, r3, #8
 8005f1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f34:	4313      	orrs	r3, r2
 8005f36:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005f38:	f7ff fe23 	bl	8005b82 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f3c:	f7fd fb90 	bl	8003660 <HAL_GetTick>
 8005f40:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005f42:	e009      	b.n	8005f58 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f44:	f7fd fb8c 	bl	8003660 <HAL_GetTick>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	d902      	bls.n	8005f58 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	73fb      	strb	r3, [r7, #15]
        break;
 8005f56:	e004      	b.n	8005f62 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005f58:	f7ff fe31 	bl	8005bbe <LL_RCC_PLLSAI1_IsReady>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d1f0      	bne.n	8005f44 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005f62:	7bfb      	ldrb	r3, [r7, #15]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d108      	bne.n	8005f7a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f6c:	691a      	ldr	r2, [r3, #16]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f76:	4313      	orrs	r3, r2
 8005f78:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3710      	adds	r7, #16
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005f90:	f7ff fe06 	bl	8005ba0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005f94:	f7fd fb64 	bl	8003660 <HAL_GetTick>
 8005f98:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005f9a:	e009      	b.n	8005fb0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f9c:	f7fd fb60 	bl	8003660 <HAL_GetTick>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d902      	bls.n	8005fb0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	73fb      	strb	r3, [r7, #15]
      break;
 8005fae:	e004      	b.n	8005fba <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005fb0:	f7ff fe05 	bl	8005bbe <LL_RCC_PLLSAI1_IsReady>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1f0      	bne.n	8005f9c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005fba:	7bfb      	ldrb	r3, [r7, #15]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d137      	bne.n	8006030 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	021b      	lsls	r3, r3, #8
 8005fd0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005fd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fea:	4313      	orrs	r3, r2
 8005fec:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005fee:	f7ff fdc8 	bl	8005b82 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ff2:	f7fd fb35 	bl	8003660 <HAL_GetTick>
 8005ff6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005ff8:	e009      	b.n	800600e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ffa:	f7fd fb31 	bl	8003660 <HAL_GetTick>
 8005ffe:	4602      	mov	r2, r0
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	2b02      	cmp	r3, #2
 8006006:	d902      	bls.n	800600e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8006008:	2303      	movs	r3, #3
 800600a:	73fb      	strb	r3, [r7, #15]
        break;
 800600c:	e004      	b.n	8006018 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800600e:	f7ff fdd6 	bl	8005bbe <LL_RCC_PLLSAI1_IsReady>
 8006012:	4603      	mov	r3, r0
 8006014:	2b01      	cmp	r3, #1
 8006016:	d1f0      	bne.n	8005ffa <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8006018:	7bfb      	ldrb	r3, [r7, #15]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d108      	bne.n	8006030 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800601e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006022:	691a      	ldr	r2, [r3, #16]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800602c:	4313      	orrs	r3, r2
 800602e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006030:	7bfb      	ldrb	r3, [r7, #15]
}
 8006032:	4618      	mov	r0, r3
 8006034:	3710      	adds	r7, #16
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}

0800603a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800603a:	b580      	push	{r7, lr}
 800603c:	b084      	sub	sp, #16
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006042:	2300      	movs	r3, #0
 8006044:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006046:	f7ff fdab 	bl	8005ba0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800604a:	f7fd fb09 	bl	8003660 <HAL_GetTick>
 800604e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006050:	e009      	b.n	8006066 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006052:	f7fd fb05 	bl	8003660 <HAL_GetTick>
 8006056:	4602      	mov	r2, r0
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	2b02      	cmp	r3, #2
 800605e:	d902      	bls.n	8006066 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8006060:	2303      	movs	r3, #3
 8006062:	73fb      	strb	r3, [r7, #15]
      break;
 8006064:	e004      	b.n	8006070 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006066:	f7ff fdaa 	bl	8005bbe <LL_RCC_PLLSAI1_IsReady>
 800606a:	4603      	mov	r3, r0
 800606c:	2b00      	cmp	r3, #0
 800606e:	d1f0      	bne.n	8006052 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8006070:	7bfb      	ldrb	r3, [r7, #15]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d137      	bne.n	80060e6 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	021b      	lsls	r3, r3, #8
 8006086:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800608a:	4313      	orrs	r3, r2
 800608c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800608e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006092:	691b      	ldr	r3, [r3, #16]
 8006094:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060a0:	4313      	orrs	r3, r2
 80060a2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80060a4:	f7ff fd6d 	bl	8005b82 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060a8:	f7fd fada 	bl	8003660 <HAL_GetTick>
 80060ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80060ae:	e009      	b.n	80060c4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80060b0:	f7fd fad6 	bl	8003660 <HAL_GetTick>
 80060b4:	4602      	mov	r2, r0
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d902      	bls.n	80060c4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	73fb      	strb	r3, [r7, #15]
        break;
 80060c2:	e004      	b.n	80060ce <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80060c4:	f7ff fd7b 	bl	8005bbe <LL_RCC_PLLSAI1_IsReady>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d1f0      	bne.n	80060b0 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80060ce:	7bfb      	ldrb	r3, [r7, #15]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d108      	bne.n	80060e6 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80060d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060d8:	691a      	ldr	r2, [r3, #16]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060e2:	4313      	orrs	r3, r2
 80060e4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80060e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3710      	adds	r7, #16
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d101      	bne.n	8006102 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e027      	b.n	8006152 <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	7a5b      	ldrb	r3, [r3, #9]
 8006106:	b2db      	uxtb	r3, r3
 8006108:	2b00      	cmp	r3, #0
 800610a:	d105      	bne.n	8006118 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f7fc f90c 	bl	8002330 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2202      	movs	r2, #2
 800611c:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f023 0120 	bic.w	r1, r3, #32
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	685a      	ldr	r2, [r3, #4]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	430a      	orrs	r2, r1
 8006132:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f042 0204 	orr.w	r2, r2, #4
 8006142:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	3708      	adds	r7, #8
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}

0800615a <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800615a:	b580      	push	{r7, lr}
 800615c:	b082      	sub	sp, #8
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d101      	bne.n	800616c <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	e090      	b.n	800628e <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006172:	b2db      	uxtb	r3, r3
 8006174:	2b00      	cmp	r3, #0
 8006176:	d106      	bne.n	8006186 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f7fc f8ff 	bl	8002384 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2202      	movs	r2, #2
 800618a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	22ca      	movs	r2, #202	; 0xca
 8006194:	625a      	str	r2, [r3, #36]	; 0x24
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	2253      	movs	r2, #83	; 0x53
 800619c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 f89f 	bl	80062e2 <RTC_EnterInitMode>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d009      	beq.n	80061be <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	22ff      	movs	r2, #255	; 0xff
 80061b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2204      	movs	r2, #4
 80061b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e067      	b.n	800628e <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	6812      	ldr	r2, [r2, #0]
 80061c8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80061cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061d0:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	6899      	ldr	r1, [r3, #8]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	685a      	ldr	r2, [r3, #4]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	691b      	ldr	r3, [r3, #16]
 80061e0:	431a      	orrs	r2, r3
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	431a      	orrs	r2, r3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	430a      	orrs	r2, r1
 80061ee:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	68d2      	ldr	r2, [r2, #12]
 80061f8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	6919      	ldr	r1, [r3, #16]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	041a      	lsls	r2, r3, #16
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	430a      	orrs	r2, r1
 800620c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	68da      	ldr	r2, [r3, #12]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800621c:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f022 0203 	bic.w	r2, r2, #3
 800622c:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	69da      	ldr	r2, [r3, #28]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	695b      	ldr	r3, [r3, #20]
 800623c:	431a      	orrs	r2, r3
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	430a      	orrs	r2, r1
 8006244:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	f003 0320 	and.w	r3, r3, #32
 8006250:	2b00      	cmp	r3, #0
 8006252:	d113      	bne.n	800627c <HAL_RTC_Init+0x122>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 f81e 	bl	8006296 <HAL_RTC_WaitForSynchro>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00d      	beq.n	800627c <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	22ff      	movs	r2, #255	; 0xff
 8006266:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2204      	movs	r2, #4
 800626c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	e008      	b.n	800628e <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	22ff      	movs	r2, #255	; 0xff
 8006282:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 800628c:	2300      	movs	r3, #0
  }
}
 800628e:	4618      	mov	r0, r3
 8006290:	3708      	adds	r7, #8
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}

08006296 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006296:	b580      	push	{r7, lr}
 8006298:	b084      	sub	sp, #16
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68da      	ldr	r2, [r3, #12]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80062ac:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80062ae:	f7fd f9d7 	bl	8003660 <HAL_GetTick>
 80062b2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80062b4:	e009      	b.n	80062ca <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80062b6:	f7fd f9d3 	bl	8003660 <HAL_GetTick>
 80062ba:	4602      	mov	r2, r0
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	1ad3      	subs	r3, r2, r3
 80062c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062c4:	d901      	bls.n	80062ca <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80062c6:	2303      	movs	r3, #3
 80062c8:	e007      	b.n	80062da <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	f003 0320 	and.w	r3, r3, #32
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d0ee      	beq.n	80062b6 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3710      	adds	r7, #16
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b084      	sub	sp, #16
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d119      	bne.n	800632c <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006300:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006302:	f7fd f9ad 	bl	8003660 <HAL_GetTick>
 8006306:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006308:	e009      	b.n	800631e <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800630a:	f7fd f9a9 	bl	8003660 <HAL_GetTick>
 800630e:	4602      	mov	r2, r0
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	1ad3      	subs	r3, r2, r3
 8006314:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006318:	d901      	bls.n	800631e <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	e007      	b.n	800632e <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006328:	2b00      	cmp	r3, #0
 800632a:	d0ee      	beq.n	800630a <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3710      	adds	r7, #16
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
	...

08006338 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b086      	sub	sp, #24
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f893 3020 	ldrb.w	r3, [r3, #32]
 800634a:	2b01      	cmp	r3, #1
 800634c:	d101      	bne.n	8006352 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800634e:	2302      	movs	r3, #2
 8006350:	e0a8      	b.n	80064a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2201      	movs	r2, #1
 8006356:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2202      	movs	r2, #2
 800635e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	22ca      	movs	r2, #202	; 0xca
 8006368:	625a      	str	r2, [r3, #36]	; 0x24
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2253      	movs	r2, #83	; 0x53
 8006370:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800637c:	2b00      	cmp	r3, #0
 800637e:	d020      	beq.n	80063c2 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8006380:	f7fd f96e 	bl	8003660 <HAL_GetTick>
 8006384:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006386:	e015      	b.n	80063b4 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006388:	f7fd f96a 	bl	8003660 <HAL_GetTick>
 800638c:	4602      	mov	r2, r0
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	1ad3      	subs	r3, r2, r3
 8006392:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006396:	d90d      	bls.n	80063b4 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	22ff      	movs	r2, #255	; 0xff
 800639e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2203      	movs	r2, #3
 80063a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80063b0:	2303      	movs	r3, #3
 80063b2:	e077      	b.n	80064a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	f003 0304 	and.w	r3, r3, #4
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1e2      	bne.n	8006388 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	689a      	ldr	r2, [r3, #8]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063d0:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	b2da      	uxtb	r2, r3
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80063e2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80063e4:	f7fd f93c 	bl	8003660 <HAL_GetTick>
 80063e8:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80063ea:	e015      	b.n	8006418 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80063ec:	f7fd f938 	bl	8003660 <HAL_GetTick>
 80063f0:	4602      	mov	r2, r0
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063fa:	d90d      	bls.n	8006418 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	22ff      	movs	r2, #255	; 0xff
 8006402:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2203      	movs	r2, #3
 8006408:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2200      	movs	r2, #0
 8006410:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8006414:	2303      	movs	r3, #3
 8006416:	e045      	b.n	80064a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	f003 0304 	and.w	r3, r3, #4
 8006422:	2b00      	cmp	r3, #0
 8006424:	d0e2      	beq.n	80063ec <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68ba      	ldr	r2, [r7, #8]
 800642c:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	689a      	ldr	r2, [r3, #8]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f022 0207 	bic.w	r2, r2, #7
 800643c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	6899      	ldr	r1, [r3, #8]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	430a      	orrs	r2, r1
 800644c:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800644e:	4b17      	ldr	r3, [pc, #92]	; (80064ac <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006450:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006454:	4a15      	ldr	r2, [pc, #84]	; (80064ac <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006456:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800645a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800645e:	4b13      	ldr	r3, [pc, #76]	; (80064ac <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a12      	ldr	r2, [pc, #72]	; (80064ac <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006464:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006468:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	689a      	ldr	r2, [r3, #8]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006478:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	689a      	ldr	r2, [r3, #8]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006488:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	22ff      	movs	r2, #255	; 0xff
 8006490:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2201      	movs	r2, #1
 8006496:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2200      	movs	r2, #0
 800649e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80064a2:	2300      	movs	r3, #0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3718      	adds	r7, #24
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	58000800 	.word	0x58000800

080064b0 <LL_RCC_GetUSARTClockSource>:
{
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80064b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064bc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4013      	ands	r3, r2
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	370c      	adds	r7, #12
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr

080064d0 <LL_RCC_GetLPUARTClockSource>:
{
 80064d0:	b480      	push	{r7}
 80064d2:	b083      	sub	sp, #12
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80064d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4013      	ands	r3, r2
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	370c      	adds	r7, #12
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b082      	sub	sp, #8
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d101      	bne.n	8006502 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	e042      	b.n	8006588 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006508:	2b00      	cmp	r3, #0
 800650a:	d106      	bne.n	800651a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f7fb fe17 	bl	8002148 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2224      	movs	r2, #36	; 0x24
 800651e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f022 0201 	bic.w	r2, r2, #1
 8006530:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 fbf6 	bl	8006d24 <UART_SetConfig>
 8006538:	4603      	mov	r3, r0
 800653a:	2b01      	cmp	r3, #1
 800653c:	d101      	bne.n	8006542 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	e022      	b.n	8006588 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006546:	2b00      	cmp	r3, #0
 8006548:	d002      	beq.n	8006550 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 fe12 	bl	8007174 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	685a      	ldr	r2, [r3, #4]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800655e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	689a      	ldr	r2, [r3, #8]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800656e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f042 0201 	orr.w	r2, r2, #1
 800657e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 fe99 	bl	80072b8 <UART_CheckIdleState>
 8006586:	4603      	mov	r3, r0
}
 8006588:	4618      	mov	r0, r3
 800658a:	3708      	adds	r7, #8
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b08a      	sub	sp, #40	; 0x28
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	4613      	mov	r3, r2
 800659c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065a4:	2b20      	cmp	r3, #32
 80065a6:	d17a      	bne.n	800669e <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d002      	beq.n	80065b4 <HAL_UART_Transmit_DMA+0x24>
 80065ae:	88fb      	ldrh	r3, [r7, #6]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d101      	bne.n	80065b8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	e073      	b.n	80066a0 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d101      	bne.n	80065c6 <HAL_UART_Transmit_DMA+0x36>
 80065c2:	2302      	movs	r3, #2
 80065c4:	e06c      	b.n	80066a0 <HAL_UART_Transmit_DMA+0x110>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2201      	movs	r2, #1
 80065ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	68ba      	ldr	r2, [r7, #8]
 80065d2:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	88fa      	ldrh	r2, [r7, #6]
 80065d8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	88fa      	ldrh	r2, [r7, #6]
 80065e0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2221      	movs	r2, #33	; 0x21
 80065f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d02c      	beq.n	8006656 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006600:	4a29      	ldr	r2, [pc, #164]	; (80066a8 <HAL_UART_Transmit_DMA+0x118>)
 8006602:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006608:	4a28      	ldr	r2, [pc, #160]	; (80066ac <HAL_UART_Transmit_DMA+0x11c>)
 800660a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006610:	4a27      	ldr	r2, [pc, #156]	; (80066b0 <HAL_UART_Transmit_DMA+0x120>)
 8006612:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006618:	2200      	movs	r2, #0
 800661a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006624:	4619      	mov	r1, r3
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	3328      	adds	r3, #40	; 0x28
 800662c:	461a      	mov	r2, r3
 800662e:	88fb      	ldrh	r3, [r7, #6]
 8006630:	f7fd fa7c 	bl	8003b2c <HAL_DMA_Start_IT>
 8006634:	4603      	mov	r3, r0
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00d      	beq.n	8006656 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2210      	movs	r2, #16
 800663e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2200      	movs	r2, #0
 8006646:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2220      	movs	r2, #32
 800664e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e024      	b.n	80066a0 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	2240      	movs	r2, #64	; 0x40
 800665c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2200      	movs	r2, #0
 8006662:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	3308      	adds	r3, #8
 800666c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	e853 3f00 	ldrex	r3, [r3]
 8006674:	613b      	str	r3, [r7, #16]
   return(result);
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800667c:	627b      	str	r3, [r7, #36]	; 0x24
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	3308      	adds	r3, #8
 8006684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006686:	623a      	str	r2, [r7, #32]
 8006688:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668a:	69f9      	ldr	r1, [r7, #28]
 800668c:	6a3a      	ldr	r2, [r7, #32]
 800668e:	e841 2300 	strex	r3, r2, [r1]
 8006692:	61bb      	str	r3, [r7, #24]
   return(result);
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d1e5      	bne.n	8006666 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800669a:	2300      	movs	r3, #0
 800669c:	e000      	b.n	80066a0 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800669e:	2302      	movs	r3, #2
  }
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3728      	adds	r7, #40	; 0x28
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	0800762d 	.word	0x0800762d
 80066ac:	080076c7 	.word	0x080076c7
 80066b0:	080076e3 	.word	0x080076e3

080066b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b0ba      	sub	sp, #232	; 0xe8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	69db      	ldr	r3, [r3, #28]
 80066c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80066da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80066de:	f640 030f 	movw	r3, #2063	; 0x80f
 80066e2:	4013      	ands	r3, r2
 80066e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80066e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d11b      	bne.n	8006728 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80066f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066f4:	f003 0320 	and.w	r3, r3, #32
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d015      	beq.n	8006728 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80066fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006700:	f003 0320 	and.w	r3, r3, #32
 8006704:	2b00      	cmp	r3, #0
 8006706:	d105      	bne.n	8006714 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006708:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800670c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006710:	2b00      	cmp	r3, #0
 8006712:	d009      	beq.n	8006728 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006718:	2b00      	cmp	r3, #0
 800671a:	f000 82d6 	beq.w	8006cca <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	4798      	blx	r3
      }
      return;
 8006726:	e2d0      	b.n	8006cca <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006728:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800672c:	2b00      	cmp	r3, #0
 800672e:	f000 811f 	beq.w	8006970 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006732:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006736:	4b8b      	ldr	r3, [pc, #556]	; (8006964 <HAL_UART_IRQHandler+0x2b0>)
 8006738:	4013      	ands	r3, r2
 800673a:	2b00      	cmp	r3, #0
 800673c:	d106      	bne.n	800674c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800673e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006742:	4b89      	ldr	r3, [pc, #548]	; (8006968 <HAL_UART_IRQHandler+0x2b4>)
 8006744:	4013      	ands	r3, r2
 8006746:	2b00      	cmp	r3, #0
 8006748:	f000 8112 	beq.w	8006970 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800674c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006750:	f003 0301 	and.w	r3, r3, #1
 8006754:	2b00      	cmp	r3, #0
 8006756:	d011      	beq.n	800677c <HAL_UART_IRQHandler+0xc8>
 8006758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800675c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006760:	2b00      	cmp	r3, #0
 8006762:	d00b      	beq.n	800677c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2201      	movs	r2, #1
 800676a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006772:	f043 0201 	orr.w	r2, r3, #1
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800677c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006780:	f003 0302 	and.w	r3, r3, #2
 8006784:	2b00      	cmp	r3, #0
 8006786:	d011      	beq.n	80067ac <HAL_UART_IRQHandler+0xf8>
 8006788:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800678c:	f003 0301 	and.w	r3, r3, #1
 8006790:	2b00      	cmp	r3, #0
 8006792:	d00b      	beq.n	80067ac <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2202      	movs	r2, #2
 800679a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067a2:	f043 0204 	orr.w	r2, r3, #4
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80067ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067b0:	f003 0304 	and.w	r3, r3, #4
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d011      	beq.n	80067dc <HAL_UART_IRQHandler+0x128>
 80067b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067bc:	f003 0301 	and.w	r3, r3, #1
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d00b      	beq.n	80067dc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2204      	movs	r2, #4
 80067ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067d2:	f043 0202 	orr.w	r2, r3, #2
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80067dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067e0:	f003 0308 	and.w	r3, r3, #8
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d017      	beq.n	8006818 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80067e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067ec:	f003 0320 	and.w	r3, r3, #32
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d105      	bne.n	8006800 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80067f4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80067f8:	4b5a      	ldr	r3, [pc, #360]	; (8006964 <HAL_UART_IRQHandler+0x2b0>)
 80067fa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d00b      	beq.n	8006818 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2208      	movs	r2, #8
 8006806:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800680e:	f043 0208 	orr.w	r2, r3, #8
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800681c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006820:	2b00      	cmp	r3, #0
 8006822:	d012      	beq.n	800684a <HAL_UART_IRQHandler+0x196>
 8006824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006828:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800682c:	2b00      	cmp	r3, #0
 800682e:	d00c      	beq.n	800684a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006838:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006840:	f043 0220 	orr.w	r2, r3, #32
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006850:	2b00      	cmp	r3, #0
 8006852:	f000 823c 	beq.w	8006cce <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800685a:	f003 0320 	and.w	r3, r3, #32
 800685e:	2b00      	cmp	r3, #0
 8006860:	d013      	beq.n	800688a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006862:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006866:	f003 0320 	and.w	r3, r3, #32
 800686a:	2b00      	cmp	r3, #0
 800686c:	d105      	bne.n	800687a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800686e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006876:	2b00      	cmp	r3, #0
 8006878:	d007      	beq.n	800688a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800687e:	2b00      	cmp	r3, #0
 8006880:	d003      	beq.n	800688a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006890:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800689e:	2b40      	cmp	r3, #64	; 0x40
 80068a0:	d005      	beq.n	80068ae <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80068a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d04f      	beq.n	800694e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 fe56 	bl	8007560 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068be:	2b40      	cmp	r3, #64	; 0x40
 80068c0:	d141      	bne.n	8006946 <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	3308      	adds	r3, #8
 80068c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80068d0:	e853 3f00 	ldrex	r3, [r3]
 80068d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80068d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80068dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	3308      	adds	r3, #8
 80068ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80068ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80068f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80068fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80068fe:	e841 2300 	strex	r3, r2, [r1]
 8006902:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006906:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d1d9      	bne.n	80068c2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006912:	2b00      	cmp	r3, #0
 8006914:	d013      	beq.n	800693e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800691a:	4a14      	ldr	r2, [pc, #80]	; (800696c <HAL_UART_IRQHandler+0x2b8>)
 800691c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006922:	4618      	mov	r0, r3
 8006924:	f7fd f9dc 	bl	8003ce0 <HAL_DMA_Abort_IT>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d017      	beq.n	800695e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006938:	4610      	mov	r0, r2
 800693a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800693c:	e00f      	b.n	800695e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 f9da 	bl	8006cf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006944:	e00b      	b.n	800695e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 f9d6 	bl	8006cf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800694c:	e007      	b.n	800695e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 f9d2 	bl	8006cf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800695c:	e1b7      	b.n	8006cce <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800695e:	bf00      	nop
    return;
 8006960:	e1b5      	b.n	8006cce <HAL_UART_IRQHandler+0x61a>
 8006962:	bf00      	nop
 8006964:	10000001 	.word	0x10000001
 8006968:	04000120 	.word	0x04000120
 800696c:	08007763 	.word	0x08007763

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006974:	2b01      	cmp	r3, #1
 8006976:	f040 814a 	bne.w	8006c0e <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800697a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800697e:	f003 0310 	and.w	r3, r3, #16
 8006982:	2b00      	cmp	r3, #0
 8006984:	f000 8143 	beq.w	8006c0e <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8006988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800698c:	f003 0310 	and.w	r3, r3, #16
 8006990:	2b00      	cmp	r3, #0
 8006992:	f000 813c 	beq.w	8006c0e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2210      	movs	r2, #16
 800699c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a8:	2b40      	cmp	r3, #64	; 0x40
 80069aa:	f040 80b5 	bne.w	8006b18 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 80069ba:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80069be:	2b00      	cmp	r3, #0
 80069c0:	f000 8187 	beq.w	8006cd2 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80069ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80069ce:	429a      	cmp	r2, r3
 80069d0:	f080 817f 	bcs.w	8006cd2 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80069da:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 0320 	and.w	r3, r3, #32
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	f040 8086 	bne.w	8006afc <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80069fc:	e853 3f00 	ldrex	r3, [r3]
 8006a00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006a04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	461a      	mov	r2, r3
 8006a16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006a1e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a22:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006a26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006a2a:	e841 2300 	strex	r3, r2, [r1]
 8006a2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006a32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d1da      	bne.n	80069f0 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	3308      	adds	r3, #8
 8006a40:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a44:	e853 3f00 	ldrex	r3, [r3]
 8006a48:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006a4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a4c:	f023 0301 	bic.w	r3, r3, #1
 8006a50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	3308      	adds	r3, #8
 8006a5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006a5e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006a62:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a64:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006a66:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006a6a:	e841 2300 	strex	r3, r2, [r1]
 8006a6e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006a70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d1e1      	bne.n	8006a3a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	3308      	adds	r3, #8
 8006a7c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a80:	e853 3f00 	ldrex	r3, [r3]
 8006a84:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006a86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	3308      	adds	r3, #8
 8006a96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006a9a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006a9c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006aa0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006aa2:	e841 2300 	strex	r3, r2, [r1]
 8006aa6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006aa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d1e3      	bne.n	8006a76 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2220      	movs	r2, #32
 8006ab2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ac4:	e853 3f00 	ldrex	r3, [r3]
 8006ac8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006aca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006acc:	f023 0310 	bic.w	r3, r3, #16
 8006ad0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	461a      	mov	r2, r3
 8006ada:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ade:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ae0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ae4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ae6:	e841 2300 	strex	r3, r2, [r1]
 8006aea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006aec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d1e4      	bne.n	8006abc <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006af6:	4618      	mov	r0, r3
 8006af8:	f7fd f893 	bl	8003c22 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	4619      	mov	r1, r3
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 f8fb 	bl	8006d0c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006b16:	e0dc      	b.n	8006cd2 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	1ad3      	subs	r3, r2, r3
 8006b28:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	f000 80ce 	beq.w	8006cd6 <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8006b3a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	f000 80c9 	beq.w	8006cd6 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b4c:	e853 3f00 	ldrex	r3, [r3]
 8006b50:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	461a      	mov	r2, r3
 8006b62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006b66:	647b      	str	r3, [r7, #68]	; 0x44
 8006b68:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b6e:	e841 2300 	strex	r3, r2, [r1]
 8006b72:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d1e4      	bne.n	8006b44 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	3308      	adds	r3, #8
 8006b80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b84:	e853 3f00 	ldrex	r3, [r3]
 8006b88:	623b      	str	r3, [r7, #32]
   return(result);
 8006b8a:	6a3b      	ldr	r3, [r7, #32]
 8006b8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b90:	f023 0301 	bic.w	r3, r3, #1
 8006b94:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	3308      	adds	r3, #8
 8006b9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006ba2:	633a      	str	r2, [r7, #48]	; 0x30
 8006ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006baa:	e841 2300 	strex	r3, r2, [r1]
 8006bae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1e1      	bne.n	8006b7a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2220      	movs	r2, #32
 8006bba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	e853 3f00 	ldrex	r3, [r3]
 8006bd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f023 0310 	bic.w	r3, r3, #16
 8006bde:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	461a      	mov	r2, r3
 8006be8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006bec:	61fb      	str	r3, [r7, #28]
 8006bee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf0:	69b9      	ldr	r1, [r7, #24]
 8006bf2:	69fa      	ldr	r2, [r7, #28]
 8006bf4:	e841 2300 	strex	r3, r2, [r1]
 8006bf8:	617b      	str	r3, [r7, #20]
   return(result);
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d1e4      	bne.n	8006bca <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c04:	4619      	mov	r1, r3
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 f880 	bl	8006d0c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006c0c:	e063      	b.n	8006cd6 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d00e      	beq.n	8006c38 <HAL_UART_IRQHandler+0x584>
 8006c1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d008      	beq.n	8006c38 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006c2e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 fdd7 	bl	80077e4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c36:	e051      	b.n	8006cdc <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006c38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d014      	beq.n	8006c6e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006c44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d105      	bne.n	8006c5c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006c50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d008      	beq.n	8006c6e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d03a      	beq.n	8006cda <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	4798      	blx	r3
    }
    return;
 8006c6c:	e035      	b.n	8006cda <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d009      	beq.n	8006c8e <HAL_UART_IRQHandler+0x5da>
 8006c7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d003      	beq.n	8006c8e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 fd81 	bl	800778e <UART_EndTransmit_IT>
    return;
 8006c8c:	e026      	b.n	8006cdc <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d009      	beq.n	8006cae <HAL_UART_IRQHandler+0x5fa>
 8006c9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c9e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d003      	beq.n	8006cae <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 fdb0 	bl	800780c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006cac:	e016      	b.n	8006cdc <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d010      	beq.n	8006cdc <HAL_UART_IRQHandler+0x628>
 8006cba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	da0c      	bge.n	8006cdc <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 fd98 	bl	80077f8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006cc8:	e008      	b.n	8006cdc <HAL_UART_IRQHandler+0x628>
      return;
 8006cca:	bf00      	nop
 8006ccc:	e006      	b.n	8006cdc <HAL_UART_IRQHandler+0x628>
    return;
 8006cce:	bf00      	nop
 8006cd0:	e004      	b.n	8006cdc <HAL_UART_IRQHandler+0x628>
      return;
 8006cd2:	bf00      	nop
 8006cd4:	e002      	b.n	8006cdc <HAL_UART_IRQHandler+0x628>
      return;
 8006cd6:	bf00      	nop
 8006cd8:	e000      	b.n	8006cdc <HAL_UART_IRQHandler+0x628>
    return;
 8006cda:	bf00      	nop
  }
}
 8006cdc:	37e8      	adds	r7, #232	; 0xe8
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop

08006ce4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b083      	sub	sp, #12
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006cec:	bf00      	nop
 8006cee:	370c      	adds	r7, #12
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006d00:	bf00      	nop
 8006d02:	370c      	adds	r7, #12
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr

08006d0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	460b      	mov	r3, r1
 8006d16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d18:	bf00      	nop
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d28:	b08c      	sub	sp, #48	; 0x30
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	689a      	ldr	r2, [r3, #8]
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	431a      	orrs	r2, r3
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	695b      	ldr	r3, [r3, #20]
 8006d42:	431a      	orrs	r2, r3
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	69db      	ldr	r3, [r3, #28]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	4baf      	ldr	r3, [pc, #700]	; (8007010 <UART_SetConfig+0x2ec>)
 8006d54:	4013      	ands	r3, r2
 8006d56:	697a      	ldr	r2, [r7, #20]
 8006d58:	6812      	ldr	r2, [r2, #0]
 8006d5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d5c:	430b      	orrs	r3, r1
 8006d5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	68da      	ldr	r2, [r3, #12]
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	430a      	orrs	r2, r1
 8006d74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	699b      	ldr	r3, [r3, #24]
 8006d7a:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4aa4      	ldr	r2, [pc, #656]	; (8007014 <UART_SetConfig+0x2f0>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d004      	beq.n	8006d90 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	6a1b      	ldr	r3, [r3, #32]
 8006d8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006d9a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006d9e:	697a      	ldr	r2, [r7, #20]
 8006da0:	6812      	ldr	r2, [r2, #0]
 8006da2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006da4:	430b      	orrs	r3, r1
 8006da6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dae:	f023 010f 	bic.w	r1, r3, #15
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	430a      	orrs	r2, r1
 8006dbc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a95      	ldr	r2, [pc, #596]	; (8007018 <UART_SetConfig+0x2f4>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d125      	bne.n	8006e14 <UART_SetConfig+0xf0>
 8006dc8:	2003      	movs	r0, #3
 8006dca:	f7ff fb71 	bl	80064b0 <LL_RCC_GetUSARTClockSource>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	2b03      	cmp	r3, #3
 8006dd2:	d81b      	bhi.n	8006e0c <UART_SetConfig+0xe8>
 8006dd4:	a201      	add	r2, pc, #4	; (adr r2, 8006ddc <UART_SetConfig+0xb8>)
 8006dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dda:	bf00      	nop
 8006ddc:	08006ded 	.word	0x08006ded
 8006de0:	08006dfd 	.word	0x08006dfd
 8006de4:	08006df5 	.word	0x08006df5
 8006de8:	08006e05 	.word	0x08006e05
 8006dec:	2301      	movs	r3, #1
 8006dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006df2:	e042      	b.n	8006e7a <UART_SetConfig+0x156>
 8006df4:	2302      	movs	r3, #2
 8006df6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dfa:	e03e      	b.n	8006e7a <UART_SetConfig+0x156>
 8006dfc:	2304      	movs	r3, #4
 8006dfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e02:	e03a      	b.n	8006e7a <UART_SetConfig+0x156>
 8006e04:	2308      	movs	r3, #8
 8006e06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e0a:	e036      	b.n	8006e7a <UART_SetConfig+0x156>
 8006e0c:	2310      	movs	r3, #16
 8006e0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e12:	e032      	b.n	8006e7a <UART_SetConfig+0x156>
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a7e      	ldr	r2, [pc, #504]	; (8007014 <UART_SetConfig+0x2f0>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d12a      	bne.n	8006e74 <UART_SetConfig+0x150>
 8006e1e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8006e22:	f7ff fb55 	bl	80064d0 <LL_RCC_GetLPUARTClockSource>
 8006e26:	4603      	mov	r3, r0
 8006e28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e2c:	d01a      	beq.n	8006e64 <UART_SetConfig+0x140>
 8006e2e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e32:	d81b      	bhi.n	8006e6c <UART_SetConfig+0x148>
 8006e34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e38:	d00c      	beq.n	8006e54 <UART_SetConfig+0x130>
 8006e3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e3e:	d815      	bhi.n	8006e6c <UART_SetConfig+0x148>
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d003      	beq.n	8006e4c <UART_SetConfig+0x128>
 8006e44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e48:	d008      	beq.n	8006e5c <UART_SetConfig+0x138>
 8006e4a:	e00f      	b.n	8006e6c <UART_SetConfig+0x148>
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e52:	e012      	b.n	8006e7a <UART_SetConfig+0x156>
 8006e54:	2302      	movs	r3, #2
 8006e56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e5a:	e00e      	b.n	8006e7a <UART_SetConfig+0x156>
 8006e5c:	2304      	movs	r3, #4
 8006e5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e62:	e00a      	b.n	8006e7a <UART_SetConfig+0x156>
 8006e64:	2308      	movs	r3, #8
 8006e66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e6a:	e006      	b.n	8006e7a <UART_SetConfig+0x156>
 8006e6c:	2310      	movs	r3, #16
 8006e6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e72:	e002      	b.n	8006e7a <UART_SetConfig+0x156>
 8006e74:	2310      	movs	r3, #16
 8006e76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a65      	ldr	r2, [pc, #404]	; (8007014 <UART_SetConfig+0x2f0>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	f040 8097 	bne.w	8006fb4 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006e86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006e8a:	2b08      	cmp	r3, #8
 8006e8c:	d823      	bhi.n	8006ed6 <UART_SetConfig+0x1b2>
 8006e8e:	a201      	add	r2, pc, #4	; (adr r2, 8006e94 <UART_SetConfig+0x170>)
 8006e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e94:	08006eb9 	.word	0x08006eb9
 8006e98:	08006ed7 	.word	0x08006ed7
 8006e9c:	08006ec1 	.word	0x08006ec1
 8006ea0:	08006ed7 	.word	0x08006ed7
 8006ea4:	08006ec7 	.word	0x08006ec7
 8006ea8:	08006ed7 	.word	0x08006ed7
 8006eac:	08006ed7 	.word	0x08006ed7
 8006eb0:	08006ed7 	.word	0x08006ed7
 8006eb4:	08006ecf 	.word	0x08006ecf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006eb8:	f7fe fc16 	bl	80056e8 <HAL_RCC_GetPCLK1Freq>
 8006ebc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ebe:	e010      	b.n	8006ee2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ec0:	4b56      	ldr	r3, [pc, #344]	; (800701c <UART_SetConfig+0x2f8>)
 8006ec2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006ec4:	e00d      	b.n	8006ee2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ec6:	f7fe fb8f 	bl	80055e8 <HAL_RCC_GetSysClockFreq>
 8006eca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ecc:	e009      	b.n	8006ee2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ece:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ed2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006ed4:	e005      	b.n	8006ee2 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006ee0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	f000 812b 	beq.w	8007140 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eee:	4a4c      	ldr	r2, [pc, #304]	; (8007020 <UART_SetConfig+0x2fc>)
 8006ef0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006efc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	685a      	ldr	r2, [r3, #4]
 8006f02:	4613      	mov	r3, r2
 8006f04:	005b      	lsls	r3, r3, #1
 8006f06:	4413      	add	r3, r2
 8006f08:	69ba      	ldr	r2, [r7, #24]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d305      	bcc.n	8006f1a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f14:	69ba      	ldr	r2, [r7, #24]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d903      	bls.n	8006f22 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006f20:	e10e      	b.n	8007140 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f24:	2200      	movs	r2, #0
 8006f26:	60bb      	str	r3, [r7, #8]
 8006f28:	60fa      	str	r2, [r7, #12]
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2e:	4a3c      	ldr	r2, [pc, #240]	; (8007020 <UART_SetConfig+0x2fc>)
 8006f30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	2200      	movs	r2, #0
 8006f38:	603b      	str	r3, [r7, #0]
 8006f3a:	607a      	str	r2, [r7, #4]
 8006f3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f40:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006f44:	f7f9 f974 	bl	8000230 <__aeabi_uldivmod>
 8006f48:	4602      	mov	r2, r0
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	4610      	mov	r0, r2
 8006f4e:	4619      	mov	r1, r3
 8006f50:	f04f 0200 	mov.w	r2, #0
 8006f54:	f04f 0300 	mov.w	r3, #0
 8006f58:	020b      	lsls	r3, r1, #8
 8006f5a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006f5e:	0202      	lsls	r2, r0, #8
 8006f60:	6979      	ldr	r1, [r7, #20]
 8006f62:	6849      	ldr	r1, [r1, #4]
 8006f64:	0849      	lsrs	r1, r1, #1
 8006f66:	2000      	movs	r0, #0
 8006f68:	460c      	mov	r4, r1
 8006f6a:	4605      	mov	r5, r0
 8006f6c:	eb12 0804 	adds.w	r8, r2, r4
 8006f70:	eb43 0905 	adc.w	r9, r3, r5
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	469a      	mov	sl, r3
 8006f7c:	4693      	mov	fp, r2
 8006f7e:	4652      	mov	r2, sl
 8006f80:	465b      	mov	r3, fp
 8006f82:	4640      	mov	r0, r8
 8006f84:	4649      	mov	r1, r9
 8006f86:	f7f9 f953 	bl	8000230 <__aeabi_uldivmod>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	4613      	mov	r3, r2
 8006f90:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f92:	6a3b      	ldr	r3, [r7, #32]
 8006f94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f98:	d308      	bcc.n	8006fac <UART_SetConfig+0x288>
 8006f9a:	6a3b      	ldr	r3, [r7, #32]
 8006f9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fa0:	d204      	bcs.n	8006fac <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	6a3a      	ldr	r2, [r7, #32]
 8006fa8:	60da      	str	r2, [r3, #12]
 8006faa:	e0c9      	b.n	8007140 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006fb2:	e0c5      	b.n	8007140 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	69db      	ldr	r3, [r3, #28]
 8006fb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fbc:	d16e      	bne.n	800709c <UART_SetConfig+0x378>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8006fbe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006fc2:	3b01      	subs	r3, #1
 8006fc4:	2b07      	cmp	r3, #7
 8006fc6:	d82d      	bhi.n	8007024 <UART_SetConfig+0x300>
 8006fc8:	a201      	add	r2, pc, #4	; (adr r2, 8006fd0 <UART_SetConfig+0x2ac>)
 8006fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fce:	bf00      	nop
 8006fd0:	08006ff1 	.word	0x08006ff1
 8006fd4:	08006ff9 	.word	0x08006ff9
 8006fd8:	08007025 	.word	0x08007025
 8006fdc:	08006fff 	.word	0x08006fff
 8006fe0:	08007025 	.word	0x08007025
 8006fe4:	08007025 	.word	0x08007025
 8006fe8:	08007025 	.word	0x08007025
 8006fec:	08007007 	.word	0x08007007
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ff0:	f7fe fb90 	bl	8005714 <HAL_RCC_GetPCLK2Freq>
 8006ff4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ff6:	e01b      	b.n	8007030 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ff8:	4b08      	ldr	r3, [pc, #32]	; (800701c <UART_SetConfig+0x2f8>)
 8006ffa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006ffc:	e018      	b.n	8007030 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ffe:	f7fe faf3 	bl	80055e8 <HAL_RCC_GetSysClockFreq>
 8007002:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007004:	e014      	b.n	8007030 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007006:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800700a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800700c:	e010      	b.n	8007030 <UART_SetConfig+0x30c>
 800700e:	bf00      	nop
 8007010:	cfff69f3 	.word	0xcfff69f3
 8007014:	40008000 	.word	0x40008000
 8007018:	40013800 	.word	0x40013800
 800701c:	00f42400 	.word	0x00f42400
 8007020:	0800c288 	.word	0x0800c288
      default:
        pclk = 0U;
 8007024:	2300      	movs	r3, #0
 8007026:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800702e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007032:	2b00      	cmp	r3, #0
 8007034:	f000 8084 	beq.w	8007140 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703c:	4a4b      	ldr	r2, [pc, #300]	; (800716c <UART_SetConfig+0x448>)
 800703e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007042:	461a      	mov	r2, r3
 8007044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007046:	fbb3 f3f2 	udiv	r3, r3, r2
 800704a:	005a      	lsls	r2, r3, #1
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	085b      	lsrs	r3, r3, #1
 8007052:	441a      	add	r2, r3
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	fbb2 f3f3 	udiv	r3, r2, r3
 800705c:	b29b      	uxth	r3, r3
 800705e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007060:	6a3b      	ldr	r3, [r7, #32]
 8007062:	2b0f      	cmp	r3, #15
 8007064:	d916      	bls.n	8007094 <UART_SetConfig+0x370>
 8007066:	6a3b      	ldr	r3, [r7, #32]
 8007068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800706c:	d212      	bcs.n	8007094 <UART_SetConfig+0x370>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800706e:	6a3b      	ldr	r3, [r7, #32]
 8007070:	b29b      	uxth	r3, r3
 8007072:	f023 030f 	bic.w	r3, r3, #15
 8007076:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007078:	6a3b      	ldr	r3, [r7, #32]
 800707a:	085b      	lsrs	r3, r3, #1
 800707c:	b29b      	uxth	r3, r3
 800707e:	f003 0307 	and.w	r3, r3, #7
 8007082:	b29a      	uxth	r2, r3
 8007084:	8bfb      	ldrh	r3, [r7, #30]
 8007086:	4313      	orrs	r3, r2
 8007088:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	8bfa      	ldrh	r2, [r7, #30]
 8007090:	60da      	str	r2, [r3, #12]
 8007092:	e055      	b.n	8007140 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800709a:	e051      	b.n	8007140 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800709c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80070a0:	3b01      	subs	r3, #1
 80070a2:	2b07      	cmp	r3, #7
 80070a4:	d821      	bhi.n	80070ea <UART_SetConfig+0x3c6>
 80070a6:	a201      	add	r2, pc, #4	; (adr r2, 80070ac <UART_SetConfig+0x388>)
 80070a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ac:	080070cd 	.word	0x080070cd
 80070b0:	080070d5 	.word	0x080070d5
 80070b4:	080070eb 	.word	0x080070eb
 80070b8:	080070db 	.word	0x080070db
 80070bc:	080070eb 	.word	0x080070eb
 80070c0:	080070eb 	.word	0x080070eb
 80070c4:	080070eb 	.word	0x080070eb
 80070c8:	080070e3 	.word	0x080070e3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070cc:	f7fe fb22 	bl	8005714 <HAL_RCC_GetPCLK2Freq>
 80070d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80070d2:	e010      	b.n	80070f6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070d4:	4b26      	ldr	r3, [pc, #152]	; (8007170 <UART_SetConfig+0x44c>)
 80070d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80070d8:	e00d      	b.n	80070f6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070da:	f7fe fa85 	bl	80055e8 <HAL_RCC_GetSysClockFreq>
 80070de:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80070e0:	e009      	b.n	80070f6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80070e8:	e005      	b.n	80070f6 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80070ea:	2300      	movs	r3, #0
 80070ec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80070f4:	bf00      	nop
    }

    if (pclk != 0U)
 80070f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d021      	beq.n	8007140 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007100:	4a1a      	ldr	r2, [pc, #104]	; (800716c <UART_SetConfig+0x448>)
 8007102:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007106:	461a      	mov	r2, r3
 8007108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710a:	fbb3 f2f2 	udiv	r2, r3, r2
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	085b      	lsrs	r3, r3, #1
 8007114:	441a      	add	r2, r3
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	fbb2 f3f3 	udiv	r3, r2, r3
 800711e:	b29b      	uxth	r3, r3
 8007120:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007122:	6a3b      	ldr	r3, [r7, #32]
 8007124:	2b0f      	cmp	r3, #15
 8007126:	d908      	bls.n	800713a <UART_SetConfig+0x416>
 8007128:	6a3b      	ldr	r3, [r7, #32]
 800712a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800712e:	d204      	bcs.n	800713a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = usartdiv;
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	6a3a      	ldr	r2, [r7, #32]
 8007136:	60da      	str	r2, [r3, #12]
 8007138:	e002      	b.n	8007140 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	2201      	movs	r2, #1
 8007144:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	2201      	movs	r2, #1
 800714c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	2200      	movs	r2, #0
 8007154:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	2200      	movs	r2, #0
 800715a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800715c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007160:	4618      	mov	r0, r3
 8007162:	3730      	adds	r7, #48	; 0x30
 8007164:	46bd      	mov	sp, r7
 8007166:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800716a:	bf00      	nop
 800716c:	0800c288 	.word	0x0800c288
 8007170:	00f42400 	.word	0x00f42400

08007174 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007180:	f003 0301 	and.w	r3, r3, #1
 8007184:	2b00      	cmp	r3, #0
 8007186:	d00a      	beq.n	800719e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	430a      	orrs	r2, r1
 800719c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071a2:	f003 0302 	and.w	r3, r3, #2
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d00a      	beq.n	80071c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	430a      	orrs	r2, r1
 80071be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c4:	f003 0304 	and.w	r3, r3, #4
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d00a      	beq.n	80071e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	430a      	orrs	r2, r1
 80071e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e6:	f003 0308 	and.w	r3, r3, #8
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d00a      	beq.n	8007204 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	430a      	orrs	r2, r1
 8007202:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007208:	f003 0310 	and.w	r3, r3, #16
 800720c:	2b00      	cmp	r3, #0
 800720e:	d00a      	beq.n	8007226 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	430a      	orrs	r2, r1
 8007224:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800722a:	f003 0320 	and.w	r3, r3, #32
 800722e:	2b00      	cmp	r3, #0
 8007230:	d00a      	beq.n	8007248 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	430a      	orrs	r2, r1
 8007246:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800724c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007250:	2b00      	cmp	r3, #0
 8007252:	d01a      	beq.n	800728a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	430a      	orrs	r2, r1
 8007268:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800726e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007272:	d10a      	bne.n	800728a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	430a      	orrs	r2, r1
 8007288:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800728e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007292:	2b00      	cmp	r3, #0
 8007294:	d00a      	beq.n	80072ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	430a      	orrs	r2, r1
 80072aa:	605a      	str	r2, [r3, #4]
  }
}
 80072ac:	bf00      	nop
 80072ae:	370c      	adds	r7, #12
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b086      	sub	sp, #24
 80072bc:	af02      	add	r7, sp, #8
 80072be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80072c8:	f7fc f9ca 	bl	8003660 <HAL_GetTick>
 80072cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f003 0308 	and.w	r3, r3, #8
 80072d8:	2b08      	cmp	r3, #8
 80072da:	d10e      	bne.n	80072fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072e0:	9300      	str	r3, [sp, #0]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 f82f 	bl	800734e <UART_WaitOnFlagUntilTimeout>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d001      	beq.n	80072fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072f6:	2303      	movs	r3, #3
 80072f8:	e025      	b.n	8007346 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f003 0304 	and.w	r3, r3, #4
 8007304:	2b04      	cmp	r3, #4
 8007306:	d10e      	bne.n	8007326 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007308:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800730c:	9300      	str	r3, [sp, #0]
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2200      	movs	r2, #0
 8007312:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 f819 	bl	800734e <UART_WaitOnFlagUntilTimeout>
 800731c:	4603      	mov	r3, r0
 800731e:	2b00      	cmp	r3, #0
 8007320:	d001      	beq.n	8007326 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007322:	2303      	movs	r3, #3
 8007324:	e00f      	b.n	8007346 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2220      	movs	r2, #32
 800732a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2220      	movs	r2, #32
 8007332:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007344:	2300      	movs	r3, #0
}
 8007346:	4618      	mov	r0, r3
 8007348:	3710      	adds	r7, #16
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}

0800734e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800734e:	b580      	push	{r7, lr}
 8007350:	b09c      	sub	sp, #112	; 0x70
 8007352:	af00      	add	r7, sp, #0
 8007354:	60f8      	str	r0, [r7, #12]
 8007356:	60b9      	str	r1, [r7, #8]
 8007358:	603b      	str	r3, [r7, #0]
 800735a:	4613      	mov	r3, r2
 800735c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800735e:	e0a9      	b.n	80074b4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007360:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007362:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007366:	f000 80a5 	beq.w	80074b4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800736a:	f7fc f979 	bl	8003660 <HAL_GetTick>
 800736e:	4602      	mov	r2, r0
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	1ad3      	subs	r3, r2, r3
 8007374:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007376:	429a      	cmp	r2, r3
 8007378:	d302      	bcc.n	8007380 <UART_WaitOnFlagUntilTimeout+0x32>
 800737a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800737c:	2b00      	cmp	r3, #0
 800737e:	d140      	bne.n	8007402 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007386:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007388:	e853 3f00 	ldrex	r3, [r3]
 800738c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800738e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007390:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007394:	667b      	str	r3, [r7, #100]	; 0x64
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	461a      	mov	r2, r3
 800739c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800739e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073a0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80073a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80073a6:	e841 2300 	strex	r3, r2, [r1]
 80073aa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80073ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d1e6      	bne.n	8007380 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	3308      	adds	r3, #8
 80073b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073bc:	e853 3f00 	ldrex	r3, [r3]
 80073c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80073c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c4:	f023 0301 	bic.w	r3, r3, #1
 80073c8:	663b      	str	r3, [r7, #96]	; 0x60
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	3308      	adds	r3, #8
 80073d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80073d2:	64ba      	str	r2, [r7, #72]	; 0x48
 80073d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80073d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073da:	e841 2300 	strex	r3, r2, [r1]
 80073de:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80073e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d1e5      	bne.n	80073b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2220      	movs	r2, #32
 80073ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2220      	movs	r2, #32
 80073f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80073fe:	2303      	movs	r3, #3
 8007400:	e069      	b.n	80074d6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f003 0304 	and.w	r3, r3, #4
 800740c:	2b00      	cmp	r3, #0
 800740e:	d051      	beq.n	80074b4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	69db      	ldr	r3, [r3, #28]
 8007416:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800741a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800741e:	d149      	bne.n	80074b4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007428:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007432:	e853 3f00 	ldrex	r3, [r3]
 8007436:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800743e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	461a      	mov	r2, r3
 8007446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007448:	637b      	str	r3, [r7, #52]	; 0x34
 800744a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800744c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800744e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007450:	e841 2300 	strex	r3, r2, [r1]
 8007454:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007458:	2b00      	cmp	r3, #0
 800745a:	d1e6      	bne.n	800742a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	3308      	adds	r3, #8
 8007462:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	e853 3f00 	ldrex	r3, [r3]
 800746a:	613b      	str	r3, [r7, #16]
   return(result);
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	f023 0301 	bic.w	r3, r3, #1
 8007472:	66bb      	str	r3, [r7, #104]	; 0x68
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	3308      	adds	r3, #8
 800747a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800747c:	623a      	str	r2, [r7, #32]
 800747e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007480:	69f9      	ldr	r1, [r7, #28]
 8007482:	6a3a      	ldr	r2, [r7, #32]
 8007484:	e841 2300 	strex	r3, r2, [r1]
 8007488:	61bb      	str	r3, [r7, #24]
   return(result);
 800748a:	69bb      	ldr	r3, [r7, #24]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d1e5      	bne.n	800745c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2220      	movs	r2, #32
 8007494:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2220      	movs	r2, #32
 800749c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2220      	movs	r2, #32
 80074a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80074b0:	2303      	movs	r3, #3
 80074b2:	e010      	b.n	80074d6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	69da      	ldr	r2, [r3, #28]
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	4013      	ands	r3, r2
 80074be:	68ba      	ldr	r2, [r7, #8]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	bf0c      	ite	eq
 80074c4:	2301      	moveq	r3, #1
 80074c6:	2300      	movne	r3, #0
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	461a      	mov	r2, r3
 80074cc:	79fb      	ldrb	r3, [r7, #7]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	f43f af46 	beq.w	8007360 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3770      	adds	r7, #112	; 0x70
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80074de:	b480      	push	{r7}
 80074e0:	b08f      	sub	sp, #60	; 0x3c
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ec:	6a3b      	ldr	r3, [r7, #32]
 80074ee:	e853 3f00 	ldrex	r3, [r3]
 80074f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80074fa:	637b      	str	r3, [r7, #52]	; 0x34
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	461a      	mov	r2, r3
 8007502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007504:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007506:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007508:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800750a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800750c:	e841 2300 	strex	r3, r2, [r1]
 8007510:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007514:	2b00      	cmp	r3, #0
 8007516:	d1e6      	bne.n	80074e6 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	3308      	adds	r3, #8
 800751e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	e853 3f00 	ldrex	r3, [r3]
 8007526:	60bb      	str	r3, [r7, #8]
   return(result);
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800752e:	633b      	str	r3, [r7, #48]	; 0x30
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	3308      	adds	r3, #8
 8007536:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007538:	61ba      	str	r2, [r7, #24]
 800753a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800753c:	6979      	ldr	r1, [r7, #20]
 800753e:	69ba      	ldr	r2, [r7, #24]
 8007540:	e841 2300 	strex	r3, r2, [r1]
 8007544:	613b      	str	r3, [r7, #16]
   return(result);
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d1e5      	bne.n	8007518 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2220      	movs	r2, #32
 8007550:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8007554:	bf00      	nop
 8007556:	373c      	adds	r7, #60	; 0x3c
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007560:	b480      	push	{r7}
 8007562:	b095      	sub	sp, #84	; 0x54
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800756e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007570:	e853 3f00 	ldrex	r3, [r3]
 8007574:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007578:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800757c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	461a      	mov	r2, r3
 8007584:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007586:	643b      	str	r3, [r7, #64]	; 0x40
 8007588:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800758c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800758e:	e841 2300 	strex	r3, r2, [r1]
 8007592:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007596:	2b00      	cmp	r3, #0
 8007598:	d1e6      	bne.n	8007568 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	3308      	adds	r3, #8
 80075a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a2:	6a3b      	ldr	r3, [r7, #32]
 80075a4:	e853 3f00 	ldrex	r3, [r3]
 80075a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80075aa:	69fb      	ldr	r3, [r7, #28]
 80075ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075b0:	f023 0301 	bic.w	r3, r3, #1
 80075b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	3308      	adds	r3, #8
 80075bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80075c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075c6:	e841 2300 	strex	r3, r2, [r1]
 80075ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80075cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d1e3      	bne.n	800759a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d118      	bne.n	800760c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	e853 3f00 	ldrex	r3, [r3]
 80075e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	f023 0310 	bic.w	r3, r3, #16
 80075ee:	647b      	str	r3, [r7, #68]	; 0x44
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	461a      	mov	r2, r3
 80075f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075f8:	61bb      	str	r3, [r7, #24]
 80075fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075fc:	6979      	ldr	r1, [r7, #20]
 80075fe:	69ba      	ldr	r2, [r7, #24]
 8007600:	e841 2300 	strex	r3, r2, [r1]
 8007604:	613b      	str	r3, [r7, #16]
   return(result);
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d1e6      	bne.n	80075da <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2220      	movs	r2, #32
 8007610:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007620:	bf00      	nop
 8007622:	3754      	adds	r7, #84	; 0x54
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b090      	sub	sp, #64	; 0x40
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007638:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 0320 	and.w	r3, r3, #32
 8007644:	2b00      	cmp	r3, #0
 8007646:	d137      	bne.n	80076b8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8007648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800764a:	2200      	movs	r2, #0
 800764c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	3308      	adds	r3, #8
 8007656:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765a:	e853 3f00 	ldrex	r3, [r3]
 800765e:	623b      	str	r3, [r7, #32]
   return(result);
 8007660:	6a3b      	ldr	r3, [r7, #32]
 8007662:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007666:	63bb      	str	r3, [r7, #56]	; 0x38
 8007668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	3308      	adds	r3, #8
 800766e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007670:	633a      	str	r2, [r7, #48]	; 0x30
 8007672:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007674:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007676:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007678:	e841 2300 	strex	r3, r2, [r1]
 800767c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800767e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007680:	2b00      	cmp	r3, #0
 8007682:	d1e5      	bne.n	8007650 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	e853 3f00 	ldrex	r3, [r3]
 8007690:	60fb      	str	r3, [r7, #12]
   return(result);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007698:	637b      	str	r3, [r7, #52]	; 0x34
 800769a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	461a      	mov	r2, r3
 80076a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076a2:	61fb      	str	r3, [r7, #28]
 80076a4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a6:	69b9      	ldr	r1, [r7, #24]
 80076a8:	69fa      	ldr	r2, [r7, #28]
 80076aa:	e841 2300 	strex	r3, r2, [r1]
 80076ae:	617b      	str	r3, [r7, #20]
   return(result);
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d1e6      	bne.n	8007684 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80076b6:	e002      	b.n	80076be <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80076b8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80076ba:	f7fa fa8d 	bl	8001bd8 <HAL_UART_TxCpltCallback>
}
 80076be:	bf00      	nop
 80076c0:	3740      	adds	r7, #64	; 0x40
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b084      	sub	sp, #16
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076d2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	f7ff fb05 	bl	8006ce4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076da:	bf00      	nop
 80076dc:	3710      	adds	r7, #16
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}

080076e2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80076e2:	b580      	push	{r7, lr}
 80076e4:	b086      	sub	sp, #24
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ee:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076f6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076fe:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800770a:	2b80      	cmp	r3, #128	; 0x80
 800770c:	d109      	bne.n	8007722 <UART_DMAError+0x40>
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	2b21      	cmp	r3, #33	; 0x21
 8007712:	d106      	bne.n	8007722 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	2200      	movs	r2, #0
 8007718:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800771c:	6978      	ldr	r0, [r7, #20]
 800771e:	f7ff fede 	bl	80074de <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800772c:	2b40      	cmp	r3, #64	; 0x40
 800772e:	d109      	bne.n	8007744 <UART_DMAError+0x62>
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2b22      	cmp	r3, #34	; 0x22
 8007734:	d106      	bne.n	8007744 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	2200      	movs	r2, #0
 800773a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800773e:	6978      	ldr	r0, [r7, #20]
 8007740:	f7ff ff0e 	bl	8007560 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800774a:	f043 0210 	orr.w	r2, r3, #16
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007754:	6978      	ldr	r0, [r7, #20]
 8007756:	f7ff facf 	bl	8006cf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800775a:	bf00      	nop
 800775c:	3718      	adds	r7, #24
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}

08007762 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007762:	b580      	push	{r7, lr}
 8007764:	b084      	sub	sp, #16
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800776e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2200      	movs	r2, #0
 8007774:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2200      	movs	r2, #0
 800777c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007780:	68f8      	ldr	r0, [r7, #12]
 8007782:	f7ff fab9 	bl	8006cf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007786:	bf00      	nop
 8007788:	3710      	adds	r7, #16
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}

0800778e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800778e:	b580      	push	{r7, lr}
 8007790:	b088      	sub	sp, #32
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	e853 3f00 	ldrex	r3, [r3]
 80077a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077aa:	61fb      	str	r3, [r7, #28]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	461a      	mov	r2, r3
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	61bb      	str	r3, [r7, #24]
 80077b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b8:	6979      	ldr	r1, [r7, #20]
 80077ba:	69ba      	ldr	r2, [r7, #24]
 80077bc:	e841 2300 	strex	r3, r2, [r1]
 80077c0:	613b      	str	r3, [r7, #16]
   return(result);
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d1e6      	bne.n	8007796 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2220      	movs	r2, #32
 80077cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f7fa f9fe 	bl	8001bd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077dc:	bf00      	nop
 80077de:	3720      	adds	r7, #32
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80077ec:	bf00      	nop
 80077ee:	370c      	adds	r7, #12
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr

080077f8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b083      	sub	sp, #12
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007800:	bf00      	nop
 8007802:	370c      	adds	r7, #12
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007814:	bf00      	nop
 8007816:	370c      	adds	r7, #12
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007820:	b480      	push	{r7}
 8007822:	b085      	sub	sp, #20
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800782e:	2b01      	cmp	r3, #1
 8007830:	d101      	bne.n	8007836 <HAL_UARTEx_DisableFifoMode+0x16>
 8007832:	2302      	movs	r3, #2
 8007834:	e027      	b.n	8007886 <HAL_UARTEx_DisableFifoMode+0x66>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2201      	movs	r2, #1
 800783a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2224      	movs	r2, #36	; 0x24
 8007842:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f022 0201 	bic.w	r2, r2, #1
 800785c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007864:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	68fa      	ldr	r2, [r7, #12]
 8007872:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2220      	movs	r2, #32
 8007878:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2200      	movs	r2, #0
 8007880:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007884:	2300      	movs	r3, #0
}
 8007886:	4618      	mov	r0, r3
 8007888:	3714      	adds	r7, #20
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr

08007892 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007892:	b580      	push	{r7, lr}
 8007894:	b084      	sub	sp, #16
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
 800789a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	d101      	bne.n	80078aa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80078a6:	2302      	movs	r3, #2
 80078a8:	e02d      	b.n	8007906 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2201      	movs	r2, #1
 80078ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2224      	movs	r2, #36	; 0x24
 80078b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f022 0201 	bic.w	r2, r2, #1
 80078d0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	683a      	ldr	r2, [r7, #0]
 80078e2:	430a      	orrs	r2, r1
 80078e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 f850 	bl	800798c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	68fa      	ldr	r2, [r7, #12]
 80078f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2220      	movs	r2, #32
 80078f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007904:	2300      	movs	r3, #0
}
 8007906:	4618      	mov	r0, r3
 8007908:	3710      	adds	r7, #16
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}

0800790e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800790e:	b580      	push	{r7, lr}
 8007910:	b084      	sub	sp, #16
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
 8007916:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800791e:	2b01      	cmp	r3, #1
 8007920:	d101      	bne.n	8007926 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007922:	2302      	movs	r3, #2
 8007924:	e02d      	b.n	8007982 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2201      	movs	r2, #1
 800792a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2224      	movs	r2, #36	; 0x24
 8007932:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f022 0201 	bic.w	r2, r2, #1
 800794c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	683a      	ldr	r2, [r7, #0]
 800795e:	430a      	orrs	r2, r1
 8007960:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 f812 	bl	800798c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	68fa      	ldr	r2, [r7, #12]
 800796e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2220      	movs	r2, #32
 8007974:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2200      	movs	r2, #0
 800797c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007980:	2300      	movs	r3, #0
}
 8007982:	4618      	mov	r0, r3
 8007984:	3710      	adds	r7, #16
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
	...

0800798c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800798c:	b480      	push	{r7}
 800798e:	b085      	sub	sp, #20
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007998:	2b00      	cmp	r3, #0
 800799a:	d108      	bne.n	80079ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2201      	movs	r2, #1
 80079a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80079ac:	e031      	b.n	8007a12 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80079ae:	2308      	movs	r3, #8
 80079b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80079b2:	2308      	movs	r3, #8
 80079b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	0e5b      	lsrs	r3, r3, #25
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	f003 0307 	and.w	r3, r3, #7
 80079c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	0f5b      	lsrs	r3, r3, #29
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	f003 0307 	and.w	r3, r3, #7
 80079d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80079d6:	7bbb      	ldrb	r3, [r7, #14]
 80079d8:	7b3a      	ldrb	r2, [r7, #12]
 80079da:	4911      	ldr	r1, [pc, #68]	; (8007a20 <UARTEx_SetNbDataToProcess+0x94>)
 80079dc:	5c8a      	ldrb	r2, [r1, r2]
 80079de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80079e2:	7b3a      	ldrb	r2, [r7, #12]
 80079e4:	490f      	ldr	r1, [pc, #60]	; (8007a24 <UARTEx_SetNbDataToProcess+0x98>)
 80079e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80079e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80079ec:	b29a      	uxth	r2, r3
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80079f4:	7bfb      	ldrb	r3, [r7, #15]
 80079f6:	7b7a      	ldrb	r2, [r7, #13]
 80079f8:	4909      	ldr	r1, [pc, #36]	; (8007a20 <UARTEx_SetNbDataToProcess+0x94>)
 80079fa:	5c8a      	ldrb	r2, [r1, r2]
 80079fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007a00:	7b7a      	ldrb	r2, [r7, #13]
 8007a02:	4908      	ldr	r1, [pc, #32]	; (8007a24 <UARTEx_SetNbDataToProcess+0x98>)
 8007a04:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a06:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a0a:	b29a      	uxth	r2, r3
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007a12:	bf00      	nop
 8007a14:	3714      	adds	r7, #20
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr
 8007a1e:	bf00      	nop
 8007a20:	0800c2a0 	.word	0x0800c2a0
 8007a24:	0800c2a8 	.word	0x0800c2a8

08007a28 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b088      	sub	sp, #32
 8007a2c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007a32:	f107 0308 	add.w	r3, r7, #8
 8007a36:	2218      	movs	r2, #24
 8007a38:	2100      	movs	r1, #0
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f001 fb24 	bl	8009088 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007a40:	233f      	movs	r3, #63	; 0x3f
 8007a42:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8007a44:	2381      	movs	r3, #129	; 0x81
 8007a46:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007a48:	1dfb      	adds	r3, r7, #7
 8007a4a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007a50:	f107 0308 	add.w	r3, r7, #8
 8007a54:	2100      	movs	r1, #0
 8007a56:	4618      	mov	r0, r3
 8007a58:	f001 f9da 	bl	8008e10 <hci_send_req>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	da01      	bge.n	8007a66 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007a62:	23ff      	movs	r3, #255	; 0xff
 8007a64:	e000      	b.n	8007a68 <aci_gap_set_non_discoverable+0x40>
  return status;
 8007a66:	79fb      	ldrb	r3, [r7, #7]
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3720      	adds	r7, #32
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8007a70:	b5b0      	push	{r4, r5, r7, lr}
 8007a72:	b0ce      	sub	sp, #312	; 0x138
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	4605      	mov	r5, r0
 8007a78:	460c      	mov	r4, r1
 8007a7a:	4610      	mov	r0, r2
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007a82:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8007a86:	462a      	mov	r2, r5
 8007a88:	701a      	strb	r2, [r3, #0]
 8007a8a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007a8e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8007a92:	4622      	mov	r2, r4
 8007a94:	801a      	strh	r2, [r3, #0]
 8007a96:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007a9a:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	801a      	strh	r2, [r3, #0]
 8007aa2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007aa6:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8007aaa:	460a      	mov	r2, r1
 8007aac:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8007aae:	f107 0310 	add.w	r3, r7, #16
 8007ab2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8007ab6:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8007aba:	3308      	adds	r3, #8
 8007abc:	f107 0210 	add.w	r2, r7, #16
 8007ac0:	4413      	add	r3, r2
 8007ac2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8007ac6:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8007aca:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8007ace:	4413      	add	r3, r2
 8007ad0:	3309      	adds	r3, #9
 8007ad2:	f107 0210 	add.w	r2, r7, #16
 8007ad6:	4413      	add	r3, r2
 8007ad8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007adc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007ae0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8007aee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007af2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007af6:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8007afa:	7812      	ldrb	r2, [r2, #0]
 8007afc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007afe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b02:	3301      	adds	r3, #1
 8007b04:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8007b08:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007b0c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007b10:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8007b14:	8812      	ldrh	r2, [r2, #0]
 8007b16:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8007b1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b1e:	3302      	adds	r3, #2
 8007b20:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8007b24:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007b28:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007b2c:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 8007b30:	8812      	ldrh	r2, [r2, #0]
 8007b32:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8007b36:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b3a:	3302      	adds	r3, #2
 8007b3c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8007b40:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007b44:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8007b48:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8007b4c:	7812      	ldrb	r2, [r2, #0]
 8007b4e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007b50:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b54:	3301      	adds	r3, #1
 8007b56:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8007b5a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007b5e:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8007b62:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8007b64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b68:	3301      	adds	r3, #1
 8007b6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8007b6e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007b72:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8007b76:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8007b78:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8007b82:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007b86:	3308      	adds	r3, #8
 8007b88:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8007b8c:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8007b90:	4618      	mov	r0, r3
 8007b92:	f001 fa69 	bl	8009068 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8007b96:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8007b9a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007b9e:	4413      	add	r3, r2
 8007ba0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8007ba4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007ba8:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8007bac:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8007bae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8007bb8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8007bc2:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f001 fa4e 	bl	8009068 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8007bcc:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8007bd0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007bd4:	4413      	add	r3, r2
 8007bd6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8007bda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bde:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8007be2:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8007be4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007be8:	3302      	adds	r3, #2
 8007bea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8007bee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bf2:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8007bf6:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8007bf8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007bfc:	3302      	adds	r3, #2
 8007bfe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007c02:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007c06:	2218      	movs	r2, #24
 8007c08:	2100      	movs	r1, #0
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f001 fa3c 	bl	8009088 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007c10:	233f      	movs	r3, #63	; 0x3f
 8007c12:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8007c16:	2383      	movs	r3, #131	; 0x83
 8007c18:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007c1c:	f107 0310 	add.w	r3, r7, #16
 8007c20:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007c24:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c28:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007c2c:	f107 030f 	add.w	r3, r7, #15
 8007c30:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007c34:	2301      	movs	r3, #1
 8007c36:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007c3a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007c3e:	2100      	movs	r1, #0
 8007c40:	4618      	mov	r0, r3
 8007c42:	f001 f8e5 	bl	8008e10 <hci_send_req>
 8007c46:	4603      	mov	r3, r0
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	da01      	bge.n	8007c50 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8007c4c:	23ff      	movs	r3, #255	; 0xff
 8007c4e:	e004      	b.n	8007c5a <aci_gap_set_discoverable+0x1ea>
  return status;
 8007c50:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007c54:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007c58:	781b      	ldrb	r3, [r3, #0]
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bdb0      	pop	{r4, r5, r7, pc}

08007c64 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b0cc      	sub	sp, #304	; 0x130
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	4602      	mov	r2, r0
 8007c6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c70:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007c74:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8007c76:	f107 0310 	add.w	r3, r7, #16
 8007c7a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007c7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c82:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007c86:	2200      	movs	r2, #0
 8007c88:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8007c90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c94:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007c98:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007c9c:	7812      	ldrb	r2, [r2, #0]
 8007c9e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007ca0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007caa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007cae:	2218      	movs	r2, #24
 8007cb0:	2100      	movs	r1, #0
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f001 f9e8 	bl	8009088 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007cb8:	233f      	movs	r3, #63	; 0x3f
 8007cba:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8007cbe:	2385      	movs	r3, #133	; 0x85
 8007cc0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007cc4:	f107 0310 	add.w	r3, r7, #16
 8007cc8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007ccc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007cd0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007cd4:	f107 030f 	add.w	r3, r7, #15
 8007cd8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007ce2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007ce6:	2100      	movs	r1, #0
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f001 f891 	bl	8008e10 <hci_send_req>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	da01      	bge.n	8007cf8 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8007cf4:	23ff      	movs	r3, #255	; 0xff
 8007cf6:	e004      	b.n	8007d02 <aci_gap_set_io_capability+0x9e>
  return status;
 8007cf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cfc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007d00:	781b      	ldrb	r3, [r3, #0]
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8007d0c:	b5b0      	push	{r4, r5, r7, lr}
 8007d0e:	b0cc      	sub	sp, #304	; 0x130
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	4605      	mov	r5, r0
 8007d14:	460c      	mov	r4, r1
 8007d16:	4610      	mov	r0, r2
 8007d18:	4619      	mov	r1, r3
 8007d1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d1e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007d22:	462a      	mov	r2, r5
 8007d24:	701a      	strb	r2, [r3, #0]
 8007d26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d2a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007d2e:	4622      	mov	r2, r4
 8007d30:	701a      	strb	r2, [r3, #0]
 8007d32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d36:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	701a      	strb	r2, [r3, #0]
 8007d3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d46:	460a      	mov	r2, r1
 8007d48:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8007d4a:	f107 0310 	add.w	r3, r7, #16
 8007d4e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007d52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d56:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8007d64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d68:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007d6c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007d70:	7812      	ldrb	r2, [r2, #0]
 8007d72:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007d74:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d78:	3301      	adds	r3, #1
 8007d7a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8007d7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d82:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007d86:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007d8a:	7812      	ldrb	r2, [r2, #0]
 8007d8c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007d8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d92:	3301      	adds	r3, #1
 8007d94:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8007d98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d9c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007da0:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8007da4:	7812      	ldrb	r2, [r2, #0]
 8007da6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007da8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007dac:	3301      	adds	r3, #1
 8007dae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8007db2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007db6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007dba:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007dbe:	7812      	ldrb	r2, [r2, #0]
 8007dc0:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8007dc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8007dcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dd0:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8007dd4:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007dd6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007dda:	3301      	adds	r3, #1
 8007ddc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8007de0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007de4:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8007de8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007dea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007dee:	3301      	adds	r3, #1
 8007df0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8007df4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007df8:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8007dfc:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8007dfe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e02:	3301      	adds	r3, #1
 8007e04:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8007e08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e0c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8007e10:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8007e14:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e18:	3304      	adds	r3, #4
 8007e1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8007e1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e22:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8007e26:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8007e28:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e2c:	3301      	adds	r3, #1
 8007e2e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007e32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007e36:	2218      	movs	r2, #24
 8007e38:	2100      	movs	r1, #0
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f001 f924 	bl	8009088 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007e40:	233f      	movs	r3, #63	; 0x3f
 8007e42:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8007e46:	2386      	movs	r3, #134	; 0x86
 8007e48:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007e4c:	f107 0310 	add.w	r3, r7, #16
 8007e50:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007e54:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e58:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007e5c:	f107 030f 	add.w	r3, r7, #15
 8007e60:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007e64:	2301      	movs	r3, #1
 8007e66:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007e6a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007e6e:	2100      	movs	r1, #0
 8007e70:	4618      	mov	r0, r3
 8007e72:	f000 ffcd 	bl	8008e10 <hci_send_req>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	da01      	bge.n	8007e80 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8007e7c:	23ff      	movs	r3, #255	; 0xff
 8007e7e:	e004      	b.n	8007e8a <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8007e80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e84:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007e88:	781b      	ldrb	r3, [r3, #0]
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bdb0      	pop	{r4, r5, r7, pc}

08007e94 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b0cc      	sub	sp, #304	; 0x130
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	4602      	mov	r2, r0
 8007e9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ea0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ea4:	6019      	str	r1, [r3, #0]
 8007ea6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eaa:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007eae:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8007eb0:	f107 0310 	add.w	r3, r7, #16
 8007eb4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007eb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ebc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007eca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ece:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007ed2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007ed6:	8812      	ldrh	r2, [r2, #0]
 8007ed8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007eda:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ede:	3302      	adds	r3, #2
 8007ee0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 8007ee4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ee8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007eec:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8007ef0:	6812      	ldr	r2, [r2, #0]
 8007ef2:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8007ef6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007efa:	3304      	adds	r3, #4
 8007efc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007f00:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007f04:	2218      	movs	r2, #24
 8007f06:	2100      	movs	r1, #0
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f001 f8bd 	bl	8009088 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007f0e:	233f      	movs	r3, #63	; 0x3f
 8007f10:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 8007f14:	2388      	movs	r3, #136	; 0x88
 8007f16:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007f1a:	f107 0310 	add.w	r3, r7, #16
 8007f1e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007f22:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f26:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007f2a:	f107 030f 	add.w	r3, r7, #15
 8007f2e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007f32:	2301      	movs	r3, #1
 8007f34:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007f38:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007f3c:	2100      	movs	r1, #0
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f000 ff66 	bl	8008e10 <hci_send_req>
 8007f44:	4603      	mov	r3, r0
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	da01      	bge.n	8007f4e <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8007f4a:	23ff      	movs	r3, #255	; 0xff
 8007f4c:	e004      	b.n	8007f58 <aci_gap_pass_key_resp+0xc4>
  return status;
 8007f4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f52:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007f56:	781b      	ldrb	r3, [r3, #0]
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}

08007f62 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8007f62:	b590      	push	{r4, r7, lr}
 8007f64:	b0cd      	sub	sp, #308	; 0x134
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	4604      	mov	r4, r0
 8007f6a:	4608      	mov	r0, r1
 8007f6c:	4611      	mov	r1, r2
 8007f6e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007f72:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8007f76:	6013      	str	r3, [r2, #0]
 8007f78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f7c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007f80:	4622      	mov	r2, r4
 8007f82:	701a      	strb	r2, [r3, #0]
 8007f84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f88:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	701a      	strb	r2, [r3, #0]
 8007f90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f94:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8007f98:	460a      	mov	r2, r1
 8007f9a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8007f9c:	f107 0310 	add.w	r3, r7, #16
 8007fa0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007fa4:	f107 0308 	add.w	r3, r7, #8
 8007fa8:	2207      	movs	r2, #7
 8007faa:	2100      	movs	r1, #0
 8007fac:	4618      	mov	r0, r3
 8007fae:	f001 f86b 	bl	8009088 <Osal_MemSet>
  int index_input = 0;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8007fb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fbc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007fc0:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007fc4:	7812      	ldrb	r2, [r2, #0]
 8007fc6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007fc8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007fcc:	3301      	adds	r3, #1
 8007fce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8007fd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fd6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007fda:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007fde:	7812      	ldrb	r2, [r2, #0]
 8007fe0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007fe2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8007fec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ff0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007ff4:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8007ff8:	7812      	ldrb	r2, [r2, #0]
 8007ffa:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007ffc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008000:	3301      	adds	r3, #1
 8008002:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008006:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800800a:	2218      	movs	r2, #24
 800800c:	2100      	movs	r1, #0
 800800e:	4618      	mov	r0, r3
 8008010:	f001 f83a 	bl	8009088 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008014:	233f      	movs	r3, #63	; 0x3f
 8008016:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800801a:	238a      	movs	r3, #138	; 0x8a
 800801c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008020:	f107 0310 	add.w	r3, r7, #16
 8008024:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008028:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800802c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8008030:	f107 0308 	add.w	r3, r7, #8
 8008034:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8008038:	2307      	movs	r3, #7
 800803a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800803e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008042:	2100      	movs	r1, #0
 8008044:	4618      	mov	r0, r3
 8008046:	f000 fee3 	bl	8008e10 <hci_send_req>
 800804a:	4603      	mov	r3, r0
 800804c:	2b00      	cmp	r3, #0
 800804e:	da01      	bge.n	8008054 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8008050:	23ff      	movs	r3, #255	; 0xff
 8008052:	e02e      	b.n	80080b2 <aci_gap_init+0x150>
  if ( resp.Status )
 8008054:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008058:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d005      	beq.n	800806e <aci_gap_init+0x10c>
    return resp.Status;
 8008062:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008066:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	e021      	b.n	80080b2 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800806e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008072:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008076:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800807a:	b29a      	uxth	r2, r3
 800807c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008080:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8008088:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800808c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008090:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8008094:	b29a      	uxth	r2, r3
 8008096:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800809a:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800809c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080a0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80080a4:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80080a8:	b29a      	uxth	r2, r3
 80080aa:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80080ae:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80080b0:	2300      	movs	r3, #0
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd90      	pop	{r4, r7, pc}

080080bc <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b0cc      	sub	sp, #304	; 0x130
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	4602      	mov	r2, r0
 80080c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080cc:	6019      	str	r1, [r3, #0]
 80080ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080d2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80080d6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 80080d8:	f107 0310 	add.w	r3, r7, #16
 80080dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80080e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080e4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80080e8:	2200      	movs	r2, #0
 80080ea:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80080ec:	2300      	movs	r3, #0
 80080ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 80080f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080f6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80080fa:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80080fe:	7812      	ldrb	r2, [r2, #0]
 8008100:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008102:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008106:	3301      	adds	r3, #1
 8008108:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800810c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008110:	1c58      	adds	r0, r3, #1
 8008112:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008116:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800811a:	781a      	ldrb	r2, [r3, #0]
 800811c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008120:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008124:	6819      	ldr	r1, [r3, #0]
 8008126:	f000 ff9f 	bl	8009068 <Osal_MemCpy>
  index_input += AdvDataLen;
 800812a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800812e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008138:	4413      	add	r3, r2
 800813a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800813e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008142:	2218      	movs	r2, #24
 8008144:	2100      	movs	r1, #0
 8008146:	4618      	mov	r0, r3
 8008148:	f000 ff9e 	bl	8009088 <Osal_MemSet>
  rq.ogf = 0x3f;
 800814c:	233f      	movs	r3, #63	; 0x3f
 800814e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8008152:	238e      	movs	r3, #142	; 0x8e
 8008154:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008158:	f107 0310 	add.w	r3, r7, #16
 800815c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008160:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008164:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008168:	f107 030f 	add.w	r3, r7, #15
 800816c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008170:	2301      	movs	r3, #1
 8008172:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008176:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800817a:	2100      	movs	r1, #0
 800817c:	4618      	mov	r0, r3
 800817e:	f000 fe47 	bl	8008e10 <hci_send_req>
 8008182:	4603      	mov	r3, r0
 8008184:	2b00      	cmp	r3, #0
 8008186:	da01      	bge.n	800818c <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8008188:	23ff      	movs	r3, #255	; 0xff
 800818a:	e004      	b.n	8008196 <aci_gap_update_adv_data+0xda>
  return status;
 800818c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008190:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008194:	781b      	ldrb	r3, [r3, #0]
}
 8008196:	4618      	mov	r0, r3
 8008198:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}

080081a0 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b088      	sub	sp, #32
 80081a4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80081a6:	2300      	movs	r3, #0
 80081a8:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80081aa:	f107 0308 	add.w	r3, r7, #8
 80081ae:	2218      	movs	r2, #24
 80081b0:	2100      	movs	r1, #0
 80081b2:	4618      	mov	r0, r3
 80081b4:	f000 ff68 	bl	8009088 <Osal_MemSet>
  rq.ogf = 0x3f;
 80081b8:	233f      	movs	r3, #63	; 0x3f
 80081ba:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 80081bc:	2392      	movs	r3, #146	; 0x92
 80081be:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80081c0:	1dfb      	adds	r3, r7, #7
 80081c2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80081c4:	2301      	movs	r3, #1
 80081c6:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80081c8:	f107 0308 	add.w	r3, r7, #8
 80081cc:	2100      	movs	r1, #0
 80081ce:	4618      	mov	r0, r3
 80081d0:	f000 fe1e 	bl	8008e10 <hci_send_req>
 80081d4:	4603      	mov	r3, r0
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	da01      	bge.n	80081de <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 80081da:	23ff      	movs	r3, #255	; 0xff
 80081dc:	e000      	b.n	80081e0 <aci_gap_configure_whitelist+0x40>
  return status;
 80081de:	79fb      	ldrb	r3, [r7, #7]
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3720      	adds	r7, #32
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b0cc      	sub	sp, #304	; 0x130
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	4602      	mov	r2, r0
 80081f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081f4:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80081f8:	801a      	strh	r2, [r3, #0]
 80081fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081fe:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8008202:	460a      	mov	r2, r1
 8008204:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8008206:	f107 0310 	add.w	r3, r7, #16
 800820a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800820e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008212:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008216:	2200      	movs	r2, #0
 8008218:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800821a:	2300      	movs	r3, #0
 800821c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008220:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008224:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008228:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800822c:	8812      	ldrh	r2, [r2, #0]
 800822e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008230:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008234:	3302      	adds	r3, #2
 8008236:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800823a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800823e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008242:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8008246:	7812      	ldrb	r2, [r2, #0]
 8008248:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800824a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800824e:	3301      	adds	r3, #1
 8008250:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008254:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008258:	2218      	movs	r2, #24
 800825a:	2100      	movs	r1, #0
 800825c:	4618      	mov	r0, r3
 800825e:	f000 ff13 	bl	8009088 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008262:	233f      	movs	r3, #63	; 0x3f
 8008264:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 8008268:	23a5      	movs	r3, #165	; 0xa5
 800826a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800826e:	f107 0310 	add.w	r3, r7, #16
 8008272:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008276:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800827a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800827e:	f107 030f 	add.w	r3, r7, #15
 8008282:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008286:	2301      	movs	r3, #1
 8008288:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800828c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008290:	2100      	movs	r1, #0
 8008292:	4618      	mov	r0, r3
 8008294:	f000 fdbc 	bl	8008e10 <hci_send_req>
 8008298:	4603      	mov	r3, r0
 800829a:	2b00      	cmp	r3, #0
 800829c:	da01      	bge.n	80082a2 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 800829e:	23ff      	movs	r3, #255	; 0xff
 80082a0:	e004      	b.n	80082ac <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 80082a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082a6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80082aa:	781b      	ldrb	r3, [r3, #0]
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}

080082b6 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 80082b6:	b580      	push	{r7, lr}
 80082b8:	b088      	sub	sp, #32
 80082ba:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80082bc:	2300      	movs	r3, #0
 80082be:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80082c0:	f107 0308 	add.w	r3, r7, #8
 80082c4:	2218      	movs	r2, #24
 80082c6:	2100      	movs	r1, #0
 80082c8:	4618      	mov	r0, r3
 80082ca:	f000 fedd 	bl	8009088 <Osal_MemSet>
  rq.ogf = 0x3f;
 80082ce:	233f      	movs	r3, #63	; 0x3f
 80082d0:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 80082d2:	f240 1301 	movw	r3, #257	; 0x101
 80082d6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80082d8:	1dfb      	adds	r3, r7, #7
 80082da:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80082dc:	2301      	movs	r3, #1
 80082de:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80082e0:	f107 0308 	add.w	r3, r7, #8
 80082e4:	2100      	movs	r1, #0
 80082e6:	4618      	mov	r0, r3
 80082e8:	f000 fd92 	bl	8008e10 <hci_send_req>
 80082ec:	4603      	mov	r3, r0
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	da01      	bge.n	80082f6 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 80082f2:	23ff      	movs	r3, #255	; 0xff
 80082f4:	e000      	b.n	80082f8 <aci_gatt_init+0x42>
  return status;
 80082f6:	79fb      	ldrb	r3, [r7, #7]
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3720      	adds	r7, #32
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8008300:	b590      	push	{r4, r7, lr}
 8008302:	b0cf      	sub	sp, #316	; 0x13c
 8008304:	af00      	add	r7, sp, #0
 8008306:	4604      	mov	r4, r0
 8008308:	f507 709c 	add.w	r0, r7, #312	; 0x138
 800830c:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8008310:	6001      	str	r1, [r0, #0]
 8008312:	4610      	mov	r0, r2
 8008314:	4619      	mov	r1, r3
 8008316:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800831a:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800831e:	4622      	mov	r2, r4
 8008320:	701a      	strb	r2, [r3, #0]
 8008322:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008326:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800832a:	4602      	mov	r2, r0
 800832c:	701a      	strb	r2, [r3, #0]
 800832e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008332:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8008336:	460a      	mov	r2, r1
 8008338:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800833a:	f107 0310 	add.w	r3, r7, #16
 800833e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8008342:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008346:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800834a:	781b      	ldrb	r3, [r3, #0]
 800834c:	2b01      	cmp	r3, #1
 800834e:	d00a      	beq.n	8008366 <aci_gatt_add_service+0x66>
 8008350:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008354:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008358:	781b      	ldrb	r3, [r3, #0]
 800835a:	2b02      	cmp	r3, #2
 800835c:	d101      	bne.n	8008362 <aci_gatt_add_service+0x62>
 800835e:	2311      	movs	r3, #17
 8008360:	e002      	b.n	8008368 <aci_gatt_add_service+0x68>
 8008362:	2301      	movs	r3, #1
 8008364:	e000      	b.n	8008368 <aci_gatt_add_service+0x68>
 8008366:	2303      	movs	r3, #3
 8008368:	f107 0210 	add.w	r2, r7, #16
 800836c:	4413      	add	r3, r2
 800836e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008372:	f107 030c 	add.w	r3, r7, #12
 8008376:	2203      	movs	r2, #3
 8008378:	2100      	movs	r1, #0
 800837a:	4618      	mov	r0, r3
 800837c:	f000 fe84 	bl	8009088 <Osal_MemSet>
  int index_input = 0;
 8008380:	2300      	movs	r3, #0
 8008382:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8008386:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800838a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800838e:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8008392:	7812      	ldrb	r2, [r2, #0]
 8008394:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008396:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800839a:	3301      	adds	r3, #1
 800839c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 80083a0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80083a4:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d002      	beq.n	80083b4 <aci_gatt_add_service+0xb4>
 80083ae:	2b02      	cmp	r3, #2
 80083b0:	d004      	beq.n	80083bc <aci_gatt_add_service+0xbc>
 80083b2:	e007      	b.n	80083c4 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 80083b4:	2302      	movs	r3, #2
 80083b6:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80083ba:	e005      	b.n	80083c8 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 80083bc:	2310      	movs	r3, #16
 80083be:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80083c2:	e001      	b.n	80083c8 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 80083c4:	2397      	movs	r3, #151	; 0x97
 80083c6:	e06c      	b.n	80084a2 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 80083c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80083cc:	1c58      	adds	r0, r3, #1
 80083ce:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 80083d2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80083d6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80083da:	6819      	ldr	r1, [r3, #0]
 80083dc:	f000 fe44 	bl	8009068 <Osal_MemCpy>
    index_input += size;
 80083e0:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80083e4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80083e8:	4413      	add	r3, r2
 80083ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 80083ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083f2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80083f6:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80083fa:	7812      	ldrb	r2, [r2, #0]
 80083fc:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80083fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008402:	3301      	adds	r3, #1
 8008404:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8008408:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800840c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008410:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8008414:	7812      	ldrb	r2, [r2, #0]
 8008416:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8008418:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800841c:	3301      	adds	r3, #1
 800841e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008422:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008426:	2218      	movs	r2, #24
 8008428:	2100      	movs	r1, #0
 800842a:	4618      	mov	r0, r3
 800842c:	f000 fe2c 	bl	8009088 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008430:	233f      	movs	r3, #63	; 0x3f
 8008432:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8008436:	f44f 7381 	mov.w	r3, #258	; 0x102
 800843a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800843e:	f107 0310 	add.w	r3, r7, #16
 8008442:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008446:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800844a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800844e:	f107 030c 	add.w	r3, r7, #12
 8008452:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8008456:	2303      	movs	r3, #3
 8008458:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800845c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008460:	2100      	movs	r1, #0
 8008462:	4618      	mov	r0, r3
 8008464:	f000 fcd4 	bl	8008e10 <hci_send_req>
 8008468:	4603      	mov	r3, r0
 800846a:	2b00      	cmp	r3, #0
 800846c:	da01      	bge.n	8008472 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800846e:	23ff      	movs	r3, #255	; 0xff
 8008470:	e017      	b.n	80084a2 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8008472:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008476:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d005      	beq.n	800848c <aci_gatt_add_service+0x18c>
    return resp.Status;
 8008480:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008484:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	e00a      	b.n	80084a2 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800848c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008490:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008494:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008498:	b29a      	uxth	r2, r3
 800849a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800849e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80084a0:	2300      	movs	r3, #0
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd90      	pop	{r4, r7, pc}

080084ac <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 80084ac:	b590      	push	{r4, r7, lr}
 80084ae:	b0d1      	sub	sp, #324	; 0x144
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	4604      	mov	r4, r0
 80084b4:	4608      	mov	r0, r1
 80084b6:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 80084ba:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 80084be:	600a      	str	r2, [r1, #0]
 80084c0:	4619      	mov	r1, r3
 80084c2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80084c6:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80084ca:	4622      	mov	r2, r4
 80084cc:	801a      	strh	r2, [r3, #0]
 80084ce:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80084d2:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80084d6:	4602      	mov	r2, r0
 80084d8:	701a      	strb	r2, [r3, #0]
 80084da:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80084de:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 80084e2:	460a      	mov	r2, r1
 80084e4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 80084e6:	f107 0318 	add.w	r3, r7, #24
 80084ea:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 80084ee:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80084f2:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d00a      	beq.n	8008512 <aci_gatt_add_char+0x66>
 80084fc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008500:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	2b02      	cmp	r3, #2
 8008508:	d101      	bne.n	800850e <aci_gatt_add_char+0x62>
 800850a:	2313      	movs	r3, #19
 800850c:	e002      	b.n	8008514 <aci_gatt_add_char+0x68>
 800850e:	2303      	movs	r3, #3
 8008510:	e000      	b.n	8008514 <aci_gatt_add_char+0x68>
 8008512:	2305      	movs	r3, #5
 8008514:	f107 0218 	add.w	r2, r7, #24
 8008518:	4413      	add	r3, r2
 800851a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800851e:	f107 0314 	add.w	r3, r7, #20
 8008522:	2203      	movs	r2, #3
 8008524:	2100      	movs	r1, #0
 8008526:	4618      	mov	r0, r3
 8008528:	f000 fdae 	bl	8009088 <Osal_MemSet>
  int index_input = 0;
 800852c:	2300      	movs	r3, #0
 800852e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8008532:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008536:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800853a:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800853e:	8812      	ldrh	r2, [r2, #0]
 8008540:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008542:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008546:	3302      	adds	r3, #2
 8008548:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800854c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008550:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8008554:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8008558:	7812      	ldrb	r2, [r2, #0]
 800855a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800855c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008560:	3301      	adds	r3, #1
 8008562:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8008566:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800856a:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	2b01      	cmp	r3, #1
 8008572:	d002      	beq.n	800857a <aci_gatt_add_char+0xce>
 8008574:	2b02      	cmp	r3, #2
 8008576:	d004      	beq.n	8008582 <aci_gatt_add_char+0xd6>
 8008578:	e007      	b.n	800858a <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800857a:	2302      	movs	r3, #2
 800857c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8008580:	e005      	b.n	800858e <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8008582:	2310      	movs	r3, #16
 8008584:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8008588:	e001      	b.n	800858e <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800858a:	2397      	movs	r3, #151	; 0x97
 800858c:	e091      	b.n	80086b2 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800858e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008592:	1cd8      	adds	r0, r3, #3
 8008594:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8008598:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800859c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80085a0:	6819      	ldr	r1, [r3, #0]
 80085a2:	f000 fd61 	bl	8009068 <Osal_MemCpy>
    index_input += size;
 80085a6:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80085aa:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80085ae:	4413      	add	r3, r2
 80085b0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 80085b4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80085b8:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80085bc:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 80085c0:	8812      	ldrh	r2, [r2, #0]
 80085c2:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80085c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80085c8:	3302      	adds	r3, #2
 80085ca:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 80085ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80085d2:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80085d6:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 80085d8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80085dc:	3301      	adds	r3, #1
 80085de:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 80085e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80085e6:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80085ea:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 80085ec:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80085f0:	3301      	adds	r3, #1
 80085f2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 80085f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80085fa:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 80085fe:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8008600:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008604:	3301      	adds	r3, #1
 8008606:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800860a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800860e:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8008612:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8008614:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008618:	3301      	adds	r3, #1
 800861a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800861e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008622:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8008626:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8008628:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800862c:	3301      	adds	r3, #1
 800862e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008632:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008636:	2218      	movs	r2, #24
 8008638:	2100      	movs	r1, #0
 800863a:	4618      	mov	r0, r3
 800863c:	f000 fd24 	bl	8009088 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008640:	233f      	movs	r3, #63	; 0x3f
 8008642:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8008646:	f44f 7382 	mov.w	r3, #260	; 0x104
 800864a:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800864e:	f107 0318 	add.w	r3, r7, #24
 8008652:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8008656:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800865a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800865e:	f107 0314 	add.w	r3, r7, #20
 8008662:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8008666:	2303      	movs	r3, #3
 8008668:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800866c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008670:	2100      	movs	r1, #0
 8008672:	4618      	mov	r0, r3
 8008674:	f000 fbcc 	bl	8008e10 <hci_send_req>
 8008678:	4603      	mov	r3, r0
 800867a:	2b00      	cmp	r3, #0
 800867c:	da01      	bge.n	8008682 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800867e:	23ff      	movs	r3, #255	; 0xff
 8008680:	e017      	b.n	80086b2 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8008682:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008686:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d005      	beq.n	800869c <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8008690:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008694:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	e00a      	b.n	80086b2 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800869c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80086a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80086a4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80086a8:	b29a      	uxth	r2, r3
 80086aa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80086ae:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80086b0:	2300      	movs	r3, #0
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd90      	pop	{r4, r7, pc}

080086bc <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 80086bc:	b5b0      	push	{r4, r5, r7, lr}
 80086be:	b0cc      	sub	sp, #304	; 0x130
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	4605      	mov	r5, r0
 80086c4:	460c      	mov	r4, r1
 80086c6:	4610      	mov	r0, r2
 80086c8:	4619      	mov	r1, r3
 80086ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086ce:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80086d2:	462a      	mov	r2, r5
 80086d4:	801a      	strh	r2, [r3, #0]
 80086d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80086de:	4622      	mov	r2, r4
 80086e0:	801a      	strh	r2, [r3, #0]
 80086e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086e6:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80086ea:	4602      	mov	r2, r0
 80086ec:	701a      	strb	r2, [r3, #0]
 80086ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086f2:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80086f6:	460a      	mov	r2, r1
 80086f8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 80086fa:	f107 0310 	add.w	r3, r7, #16
 80086fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008702:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008706:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800870a:	2200      	movs	r2, #0
 800870c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800870e:	2300      	movs	r3, #0
 8008710:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8008714:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008718:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800871c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008720:	8812      	ldrh	r2, [r2, #0]
 8008722:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008724:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008728:	3302      	adds	r3, #2
 800872a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800872e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008732:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008736:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800873a:	8812      	ldrh	r2, [r2, #0]
 800873c:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800873e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008742:	3302      	adds	r3, #2
 8008744:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8008748:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800874c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008750:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8008754:	7812      	ldrb	r2, [r2, #0]
 8008756:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008758:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800875c:	3301      	adds	r3, #1
 800875e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8008762:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008766:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800876a:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800876e:	7812      	ldrb	r2, [r2, #0]
 8008770:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008772:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008776:	3301      	adds	r3, #1
 8008778:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800877c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008780:	1d98      	adds	r0, r3, #6
 8008782:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008786:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	461a      	mov	r2, r3
 800878e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8008792:	f000 fc69 	bl	8009068 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8008796:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800879a:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800879e:	781b      	ldrb	r3, [r3, #0]
 80087a0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80087a4:	4413      	add	r3, r2
 80087a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80087aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80087ae:	2218      	movs	r2, #24
 80087b0:	2100      	movs	r1, #0
 80087b2:	4618      	mov	r0, r3
 80087b4:	f000 fc68 	bl	8009088 <Osal_MemSet>
  rq.ogf = 0x3f;
 80087b8:	233f      	movs	r3, #63	; 0x3f
 80087ba:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 80087be:	f44f 7383 	mov.w	r3, #262	; 0x106
 80087c2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80087c6:	f107 0310 	add.w	r3, r7, #16
 80087ca:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80087ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80087d2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80087d6:	f107 030f 	add.w	r3, r7, #15
 80087da:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80087de:	2301      	movs	r3, #1
 80087e0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80087e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80087e8:	2100      	movs	r1, #0
 80087ea:	4618      	mov	r0, r3
 80087ec:	f000 fb10 	bl	8008e10 <hci_send_req>
 80087f0:	4603      	mov	r3, r0
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	da01      	bge.n	80087fa <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 80087f6:	23ff      	movs	r3, #255	; 0xff
 80087f8:	e004      	b.n	8008804 <aci_gatt_update_char_value+0x148>
  return status;
 80087fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087fe:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008802:	781b      	ldrb	r3, [r3, #0]
}
 8008804:	4618      	mov	r0, r3
 8008806:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800880a:	46bd      	mov	sp, r7
 800880c:	bdb0      	pop	{r4, r5, r7, pc}

0800880e <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800880e:	b580      	push	{r7, lr}
 8008810:	b0cc      	sub	sp, #304	; 0x130
 8008812:	af00      	add	r7, sp, #0
 8008814:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008818:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800881c:	601a      	str	r2, [r3, #0]
 800881e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008822:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008826:	4602      	mov	r2, r0
 8008828:	701a      	strb	r2, [r3, #0]
 800882a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800882e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008832:	460a      	mov	r2, r1
 8008834:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8008836:	f107 0310 	add.w	r3, r7, #16
 800883a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800883e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008842:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008846:	2200      	movs	r2, #0
 8008848:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800884a:	2300      	movs	r3, #0
 800884c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8008850:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008854:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008858:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800885c:	7812      	ldrb	r2, [r2, #0]
 800885e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008860:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008864:	3301      	adds	r3, #1
 8008866:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800886a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800886e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008872:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008876:	7812      	ldrb	r2, [r2, #0]
 8008878:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800887a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800887e:	3301      	adds	r3, #1
 8008880:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8008884:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008888:	1c98      	adds	r0, r3, #2
 800888a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800888e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008892:	781a      	ldrb	r2, [r3, #0]
 8008894:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008898:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800889c:	6819      	ldr	r1, [r3, #0]
 800889e:	f000 fbe3 	bl	8009068 <Osal_MemCpy>
  index_input += Length;
 80088a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088a6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80088aa:	781b      	ldrb	r3, [r3, #0]
 80088ac:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80088b0:	4413      	add	r3, r2
 80088b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80088b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80088ba:	2218      	movs	r2, #24
 80088bc:	2100      	movs	r1, #0
 80088be:	4618      	mov	r0, r3
 80088c0:	f000 fbe2 	bl	8009088 <Osal_MemSet>
  rq.ogf = 0x3f;
 80088c4:	233f      	movs	r3, #63	; 0x3f
 80088c6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 80088ca:	230c      	movs	r3, #12
 80088cc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80088d0:	f107 0310 	add.w	r3, r7, #16
 80088d4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80088d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80088dc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80088e0:	f107 030f 	add.w	r3, r7, #15
 80088e4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80088e8:	2301      	movs	r3, #1
 80088ea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80088ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80088f2:	2100      	movs	r1, #0
 80088f4:	4618      	mov	r0, r3
 80088f6:	f000 fa8b 	bl	8008e10 <hci_send_req>
 80088fa:	4603      	mov	r3, r0
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	da01      	bge.n	8008904 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8008900:	23ff      	movs	r3, #255	; 0xff
 8008902:	e004      	b.n	800890e <aci_hal_write_config_data+0x100>
  return status;
 8008904:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008908:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800890c:	781b      	ldrb	r3, [r3, #0]
}
 800890e:	4618      	mov	r0, r3
 8008910:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b0cc      	sub	sp, #304	; 0x130
 800891c:	af00      	add	r7, sp, #0
 800891e:	4602      	mov	r2, r0
 8008920:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008924:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008928:	701a      	strb	r2, [r3, #0]
 800892a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800892e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008932:	460a      	mov	r2, r1
 8008934:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8008936:	f107 0310 	add.w	r3, r7, #16
 800893a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800893e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008942:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008946:	2200      	movs	r2, #0
 8008948:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800894a:	2300      	movs	r3, #0
 800894c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8008950:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008954:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008958:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800895c:	7812      	ldrb	r2, [r2, #0]
 800895e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008960:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008964:	3301      	adds	r3, #1
 8008966:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800896a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800896e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008972:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008976:	7812      	ldrb	r2, [r2, #0]
 8008978:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800897a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800897e:	3301      	adds	r3, #1
 8008980:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008984:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008988:	2218      	movs	r2, #24
 800898a:	2100      	movs	r1, #0
 800898c:	4618      	mov	r0, r3
 800898e:	f000 fb7b 	bl	8009088 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008992:	233f      	movs	r3, #63	; 0x3f
 8008994:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8008998:	230f      	movs	r3, #15
 800899a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800899e:	f107 0310 	add.w	r3, r7, #16
 80089a2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80089a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80089aa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80089ae:	f107 030f 	add.w	r3, r7, #15
 80089b2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80089b6:	2301      	movs	r3, #1
 80089b8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80089bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80089c0:	2100      	movs	r1, #0
 80089c2:	4618      	mov	r0, r3
 80089c4:	f000 fa24 	bl	8008e10 <hci_send_req>
 80089c8:	4603      	mov	r3, r0
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	da01      	bge.n	80089d2 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 80089ce:	23ff      	movs	r3, #255	; 0xff
 80089d0:	e004      	b.n	80089dc <aci_hal_set_tx_power_level+0xc4>
  return status;
 80089d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089d6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80089da:	781b      	ldrb	r3, [r3, #0]
}
 80089dc:	4618      	mov	r0, r3
 80089de:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}

080089e6 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 80089e6:	b580      	push	{r7, lr}
 80089e8:	b0cc      	sub	sp, #304	; 0x130
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	4602      	mov	r2, r0
 80089ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089f2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80089f6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 80089f8:	f107 0310 	add.w	r3, r7, #16
 80089fc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008a00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a04:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008a08:	2200      	movs	r2, #0
 8008a0a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8008a12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a16:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008a1a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008a1e:	8812      	ldrh	r2, [r2, #0]
 8008a20:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008a22:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a26:	3302      	adds	r3, #2
 8008a28:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008a2c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008a30:	2218      	movs	r2, #24
 8008a32:	2100      	movs	r1, #0
 8008a34:	4618      	mov	r0, r3
 8008a36:	f000 fb27 	bl	8009088 <Osal_MemSet>
  rq.ogf = 0x3f;
 8008a3a:	233f      	movs	r3, #63	; 0x3f
 8008a3c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8008a40:	2318      	movs	r3, #24
 8008a42:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008a46:	f107 0310 	add.w	r3, r7, #16
 8008a4a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008a4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a52:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008a56:	f107 030f 	add.w	r3, r7, #15
 8008a5a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008a64:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008a68:	2100      	movs	r1, #0
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f000 f9d0 	bl	8008e10 <hci_send_req>
 8008a70:	4603      	mov	r3, r0
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	da01      	bge.n	8008a7a <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8008a76:	23ff      	movs	r3, #255	; 0xff
 8008a78:	e004      	b.n	8008a84 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8008a7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a7e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008a82:	781b      	ldrb	r3, [r3, #0]
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8008a8e:	b580      	push	{r7, lr}
 8008a90:	b088      	sub	sp, #32
 8008a92:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008a94:	2300      	movs	r3, #0
 8008a96:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008a98:	f107 0308 	add.w	r3, r7, #8
 8008a9c:	2218      	movs	r2, #24
 8008a9e:	2100      	movs	r1, #0
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f000 faf1 	bl	8009088 <Osal_MemSet>
  rq.ogf = 0x03;
 8008aa6:	2303      	movs	r3, #3
 8008aa8:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8008aaa:	2303      	movs	r3, #3
 8008aac:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008aae:	1dfb      	adds	r3, r7, #7
 8008ab0:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008ab6:	f107 0308 	add.w	r3, r7, #8
 8008aba:	2100      	movs	r1, #0
 8008abc:	4618      	mov	r0, r3
 8008abe:	f000 f9a7 	bl	8008e10 <hci_send_req>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	da01      	bge.n	8008acc <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008ac8:	23ff      	movs	r3, #255	; 0xff
 8008aca:	e000      	b.n	8008ace <hci_reset+0x40>
  return status;
 8008acc:	79fb      	ldrb	r3, [r7, #7]
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3720      	adds	r7, #32
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}

08008ad6 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8008ad6:	b590      	push	{r4, r7, lr}
 8008ad8:	b0cd      	sub	sp, #308	; 0x134
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	4604      	mov	r4, r0
 8008ade:	4608      	mov	r0, r1
 8008ae0:	4611      	mov	r1, r2
 8008ae2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ae6:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008aea:	4622      	mov	r2, r4
 8008aec:	701a      	strb	r2, [r3, #0]
 8008aee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008af2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008af6:	4602      	mov	r2, r0
 8008af8:	701a      	strb	r2, [r3, #0]
 8008afa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008afe:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8008b02:	460a      	mov	r2, r1
 8008b04:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8008b06:	f107 0310 	add.w	r3, r7, #16
 8008b0a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008b0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b12:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008b16:	2200      	movs	r2, #0
 8008b18:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8008b20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b24:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008b28:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008b2c:	7812      	ldrb	r2, [r2, #0]
 8008b2e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008b30:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b34:	3301      	adds	r3, #1
 8008b36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8008b3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b3e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008b42:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008b46:	7812      	ldrb	r2, [r2, #0]
 8008b48:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008b4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b4e:	3301      	adds	r3, #1
 8008b50:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8008b54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b58:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008b5c:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8008b60:	7812      	ldrb	r2, [r2, #0]
 8008b62:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008b64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b68:	3301      	adds	r3, #1
 8008b6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008b6e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008b72:	2218      	movs	r2, #24
 8008b74:	2100      	movs	r1, #0
 8008b76:	4618      	mov	r0, r3
 8008b78:	f000 fa86 	bl	8009088 <Osal_MemSet>
  rq.ogf = 0x08;
 8008b7c:	2308      	movs	r3, #8
 8008b7e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8008b82:	2331      	movs	r3, #49	; 0x31
 8008b84:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008b88:	f107 0310 	add.w	r3, r7, #16
 8008b8c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008b90:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b94:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008b98:	f107 030f 	add.w	r3, r7, #15
 8008b9c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008ba6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008baa:	2100      	movs	r1, #0
 8008bac:	4618      	mov	r0, r3
 8008bae:	f000 f92f 	bl	8008e10 <hci_send_req>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	da01      	bge.n	8008bbc <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8008bb8:	23ff      	movs	r3, #255	; 0xff
 8008bba:	e004      	b.n	8008bc6 <hci_le_set_default_phy+0xf0>
  return status;
 8008bbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bc0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008bc4:	781b      	ldrb	r3, [r3, #0]
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd90      	pop	{r4, r7, pc}

08008bd0 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b086      	sub	sp, #24
 8008bd4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bd6:	f3ef 8310 	mrs	r3, PRIMASK
 8008bda:	60fb      	str	r3, [r7, #12]
  return(result);
 8008bdc:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 8008bde:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008be0:	b672      	cpsid	i
}
 8008be2:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 8008be4:	1cbb      	adds	r3, r7, #2
 8008be6:	4619      	mov	r1, r3
 8008be8:	4812      	ldr	r0, [pc, #72]	; (8008c34 <DbgTrace_TxCpltCallback+0x64>)
 8008bea:	f000 ffc2 	bl	8009b72 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 8008bee:	1cbb      	adds	r3, r7, #2
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	4810      	ldr	r0, [pc, #64]	; (8008c34 <DbgTrace_TxCpltCallback+0x64>)
 8008bf4:	f001 f8ae 	bl	8009d54 <CircularQueue_Sense>
 8008bf8:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d00c      	beq.n	8008c1a <DbgTrace_TxCpltCallback+0x4a>
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	f383 8810 	msr	PRIMASK, r3
}
 8008c0a:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 8008c0c:	887b      	ldrh	r3, [r7, #2]
 8008c0e:	4a0a      	ldr	r2, [pc, #40]	; (8008c38 <DbgTrace_TxCpltCallback+0x68>)
 8008c10:	4619      	mov	r1, r3
 8008c12:	6938      	ldr	r0, [r7, #16]
 8008c14:	f7f7 fdb7 	bl	8000786 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 8008c18:	e008      	b.n	8008c2c <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 8008c1a:	4b08      	ldr	r3, [pc, #32]	; (8008c3c <DbgTrace_TxCpltCallback+0x6c>)
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	701a      	strb	r2, [r3, #0]
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f383 8810 	msr	PRIMASK, r3
}
 8008c2a:	bf00      	nop
}
 8008c2c:	bf00      	nop
 8008c2e:	3718      	adds	r7, #24
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}
 8008c34:	200006a0 	.word	0x200006a0
 8008c38:	08008bd1 	.word	0x08008bd1
 8008c3c:	20000029 	.word	0x20000029

08008c40 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b082      	sub	sp, #8
 8008c44:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 8008c46:	f7f7 fd98 	bl	800077a <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 8008c4a:	2302      	movs	r3, #2
 8008c4c:	9300      	str	r3, [sp, #0]
 8008c4e:	2300      	movs	r3, #0
 8008c50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008c54:	4903      	ldr	r1, [pc, #12]	; (8008c64 <DbgTraceInit+0x24>)
 8008c56:	4804      	ldr	r0, [pc, #16]	; (8008c68 <DbgTraceInit+0x28>)
 8008c58:	f000 fd32 	bl	80096c0 <CircularQueue_Init>
#endif 
#endif
  return;
 8008c5c:	bf00      	nop
}
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	bf00      	nop
 8008c64:	200006c0 	.word	0x200006c0
 8008c68:	200006a0 	.word	0x200006a0

08008c6c <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b084      	sub	sp, #16
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	60f8      	str	r0, [r7, #12]
 8008c74:	60b9      	str	r1, [r7, #8]
 8008c76:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	68b9      	ldr	r1, [r7, #8]
 8008c7c:	68f8      	ldr	r0, [r7, #12]
 8008c7e:	f000 f805 	bl	8008c8c <DbgTraceWrite>
 8008c82:	4603      	mov	r3, r0
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3710      	adds	r7, #16
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b08a      	sub	sp, #40	; 0x28
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	60f8      	str	r0, [r7, #12]
 8008c94:	60b9      	str	r1, [r7, #8]
 8008c96:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c9c:	f3ef 8310 	mrs	r3, PRIMASK
 8008ca0:	61bb      	str	r3, [r7, #24]
  return(result);
 8008ca2:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 8008ca4:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008cac:	d102      	bne.n	8008cb4 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8008cb2:	e037      	b.n	8008d24 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d006      	beq.n	8008cc8 <DbgTraceWrite+0x3c>
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2b02      	cmp	r3, #2
 8008cbe:	d003      	beq.n	8008cc8 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 8008cc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8008cc6:	e02d      	b.n	8008d24 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d02a      	beq.n	8008d24 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8008cd2:	b672      	cpsid	i
}
 8008cd4:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	b29a      	uxth	r2, r3
 8008cda:	2301      	movs	r3, #1
 8008cdc:	68b9      	ldr	r1, [r7, #8]
 8008cde:	4814      	ldr	r0, [pc, #80]	; (8008d30 <DbgTraceWrite+0xa4>)
 8008ce0:	f000 fd20 	bl	8009724 <CircularQueue_Add>
 8008ce4:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 8008ce6:	69fb      	ldr	r3, [r7, #28]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d015      	beq.n	8008d18 <DbgTraceWrite+0x8c>
 8008cec:	4b11      	ldr	r3, [pc, #68]	; (8008d34 <DbgTraceWrite+0xa8>)
 8008cee:	781b      	ldrb	r3, [r3, #0]
 8008cf0:	b2db      	uxtb	r3, r3
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d010      	beq.n	8008d18 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 8008cf6:	4b0f      	ldr	r3, [pc, #60]	; (8008d34 <DbgTraceWrite+0xa8>)
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	701a      	strb	r2, [r3, #0]
 8008cfc:	6a3b      	ldr	r3, [r7, #32]
 8008cfe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	f383 8810 	msr	PRIMASK, r3
}
 8008d06:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	4a0a      	ldr	r2, [pc, #40]	; (8008d38 <DbgTraceWrite+0xac>)
 8008d0e:	4619      	mov	r1, r3
 8008d10:	69f8      	ldr	r0, [r7, #28]
 8008d12:	f7f7 fd38 	bl	8000786 <DbgOutputTraces>
 8008d16:	e005      	b.n	8008d24 <DbgTraceWrite+0x98>
 8008d18:	6a3b      	ldr	r3, [r7, #32]
 8008d1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	f383 8810 	msr	PRIMASK, r3
}
 8008d22:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 8008d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3728      	adds	r7, #40	; 0x28
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
 8008d2e:	bf00      	nop
 8008d30:	200006a0 	.word	0x200006a0
 8008d34:	20000029 	.word	0x20000029
 8008d38:	08008bd1 	.word	0x08008bd1

08008d3c <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	4a08      	ldr	r2, [pc, #32]	; (8008d6c <hci_init+0x30>)
 8008d4c:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8008d4e:	4a08      	ldr	r2, [pc, #32]	; (8008d70 <hci_init+0x34>)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8008d54:	4806      	ldr	r0, [pc, #24]	; (8008d70 <hci_init+0x34>)
 8008d56:	f000 f973 	bl	8009040 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f000 f8d4 	bl	8008f0c <TlInit>

  return;
 8008d64:	bf00      	nop
}
 8008d66:	3708      	adds	r7, #8
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}
 8008d6c:	200016e8 	.word	0x200016e8
 8008d70:	200016c0 	.word	0x200016c0

08008d74 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b084      	sub	sp, #16
 8008d78:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8008d7a:	4822      	ldr	r0, [pc, #136]	; (8008e04 <hci_user_evt_proc+0x90>)
 8008d7c:	f000 fbf2 	bl	8009564 <LST_is_empty>
 8008d80:	4603      	mov	r3, r0
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d12b      	bne.n	8008dde <hci_user_evt_proc+0x6a>
 8008d86:	4b20      	ldr	r3, [pc, #128]	; (8008e08 <hci_user_evt_proc+0x94>)
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d027      	beq.n	8008dde <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8008d8e:	f107 030c 	add.w	r3, r7, #12
 8008d92:	4619      	mov	r1, r3
 8008d94:	481b      	ldr	r0, [pc, #108]	; (8008e04 <hci_user_evt_proc+0x90>)
 8008d96:	f000 fc74 	bl	8009682 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8008d9a:	4b1c      	ldr	r3, [pc, #112]	; (8008e0c <hci_user_evt_proc+0x98>)
 8008d9c:	69db      	ldr	r3, [r3, #28]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d00c      	beq.n	8008dbc <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8008da6:	2301      	movs	r3, #1
 8008da8:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8008daa:	4b18      	ldr	r3, [pc, #96]	; (8008e0c <hci_user_evt_proc+0x98>)
 8008dac:	69db      	ldr	r3, [r3, #28]
 8008dae:	1d3a      	adds	r2, r7, #4
 8008db0:	4610      	mov	r0, r2
 8008db2:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8008db4:	793a      	ldrb	r2, [r7, #4]
 8008db6:	4b14      	ldr	r3, [pc, #80]	; (8008e08 <hci_user_evt_proc+0x94>)
 8008db8:	701a      	strb	r2, [r3, #0]
 8008dba:	e002      	b.n	8008dc2 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8008dbc:	4b12      	ldr	r3, [pc, #72]	; (8008e08 <hci_user_evt_proc+0x94>)
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8008dc2:	4b11      	ldr	r3, [pc, #68]	; (8008e08 <hci_user_evt_proc+0x94>)
 8008dc4:	781b      	ldrb	r3, [r3, #0]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d004      	beq.n	8008dd4 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f001 fb19 	bl	800a404 <TL_MM_EvtDone>
 8008dd2:	e004      	b.n	8008dde <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	480a      	ldr	r0, [pc, #40]	; (8008e04 <hci_user_evt_proc+0x90>)
 8008dda:	f000 fbe5 	bl	80095a8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8008dde:	4809      	ldr	r0, [pc, #36]	; (8008e04 <hci_user_evt_proc+0x90>)
 8008de0:	f000 fbc0 	bl	8009564 <LST_is_empty>
 8008de4:	4603      	mov	r3, r0
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d107      	bne.n	8008dfa <hci_user_evt_proc+0x86>
 8008dea:	4b07      	ldr	r3, [pc, #28]	; (8008e08 <hci_user_evt_proc+0x94>)
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d003      	beq.n	8008dfa <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8008df2:	4804      	ldr	r0, [pc, #16]	; (8008e04 <hci_user_evt_proc+0x90>)
 8008df4:	f7f9 feb0 	bl	8002b58 <hci_notify_asynch_evt>
  }


  return;
 8008df8:	bf00      	nop
 8008dfa:	bf00      	nop
}
 8008dfc:	3710      	adds	r7, #16
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
 8008e02:	bf00      	nop
 8008e04:	200001c8 	.word	0x200001c8
 8008e08:	200001d4 	.word	0x200001d4
 8008e0c:	200016c0 	.word	0x200016c0

08008e10 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b088      	sub	sp, #32
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
 8008e18:	460b      	mov	r3, r1
 8008e1a:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8008e1c:	2000      	movs	r0, #0
 8008e1e:	f000 f8cb 	bl	8008fb8 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8008e22:	2300      	movs	r3, #0
 8008e24:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	885b      	ldrh	r3, [r3, #2]
 8008e2a:	b21b      	sxth	r3, r3
 8008e2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e30:	b21a      	sxth	r2, r3
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	881b      	ldrh	r3, [r3, #0]
 8008e36:	029b      	lsls	r3, r3, #10
 8008e38:	b21b      	sxth	r3, r3
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	b21b      	sxth	r3, r3
 8008e3e:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	68db      	ldr	r3, [r3, #12]
 8008e44:	b2d9      	uxtb	r1, r3
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	689a      	ldr	r2, [r3, #8]
 8008e4a:	8bbb      	ldrh	r3, [r7, #28]
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f000 f88d 	bl	8008f6c <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8008e52:	e04e      	b.n	8008ef2 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8008e54:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8008e58:	f7f9 fe95 	bl	8002b86 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8008e5c:	e043      	b.n	8008ee6 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8008e5e:	f107 030c 	add.w	r3, r7, #12
 8008e62:	4619      	mov	r1, r3
 8008e64:	4828      	ldr	r0, [pc, #160]	; (8008f08 <hci_send_req+0xf8>)
 8008e66:	f000 fc0c 	bl	8009682 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	7a5b      	ldrb	r3, [r3, #9]
 8008e6e:	2b0f      	cmp	r3, #15
 8008e70:	d114      	bne.n	8008e9c <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	330b      	adds	r3, #11
 8008e76:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	885b      	ldrh	r3, [r3, #2]
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	8bba      	ldrh	r2, [r7, #28]
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d104      	bne.n	8008e8e <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	691b      	ldr	r3, [r3, #16]
 8008e88:	693a      	ldr	r2, [r7, #16]
 8008e8a:	7812      	ldrb	r2, [r2, #0]
 8008e8c:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	785b      	ldrb	r3, [r3, #1]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d027      	beq.n	8008ee6 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8008e96:	2301      	movs	r3, #1
 8008e98:	77fb      	strb	r3, [r7, #31]
 8008e9a:	e024      	b.n	8008ee6 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	330b      	adds	r3, #11
 8008ea0:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8008ea2:	69bb      	ldr	r3, [r7, #24]
 8008ea4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	8bba      	ldrh	r2, [r7, #28]
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d114      	bne.n	8008eda <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	7a9b      	ldrb	r3, [r3, #10]
 8008eb4:	3b03      	subs	r3, #3
 8008eb6:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	695a      	ldr	r2, [r3, #20]
 8008ebc:	7dfb      	ldrb	r3, [r7, #23]
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	bfa8      	it	ge
 8008ec2:	461a      	movge	r2, r3
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6918      	ldr	r0, [r3, #16]
 8008ecc:	69bb      	ldr	r3, [r7, #24]
 8008ece:	1cd9      	adds	r1, r3, #3
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	695b      	ldr	r3, [r3, #20]
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	f001 fdf3 	bl	800aac0 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8008eda:	69bb      	ldr	r3, [r7, #24]
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d001      	beq.n	8008ee6 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8008ee6:	4808      	ldr	r0, [pc, #32]	; (8008f08 <hci_send_req+0xf8>)
 8008ee8:	f000 fb3c 	bl	8009564 <LST_is_empty>
 8008eec:	4603      	mov	r3, r0
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d0b5      	beq.n	8008e5e <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8008ef2:	7ffb      	ldrb	r3, [r7, #31]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d0ad      	beq.n	8008e54 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8008ef8:	2001      	movs	r0, #1
 8008efa:	f000 f85d 	bl	8008fb8 <NotifyCmdStatus>

  return 0;
 8008efe:	2300      	movs	r3, #0
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3720      	adds	r7, #32
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}
 8008f08:	200016e0 	.word	0x200016e0

08008f0c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b086      	sub	sp, #24
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8008f14:	480f      	ldr	r0, [pc, #60]	; (8008f54 <TlInit+0x48>)
 8008f16:	f000 fb15 	bl	8009544 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8008f1a:	4a0f      	ldr	r2, [pc, #60]	; (8008f58 <TlInit+0x4c>)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8008f20:	480e      	ldr	r0, [pc, #56]	; (8008f5c <TlInit+0x50>)
 8008f22:	f000 fb0f 	bl	8009544 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8008f26:	4b0e      	ldr	r3, [pc, #56]	; (8008f60 <TlInit+0x54>)
 8008f28:	2201      	movs	r2, #1
 8008f2a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8008f2c:	4b0d      	ldr	r3, [pc, #52]	; (8008f64 <TlInit+0x58>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d00a      	beq.n	8008f4a <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8008f38:	4b0b      	ldr	r3, [pc, #44]	; (8008f68 <TlInit+0x5c>)
 8008f3a:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8008f3c:	4b09      	ldr	r3, [pc, #36]	; (8008f64 <TlInit+0x58>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f107 0208 	add.w	r2, r7, #8
 8008f44:	4610      	mov	r0, r2
 8008f46:	4798      	blx	r3
  }

  return;
 8008f48:	bf00      	nop
 8008f4a:	bf00      	nop
}
 8008f4c:	3718      	adds	r7, #24
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
 8008f52:	bf00      	nop
 8008f54:	200016e0 	.word	0x200016e0
 8008f58:	200001d0 	.word	0x200001d0
 8008f5c:	200001c8 	.word	0x200001c8
 8008f60:	200001d4 	.word	0x200001d4
 8008f64:	200016c0 	.word	0x200016c0
 8008f68:	08008ff9 	.word	0x08008ff9

08008f6c <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b082      	sub	sp, #8
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	4603      	mov	r3, r0
 8008f74:	603a      	str	r2, [r7, #0]
 8008f76:	80fb      	strh	r3, [r7, #6]
 8008f78:	460b      	mov	r3, r1
 8008f7a:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8008f7c:	4b0c      	ldr	r3, [pc, #48]	; (8008fb0 <SendCmd+0x44>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	88fa      	ldrh	r2, [r7, #6]
 8008f82:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8008f86:	4b0a      	ldr	r3, [pc, #40]	; (8008fb0 <SendCmd+0x44>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	797a      	ldrb	r2, [r7, #5]
 8008f8c:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8008f8e:	4b08      	ldr	r3, [pc, #32]	; (8008fb0 <SendCmd+0x44>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	330c      	adds	r3, #12
 8008f94:	797a      	ldrb	r2, [r7, #5]
 8008f96:	6839      	ldr	r1, [r7, #0]
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f001 fd91 	bl	800aac0 <memcpy>

  hciContext.io.Send(0,0);
 8008f9e:	4b05      	ldr	r3, [pc, #20]	; (8008fb4 <SendCmd+0x48>)
 8008fa0:	691b      	ldr	r3, [r3, #16]
 8008fa2:	2100      	movs	r1, #0
 8008fa4:	2000      	movs	r0, #0
 8008fa6:	4798      	blx	r3

  return;
 8008fa8:	bf00      	nop
}
 8008faa:	3708      	adds	r7, #8
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}
 8008fb0:	200001d0 	.word	0x200001d0
 8008fb4:	200016c0 	.word	0x200016c0

08008fb8 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b082      	sub	sp, #8
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8008fc2:	79fb      	ldrb	r3, [r7, #7]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d108      	bne.n	8008fda <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8008fc8:	4b0a      	ldr	r3, [pc, #40]	; (8008ff4 <NotifyCmdStatus+0x3c>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d00d      	beq.n	8008fec <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8008fd0:	4b08      	ldr	r3, [pc, #32]	; (8008ff4 <NotifyCmdStatus+0x3c>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	2000      	movs	r0, #0
 8008fd6:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8008fd8:	e008      	b.n	8008fec <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8008fda:	4b06      	ldr	r3, [pc, #24]	; (8008ff4 <NotifyCmdStatus+0x3c>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d004      	beq.n	8008fec <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8008fe2:	4b04      	ldr	r3, [pc, #16]	; (8008ff4 <NotifyCmdStatus+0x3c>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	2001      	movs	r0, #1
 8008fe8:	4798      	blx	r3
  return;
 8008fea:	bf00      	nop
 8008fec:	bf00      	nop
}
 8008fee:	3708      	adds	r7, #8
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}
 8008ff4:	200016e8 	.word	0x200016e8

08008ff8 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	7a5b      	ldrb	r3, [r3, #9]
 8009004:	2b0f      	cmp	r3, #15
 8009006:	d003      	beq.n	8009010 <TlEvtReceived+0x18>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	7a5b      	ldrb	r3, [r3, #9]
 800900c:	2b0e      	cmp	r3, #14
 800900e:	d107      	bne.n	8009020 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8009010:	6879      	ldr	r1, [r7, #4]
 8009012:	4809      	ldr	r0, [pc, #36]	; (8009038 <TlEvtReceived+0x40>)
 8009014:	f000 faee 	bl	80095f4 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8009018:	2000      	movs	r0, #0
 800901a:	f7f9 fda9 	bl	8002b70 <hci_cmd_resp_release>
 800901e:	e006      	b.n	800902e <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8009020:	6879      	ldr	r1, [r7, #4]
 8009022:	4806      	ldr	r0, [pc, #24]	; (800903c <TlEvtReceived+0x44>)
 8009024:	f000 fae6 	bl	80095f4 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009028:	4804      	ldr	r0, [pc, #16]	; (800903c <TlEvtReceived+0x44>)
 800902a:	f7f9 fd95 	bl	8002b58 <hci_notify_asynch_evt>
  }

  return;
 800902e:	bf00      	nop
}
 8009030:	3708      	adds	r7, #8
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
 8009036:	bf00      	nop
 8009038:	200016e0 	.word	0x200016e0
 800903c:	200001c8 	.word	0x200001c8

08009040 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8009040:	b480      	push	{r7}
 8009042:	b083      	sub	sp, #12
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	4a05      	ldr	r2, [pc, #20]	; (8009060 <hci_register_io_bus+0x20>)
 800904c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	4a04      	ldr	r2, [pc, #16]	; (8009064 <hci_register_io_bus+0x24>)
 8009052:	611a      	str	r2, [r3, #16]

  return;
 8009054:	bf00      	nop
}
 8009056:	370c      	adds	r7, #12
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr
 8009060:	0800a17d 	.word	0x0800a17d
 8009064:	0800a1e5 	.word	0x0800a1e5

08009068 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b084      	sub	sp, #16
 800906c:	af00      	add	r7, sp, #0
 800906e:	60f8      	str	r0, [r7, #12]
 8009070:	60b9      	str	r1, [r7, #8]
 8009072:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8009074:	687a      	ldr	r2, [r7, #4]
 8009076:	68b9      	ldr	r1, [r7, #8]
 8009078:	68f8      	ldr	r0, [r7, #12]
 800907a:	f001 fd21 	bl	800aac0 <memcpy>
 800907e:	4603      	mov	r3, r0
}
 8009080:	4618      	mov	r0, r3
 8009082:	3710      	adds	r7, #16
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}

08009088 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b084      	sub	sp, #16
 800908c:	af00      	add	r7, sp, #0
 800908e:	60f8      	str	r0, [r7, #12]
 8009090:	60b9      	str	r1, [r7, #8]
 8009092:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8009094:	687a      	ldr	r2, [r7, #4]
 8009096:	68b9      	ldr	r1, [r7, #8]
 8009098:	68f8      	ldr	r0, [r7, #12]
 800909a:	f001 fd1f 	bl	800aadc <memset>
 800909e:	4603      	mov	r3, r0
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3710      	adds	r7, #16
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}

080090a8 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 80090a8:	b480      	push	{r7}
 80090aa:	b085      	sub	sp, #20
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	4603      	mov	r3, r0
 80090b0:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 80090b2:	4b0f      	ldr	r3, [pc, #60]	; (80090f0 <OTP_Read+0x48>)
 80090b4:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80090b6:	e002      	b.n	80090be <OTP_Read+0x16>
  {
    p_id -= 8 ;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	3b08      	subs	r3, #8
 80090bc:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	3307      	adds	r3, #7
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	79fa      	ldrb	r2, [r7, #7]
 80090c6:	429a      	cmp	r2, r3
 80090c8:	d003      	beq.n	80090d2 <OTP_Read+0x2a>
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	4a09      	ldr	r2, [pc, #36]	; (80090f4 <OTP_Read+0x4c>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d1f2      	bne.n	80090b8 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	3307      	adds	r3, #7
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	79fa      	ldrb	r2, [r7, #7]
 80090da:	429a      	cmp	r2, r3
 80090dc:	d001      	beq.n	80090e2 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 80090de:	2300      	movs	r3, #0
 80090e0:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 80090e2:	68fb      	ldr	r3, [r7, #12]
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3714      	adds	r7, #20
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr
 80090f0:	1fff73f8 	.word	0x1fff73f8
 80090f4:	1fff7000 	.word	0x1fff7000

080090f8 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b088      	sub	sp, #32
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009100:	f107 030c 	add.w	r3, r7, #12
 8009104:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800910c:	69fb      	ldr	r3, [r7, #28]
 800910e:	2125      	movs	r1, #37	; 0x25
 8009110:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8009114:	f000 f94c 	bl	80093b0 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009118:	69fb      	ldr	r3, [r7, #28]
 800911a:	330b      	adds	r3, #11
 800911c:	78db      	ldrb	r3, [r3, #3]
}
 800911e:	4618      	mov	r0, r3
 8009120:	3720      	adds	r7, #32
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}

08009126 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8009126:	b580      	push	{r7, lr}
 8009128:	b088      	sub	sp, #32
 800912a:	af00      	add	r7, sp, #0
 800912c:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800912e:	f107 030c 	add.w	r3, r7, #12
 8009132:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800913a:	69fb      	ldr	r3, [r7, #28]
 800913c:	210f      	movs	r1, #15
 800913e:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8009142:	f000 f935 	bl	80093b0 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009146:	69fb      	ldr	r3, [r7, #28]
 8009148:	330b      	adds	r3, #11
 800914a:	78db      	ldrb	r3, [r3, #3]
}
 800914c:	4618      	mov	r0, r3
 800914e:	3720      	adds	r7, #32
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}

08009154 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b088      	sub	sp, #32
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800915c:	f107 030c 	add.w	r3, r7, #12
 8009160:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8009162:	69fb      	ldr	r3, [r7, #28]
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	210e      	movs	r1, #14
 8009168:	f64f 4075 	movw	r0, #64629	; 0xfc75
 800916c:	f000 f920 	bl	80093b0 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009170:	69fb      	ldr	r3, [r7, #28]
 8009172:	330b      	adds	r3, #11
 8009174:	78db      	ldrb	r3, [r3, #3]
}
 8009176:	4618      	mov	r0, r3
 8009178:	3720      	adds	r7, #32
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}
	...

08009180 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8009180:	b480      	push	{r7}
 8009182:	b08b      	sub	sp, #44	; 0x2c
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8009188:	2300      	movs	r3, #0
 800918a:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800918c:	2300      	movs	r3, #0
 800918e:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8009190:	2300      	movs	r3, #0
 8009192:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8009194:	2300      	movs	r3, #0
 8009196:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8009198:	2300      	movs	r3, #0
 800919a:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800919c:	2300      	movs	r3, #0
 800919e:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 80091a0:	2300      	movs	r3, #0
 80091a2:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 80091a4:	2300      	movs	r3, #0
 80091a6:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 80091a8:	4b4a      	ldr	r3, [pc, #296]	; (80092d4 <SHCI_GetWirelessFwInfo+0x154>)
 80091aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091ac:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80091b0:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	009b      	lsls	r3, r3, #2
 80091b6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80091ba:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4a44      	ldr	r2, [pc, #272]	; (80092d8 <SHCI_GetWirelessFwInfo+0x158>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d10f      	bne.n	80091ec <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	695b      	ldr	r3, [r3, #20]
 80091d0:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	699b      	ldr	r3, [r3, #24]
 80091d6:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	69db      	ldr	r3, [r3, #28]
 80091dc:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	68db      	ldr	r3, [r3, #12]
 80091e2:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	691b      	ldr	r3, [r3, #16]
 80091e8:	617b      	str	r3, [r7, #20]
 80091ea:	e01a      	b.n	8009222 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	009b      	lsls	r3, r3, #2
 80091f0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80091f4:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80091f8:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	691b      	ldr	r3, [r3, #16]
 8009200:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	695b      	ldr	r3, [r3, #20]
 8009208:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	699b      	ldr	r3, [r3, #24]
 8009210:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	685b      	ldr	r3, [r3, #4]
 8009218:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	689b      	ldr	r3, [r3, #8]
 8009220:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8009222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009224:	0e1b      	lsrs	r3, r3, #24
 8009226:	b2da      	uxtb	r2, r3
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800922c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922e:	0c1b      	lsrs	r3, r3, #16
 8009230:	b2da      	uxtb	r2, r3
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8009236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009238:	0a1b      	lsrs	r3, r3, #8
 800923a:	b2da      	uxtb	r2, r3
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8009240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009242:	091b      	lsrs	r3, r3, #4
 8009244:	b2db      	uxtb	r3, r3
 8009246:	f003 030f 	and.w	r3, r3, #15
 800924a:	b2da      	uxtb	r2, r3
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8009250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009252:	b2db      	uxtb	r3, r3
 8009254:	f003 030f 	and.w	r3, r3, #15
 8009258:	b2da      	uxtb	r2, r3
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800925e:	6a3b      	ldr	r3, [r7, #32]
 8009260:	0e1b      	lsrs	r3, r3, #24
 8009262:	b2da      	uxtb	r2, r3
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8009268:	6a3b      	ldr	r3, [r7, #32]
 800926a:	0c1b      	lsrs	r3, r3, #16
 800926c:	b2da      	uxtb	r2, r3
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8009272:	6a3b      	ldr	r3, [r7, #32]
 8009274:	0a1b      	lsrs	r3, r3, #8
 8009276:	b2da      	uxtb	r2, r3
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800927c:	6a3b      	ldr	r3, [r7, #32]
 800927e:	b2da      	uxtb	r2, r3
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8009284:	69fb      	ldr	r3, [r7, #28]
 8009286:	b2da      	uxtb	r2, r3
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800928c:	69bb      	ldr	r3, [r7, #24]
 800928e:	0e1b      	lsrs	r3, r3, #24
 8009290:	b2da      	uxtb	r2, r3
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8009296:	69bb      	ldr	r3, [r7, #24]
 8009298:	0c1b      	lsrs	r3, r3, #16
 800929a:	b2da      	uxtb	r2, r3
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80092a0:	69bb      	ldr	r3, [r7, #24]
 80092a2:	0a1b      	lsrs	r3, r3, #8
 80092a4:	b2da      	uxtb	r2, r3
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	0e1b      	lsrs	r3, r3, #24
 80092ae:	b2da      	uxtb	r2, r3
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	0c1b      	lsrs	r3, r3, #16
 80092b8:	b2da      	uxtb	r2, r3
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	b2da      	uxtb	r2, r3
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 80092c6:	2300      	movs	r3, #0
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	372c      	adds	r7, #44	; 0x2c
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr
 80092d4:	58004000 	.word	0x58004000
 80092d8:	a94656b9 	.word	0xa94656b9

080092dc <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b082      	sub	sp, #8
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	685b      	ldr	r3, [r3, #4]
 80092ea:	4a08      	ldr	r2, [pc, #32]	; (800930c <shci_init+0x30>)
 80092ec:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 80092ee:	4a08      	ldr	r2, [pc, #32]	; (8009310 <shci_init+0x34>)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 80092f4:	4806      	ldr	r0, [pc, #24]	; (8009310 <shci_init+0x34>)
 80092f6:	f000 f911 	bl	800951c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	4618      	mov	r0, r3
 8009300:	f000 f894 	bl	800942c <TlInit>

  return;
 8009304:	bf00      	nop
}
 8009306:	3708      	adds	r7, #8
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}
 800930c:	2000170c 	.word	0x2000170c
 8009310:	200016ec 	.word	0x200016ec

08009314 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b084      	sub	sp, #16
 8009318:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800931a:	4822      	ldr	r0, [pc, #136]	; (80093a4 <shci_user_evt_proc+0x90>)
 800931c:	f000 f922 	bl	8009564 <LST_is_empty>
 8009320:	4603      	mov	r3, r0
 8009322:	2b00      	cmp	r3, #0
 8009324:	d12b      	bne.n	800937e <shci_user_evt_proc+0x6a>
 8009326:	4b20      	ldr	r3, [pc, #128]	; (80093a8 <shci_user_evt_proc+0x94>)
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d027      	beq.n	800937e <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800932e:	f107 030c 	add.w	r3, r7, #12
 8009332:	4619      	mov	r1, r3
 8009334:	481b      	ldr	r0, [pc, #108]	; (80093a4 <shci_user_evt_proc+0x90>)
 8009336:	f000 f9a4 	bl	8009682 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800933a:	4b1c      	ldr	r3, [pc, #112]	; (80093ac <shci_user_evt_proc+0x98>)
 800933c:	69db      	ldr	r3, [r3, #28]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d00c      	beq.n	800935c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8009346:	2301      	movs	r3, #1
 8009348:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800934a:	4b18      	ldr	r3, [pc, #96]	; (80093ac <shci_user_evt_proc+0x98>)
 800934c:	69db      	ldr	r3, [r3, #28]
 800934e:	1d3a      	adds	r2, r7, #4
 8009350:	4610      	mov	r0, r2
 8009352:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8009354:	793a      	ldrb	r2, [r7, #4]
 8009356:	4b14      	ldr	r3, [pc, #80]	; (80093a8 <shci_user_evt_proc+0x94>)
 8009358:	701a      	strb	r2, [r3, #0]
 800935a:	e002      	b.n	8009362 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800935c:	4b12      	ldr	r3, [pc, #72]	; (80093a8 <shci_user_evt_proc+0x94>)
 800935e:	2201      	movs	r2, #1
 8009360:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8009362:	4b11      	ldr	r3, [pc, #68]	; (80093a8 <shci_user_evt_proc+0x94>)
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d004      	beq.n	8009374 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	4618      	mov	r0, r3
 800936e:	f001 f849 	bl	800a404 <TL_MM_EvtDone>
 8009372:	e004      	b.n	800937e <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	4619      	mov	r1, r3
 8009378:	480a      	ldr	r0, [pc, #40]	; (80093a4 <shci_user_evt_proc+0x90>)
 800937a:	f000 f915 	bl	80095a8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800937e:	4809      	ldr	r0, [pc, #36]	; (80093a4 <shci_user_evt_proc+0x90>)
 8009380:	f000 f8f0 	bl	8009564 <LST_is_empty>
 8009384:	4603      	mov	r3, r0
 8009386:	2b00      	cmp	r3, #0
 8009388:	d107      	bne.n	800939a <shci_user_evt_proc+0x86>
 800938a:	4b07      	ldr	r3, [pc, #28]	; (80093a8 <shci_user_evt_proc+0x94>)
 800938c:	781b      	ldrb	r3, [r3, #0]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d003      	beq.n	800939a <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8009392:	4804      	ldr	r0, [pc, #16]	; (80093a4 <shci_user_evt_proc+0x90>)
 8009394:	f7f7 fd6e 	bl	8000e74 <shci_notify_asynch_evt>
  }


  return;
 8009398:	bf00      	nop
 800939a:	bf00      	nop
}
 800939c:	3710      	adds	r7, #16
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
 80093a2:	bf00      	nop
 80093a4:	200001fc 	.word	0x200001fc
 80093a8:	2000020c 	.word	0x2000020c
 80093ac:	200016ec 	.word	0x200016ec

080093b0 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b084      	sub	sp, #16
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	60ba      	str	r2, [r7, #8]
 80093b8:	607b      	str	r3, [r7, #4]
 80093ba:	4603      	mov	r3, r0
 80093bc:	81fb      	strh	r3, [r7, #14]
 80093be:	460b      	mov	r3, r1
 80093c0:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 80093c2:	2000      	movs	r0, #0
 80093c4:	f000 f864 	bl	8009490 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 80093c8:	4b16      	ldr	r3, [pc, #88]	; (8009424 <shci_send+0x74>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	89fa      	ldrh	r2, [r7, #14]
 80093ce:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 80093d2:	4b14      	ldr	r3, [pc, #80]	; (8009424 <shci_send+0x74>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	7b7a      	ldrb	r2, [r7, #13]
 80093d8:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80093da:	4b12      	ldr	r3, [pc, #72]	; (8009424 <shci_send+0x74>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	330c      	adds	r3, #12
 80093e0:	7b7a      	ldrb	r2, [r7, #13]
 80093e2:	68b9      	ldr	r1, [r7, #8]
 80093e4:	4618      	mov	r0, r3
 80093e6:	f001 fb6b 	bl	800aac0 <memcpy>

  shciContext.io.Send(0,0);
 80093ea:	4b0f      	ldr	r3, [pc, #60]	; (8009428 <shci_send+0x78>)
 80093ec:	691b      	ldr	r3, [r3, #16]
 80093ee:	2100      	movs	r1, #0
 80093f0:	2000      	movs	r0, #0
 80093f2:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 80093f4:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80093f8:	f7f7 fd53 	bl	8000ea2 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f103 0008 	add.w	r0, r3, #8
 8009402:	4b08      	ldr	r3, [pc, #32]	; (8009424 <shci_send+0x74>)
 8009404:	6819      	ldr	r1, [r3, #0]
 8009406:	4b07      	ldr	r3, [pc, #28]	; (8009424 <shci_send+0x74>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	789b      	ldrb	r3, [r3, #2]
 800940c:	3303      	adds	r3, #3
 800940e:	461a      	mov	r2, r3
 8009410:	f001 fb56 	bl	800aac0 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009414:	2001      	movs	r0, #1
 8009416:	f000 f83b 	bl	8009490 <Cmd_SetStatus>

  return;
 800941a:	bf00      	nop
}
 800941c:	3710      	adds	r7, #16
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
 8009422:	bf00      	nop
 8009424:	20000208 	.word	0x20000208
 8009428:	200016ec 	.word	0x200016ec

0800942c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b086      	sub	sp, #24
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8009434:	4a10      	ldr	r2, [pc, #64]	; (8009478 <TlInit+0x4c>)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800943a:	4810      	ldr	r0, [pc, #64]	; (800947c <TlInit+0x50>)
 800943c:	f000 f882 	bl	8009544 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009440:	2001      	movs	r0, #1
 8009442:	f000 f825 	bl	8009490 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8009446:	4b0e      	ldr	r3, [pc, #56]	; (8009480 <TlInit+0x54>)
 8009448:	2201      	movs	r2, #1
 800944a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800944c:	4b0d      	ldr	r3, [pc, #52]	; (8009484 <TlInit+0x58>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d00c      	beq.n	800946e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8009458:	4b0b      	ldr	r3, [pc, #44]	; (8009488 <TlInit+0x5c>)
 800945a:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800945c:	4b0b      	ldr	r3, [pc, #44]	; (800948c <TlInit+0x60>)
 800945e:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8009460:	4b08      	ldr	r3, [pc, #32]	; (8009484 <TlInit+0x58>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f107 020c 	add.w	r2, r7, #12
 8009468:	4610      	mov	r0, r2
 800946a:	4798      	blx	r3
  }

  return;
 800946c:	bf00      	nop
 800946e:	bf00      	nop
}
 8009470:	3718      	adds	r7, #24
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}
 8009476:	bf00      	nop
 8009478:	20000208 	.word	0x20000208
 800947c:	200001fc 	.word	0x200001fc
 8009480:	2000020c 	.word	0x2000020c
 8009484:	200016ec 	.word	0x200016ec
 8009488:	080094e1 	.word	0x080094e1
 800948c:	080094f9 	.word	0x080094f9

08009490 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b082      	sub	sp, #8
 8009494:	af00      	add	r7, sp, #0
 8009496:	4603      	mov	r3, r0
 8009498:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800949a:	79fb      	ldrb	r3, [r7, #7]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d10b      	bne.n	80094b8 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 80094a0:	4b0d      	ldr	r3, [pc, #52]	; (80094d8 <Cmd_SetStatus+0x48>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d003      	beq.n	80094b0 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 80094a8:	4b0b      	ldr	r3, [pc, #44]	; (80094d8 <Cmd_SetStatus+0x48>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	2000      	movs	r0, #0
 80094ae:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 80094b0:	4b0a      	ldr	r3, [pc, #40]	; (80094dc <Cmd_SetStatus+0x4c>)
 80094b2:	2200      	movs	r2, #0
 80094b4:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 80094b6:	e00b      	b.n	80094d0 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 80094b8:	4b08      	ldr	r3, [pc, #32]	; (80094dc <Cmd_SetStatus+0x4c>)
 80094ba:	2201      	movs	r2, #1
 80094bc:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 80094be:	4b06      	ldr	r3, [pc, #24]	; (80094d8 <Cmd_SetStatus+0x48>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d004      	beq.n	80094d0 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 80094c6:	4b04      	ldr	r3, [pc, #16]	; (80094d8 <Cmd_SetStatus+0x48>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	2001      	movs	r0, #1
 80094cc:	4798      	blx	r3
  return;
 80094ce:	bf00      	nop
 80094d0:	bf00      	nop
}
 80094d2:	3708      	adds	r7, #8
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}
 80094d8:	2000170c 	.word	0x2000170c
 80094dc:	20000204 	.word	0x20000204

080094e0 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b082      	sub	sp, #8
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 80094e8:	2000      	movs	r0, #0
 80094ea:	f7f7 fccf 	bl	8000e8c <shci_cmd_resp_release>

  return;
 80094ee:	bf00      	nop
}
 80094f0:	3708      	adds	r7, #8
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
	...

080094f8 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8009500:	6879      	ldr	r1, [r7, #4]
 8009502:	4805      	ldr	r0, [pc, #20]	; (8009518 <TlUserEvtReceived+0x20>)
 8009504:	f000 f876 	bl	80095f4 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009508:	4803      	ldr	r0, [pc, #12]	; (8009518 <TlUserEvtReceived+0x20>)
 800950a:	f7f7 fcb3 	bl	8000e74 <shci_notify_asynch_evt>

  return;
 800950e:	bf00      	nop
}
 8009510:	3708      	adds	r7, #8
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
 8009516:	bf00      	nop
 8009518:	200001fc 	.word	0x200001fc

0800951c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800951c:	b480      	push	{r7}
 800951e:	b083      	sub	sp, #12
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	4a05      	ldr	r2, [pc, #20]	; (800953c <shci_register_io_bus+0x20>)
 8009528:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	4a04      	ldr	r2, [pc, #16]	; (8009540 <shci_register_io_bus+0x24>)
 800952e:	611a      	str	r2, [r3, #16]

  return;
 8009530:	bf00      	nop
}
 8009532:	370c      	adds	r7, #12
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr
 800953c:	0800a291 	.word	0x0800a291
 8009540:	0800a2e5 	.word	0x0800a2e5

08009544 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	605a      	str	r2, [r3, #4]
}
 8009558:	bf00      	nop
 800955a:	370c      	adds	r7, #12
 800955c:	46bd      	mov	sp, r7
 800955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009562:	4770      	bx	lr

08009564 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8009564:	b480      	push	{r7}
 8009566:	b087      	sub	sp, #28
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800956c:	f3ef 8310 	mrs	r3, PRIMASK
 8009570:	60fb      	str	r3, [r7, #12]
  return(result);
 8009572:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009574:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009576:	b672      	cpsid	i
}
 8009578:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	429a      	cmp	r2, r3
 8009582:	d102      	bne.n	800958a <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8009584:	2301      	movs	r3, #1
 8009586:	75fb      	strb	r3, [r7, #23]
 8009588:	e001      	b.n	800958e <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800958a:	2300      	movs	r3, #0
 800958c:	75fb      	strb	r3, [r7, #23]
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	f383 8810 	msr	PRIMASK, r3
}
 8009598:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800959a:	7dfb      	ldrb	r3, [r7, #23]
}
 800959c:	4618      	mov	r0, r3
 800959e:	371c      	adds	r7, #28
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr

080095a8 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b087      	sub	sp, #28
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095b2:	f3ef 8310 	mrs	r3, PRIMASK
 80095b6:	60fb      	str	r3, [r7, #12]
  return(result);
 80095b8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80095ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80095bc:	b672      	cpsid	i
}
 80095be:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681a      	ldr	r2, [r3, #0]
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	687a      	ldr	r2, [r7, #4]
 80095cc:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	683a      	ldr	r2, [r7, #0]
 80095d2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	683a      	ldr	r2, [r7, #0]
 80095da:	605a      	str	r2, [r3, #4]
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095e0:	693b      	ldr	r3, [r7, #16]
 80095e2:	f383 8810 	msr	PRIMASK, r3
}
 80095e6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80095e8:	bf00      	nop
 80095ea:	371c      	adds	r7, #28
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr

080095f4 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b087      	sub	sp, #28
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095fe:	f3ef 8310 	mrs	r3, PRIMASK
 8009602:	60fb      	str	r3, [r7, #12]
  return(result);
 8009604:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009606:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009608:	b672      	cpsid	i
}
 800960a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	687a      	ldr	r2, [r7, #4]
 8009610:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	685a      	ldr	r2, [r3, #4]
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	683a      	ldr	r2, [r7, #0]
 800961e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	683a      	ldr	r2, [r7, #0]
 8009626:	601a      	str	r2, [r3, #0]
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	f383 8810 	msr	PRIMASK, r3
}
 8009632:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009634:	bf00      	nop
 8009636:	371c      	adds	r7, #28
 8009638:	46bd      	mov	sp, r7
 800963a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963e:	4770      	bx	lr

08009640 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8009640:	b480      	push	{r7}
 8009642:	b087      	sub	sp, #28
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009648:	f3ef 8310 	mrs	r3, PRIMASK
 800964c:	60fb      	str	r3, [r7, #12]
  return(result);
 800964e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009650:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009652:	b672      	cpsid	i
}
 8009654:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	685b      	ldr	r3, [r3, #4]
 800965a:	687a      	ldr	r2, [r7, #4]
 800965c:	6812      	ldr	r2, [r2, #0]
 800965e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	687a      	ldr	r2, [r7, #4]
 8009666:	6852      	ldr	r2, [r2, #4]
 8009668:	605a      	str	r2, [r3, #4]
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	f383 8810 	msr	PRIMASK, r3
}
 8009674:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009676:	bf00      	nop
 8009678:	371c      	adds	r7, #28
 800967a:	46bd      	mov	sp, r7
 800967c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009680:	4770      	bx	lr

08009682 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8009682:	b580      	push	{r7, lr}
 8009684:	b086      	sub	sp, #24
 8009686:	af00      	add	r7, sp, #0
 8009688:	6078      	str	r0, [r7, #4]
 800968a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800968c:	f3ef 8310 	mrs	r3, PRIMASK
 8009690:	60fb      	str	r3, [r7, #12]
  return(result);
 8009692:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009694:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009696:	b672      	cpsid	i
}
 8009698:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681a      	ldr	r2, [r3, #0]
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4618      	mov	r0, r3
 80096a8:	f7ff ffca 	bl	8009640 <LST_remove_node>
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	f383 8810 	msr	PRIMASK, r3
}
 80096b6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80096b8:	bf00      	nop
 80096ba:	3718      	adds	r7, #24
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b085      	sub	sp, #20
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	60f8      	str	r0, [r7, #12]
 80096c8:	60b9      	str	r1, [r7, #8]
 80096ca:	607a      	str	r2, [r7, #4]
 80096cc:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	68ba      	ldr	r2, [r7, #8]
 80096d2:	601a      	str	r2, [r3, #0]
  q->first = 0;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	2200      	movs	r2, #0
 80096d8:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	2200      	movs	r2, #0
 80096de:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2200      	movs	r2, #0
 80096e4:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2200      	movs	r2, #0
 80096ea:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	687a      	ldr	r2, [r7, #4]
 80096f0:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	887a      	ldrh	r2, [r7, #2]
 80096f6:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	7e3a      	ldrb	r2, [r7, #24]
 80096fc:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 80096fe:	7e3b      	ldrb	r3, [r7, #24]
 8009700:	f003 0302 	and.w	r3, r3, #2
 8009704:	2b00      	cmp	r3, #0
 8009706:	d006      	beq.n	8009716 <CircularQueue_Init+0x56>
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	891b      	ldrh	r3, [r3, #8]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d002      	beq.n	8009716 <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 8009710:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009714:	e000      	b.n	8009718 <CircularQueue_Init+0x58>
  }
  return 0;
 8009716:	2300      	movs	r3, #0
}
 8009718:	4618      	mov	r0, r3
 800971a:	3714      	adds	r7, #20
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr

08009724 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b08e      	sub	sp, #56	; 0x38
 8009728:	af00      	add	r7, sp, #0
 800972a:	60f8      	str	r0, [r7, #12]
 800972c:	60b9      	str	r1, [r7, #8]
 800972e:	603b      	str	r3, [r7, #0]
 8009730:	4613      	mov	r3, r2
 8009732:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 8009734:	2300      	movs	r3, #0
 8009736:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 8009738:	2300      	movs	r3, #0
 800973a:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size elemenet (q->elementsize == 0) */
 800973c:	2300      	movs	r3, #0
 800973e:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 8009740:	2300      	movs	r3, #0
 8009742:	62bb      	str	r3, [r7, #40]	; 0x28
 8009744:	2300      	movs	r3, #0
 8009746:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 8009748:	2300      	movs	r3, #0
 800974a:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800974c:	2300      	movs	r3, #0
 800974e:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	891b      	ldrh	r3, [r3, #8]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d101      	bne.n	800975c <CircularQueue_Add+0x38>
 8009758:	2302      	movs	r3, #2
 800975a:	e000      	b.n	800975e <CircularQueue_Add+0x3a>
 800975c:	2300      	movs	r3, #0
 800975e:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	695b      	ldr	r3, [r3, #20]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d02a      	beq.n	80097be <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	891b      	ldrh	r3, [r3, #8]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d123      	bne.n	80097b8 <CircularQueue_Add+0x94>
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681a      	ldr	r2, [r3, #0]
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	691b      	ldr	r3, [r3, #16]
 8009778:	4413      	add	r3, r2
 800977a:	781b      	ldrb	r3, [r3, #0]
 800977c:	b29a      	uxth	r2, r3
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	6819      	ldr	r1, [r3, #0]
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	691b      	ldr	r3, [r3, #16]
 8009786:	1c58      	adds	r0, r3, #1
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	685b      	ldr	r3, [r3, #4]
 800978c:	4298      	cmp	r0, r3
 800978e:	d306      	bcc.n	800979e <CircularQueue_Add+0x7a>
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	6918      	ldr	r0, [r3, #16]
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	1ac3      	subs	r3, r0, r3
 800979a:	3301      	adds	r3, #1
 800979c:	e002      	b.n	80097a4 <CircularQueue_Add+0x80>
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	691b      	ldr	r3, [r3, #16]
 80097a2:	3301      	adds	r3, #1
 80097a4:	440b      	add	r3, r1
 80097a6:	781b      	ldrb	r3, [r3, #0]
 80097a8:	b29b      	uxth	r3, r3
 80097aa:	021b      	lsls	r3, r3, #8
 80097ac:	b29b      	uxth	r3, r3
 80097ae:	4413      	add	r3, r2
 80097b0:	b29b      	uxth	r3, r3
 80097b2:	3302      	adds	r3, #2
 80097b4:	b29b      	uxth	r3, r3
 80097b6:	e001      	b.n	80097bc <CircularQueue_Add+0x98>
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	891b      	ldrh	r3, [r3, #8]
 80097bc:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	891b      	ldrh	r3, [r3, #8]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d002      	beq.n	80097cc <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	891b      	ldrh	r3, [r3, #8]
 80097ca:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	691a      	ldr	r2, [r3, #16]
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	68db      	ldr	r3, [r3, #12]
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d307      	bcc.n	80097e8 <CircularQueue_Add+0xc4>
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	685a      	ldr	r2, [r3, #4]
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	6919      	ldr	r1, [r3, #16]
 80097e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80097e2:	440b      	add	r3, r1
 80097e4:	1ad3      	subs	r3, r2, r3
 80097e6:	e000      	b.n	80097ea <CircularQueue_Add+0xc6>
 80097e8:	2300      	movs	r3, #0
 80097ea:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 80097ec:	88fa      	ldrh	r2, [r7, #6]
 80097ee:	7ffb      	ldrb	r3, [r7, #31]
 80097f0:	4413      	add	r3, r2
 80097f2:	461a      	mov	r2, r3
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	fb02 f303 	mul.w	r3, r2, r3
 80097fa:	69ba      	ldr	r2, [r7, #24]
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d80b      	bhi.n	8009818 <CircularQueue_Add+0xf4>
 8009800:	88fa      	ldrh	r2, [r7, #6]
 8009802:	7ffb      	ldrb	r3, [r7, #31]
 8009804:	4413      	add	r3, r2
 8009806:	461a      	mov	r2, r3
 8009808:	69bb      	ldr	r3, [r7, #24]
 800980a:	fbb3 f1f2 	udiv	r1, r3, r2
 800980e:	fb01 f202 	mul.w	r2, r1, r2
 8009812:	1a9b      	subs	r3, r3, r2
 8009814:	b2db      	uxtb	r3, r3
 8009816:	e000      	b.n	800981a <CircularQueue_Add+0xf6>
 8009818:	2300      	movs	r3, #0
 800981a:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800981c:	7dfa      	ldrb	r2, [r7, #23]
 800981e:	7ffb      	ldrb	r3, [r7, #31]
 8009820:	429a      	cmp	r2, r3
 8009822:	bf8c      	ite	hi
 8009824:	2301      	movhi	r3, #1
 8009826:	2300      	movls	r3, #0
 8009828:	b2db      	uxtb	r3, r3
 800982a:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800982c:	7fbb      	ldrb	r3, [r7, #30]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d008      	beq.n	8009844 <CircularQueue_Add+0x120>
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	7f1b      	ldrb	r3, [r3, #28]
 8009836:	f003 0301 	and.w	r3, r3, #1
 800983a:	2b00      	cmp	r3, #0
 800983c:	d002      	beq.n	8009844 <CircularQueue_Add+0x120>
 800983e:	7dfb      	ldrb	r3, [r7, #23]
 8009840:	b29b      	uxth	r3, r3
 8009842:	e000      	b.n	8009846 <CircularQueue_Add+0x122>
 8009844:	8bbb      	ldrh	r3, [r7, #28]
 8009846:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 8009848:	7fbb      	ldrb	r3, [r7, #30]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d008      	beq.n	8009860 <CircularQueue_Add+0x13c>
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	7f1b      	ldrb	r3, [r3, #28]
 8009852:	f003 0302 	and.w	r3, r3, #2
 8009856:	2b00      	cmp	r3, #0
 8009858:	d002      	beq.n	8009860 <CircularQueue_Add+0x13c>
 800985a:	7ffb      	ldrb	r3, [r7, #31]
 800985c:	b29b      	uxth	r3, r3
 800985e:	e000      	b.n	8009862 <CircularQueue_Add+0x13e>
 8009860:	8bbb      	ldrh	r3, [r7, #28]
 8009862:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 8009864:	88fb      	ldrh	r3, [r7, #6]
 8009866:	2b00      	cmp	r3, #0
 8009868:	f000 817e 	beq.w	8009b68 <CircularQueue_Add+0x444>
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	695a      	ldr	r2, [r3, #20]
 8009870:	88f9      	ldrh	r1, [r7, #6]
 8009872:	7ffb      	ldrb	r3, [r7, #31]
 8009874:	440b      	add	r3, r1
 8009876:	4619      	mov	r1, r3
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	fb01 f303 	mul.w	r3, r1, r3
 800987e:	441a      	add	r2, r3
 8009880:	8bbb      	ldrh	r3, [r7, #28]
 8009882:	441a      	add	r2, r3
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	685b      	ldr	r3, [r3, #4]
 8009888:	429a      	cmp	r2, r3
 800988a:	f200 816d 	bhi.w	8009b68 <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800988e:	2300      	movs	r3, #0
 8009890:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009892:	e14a      	b.n	8009b2a <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	691a      	ldr	r2, [r3, #16]
 8009898:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800989a:	441a      	add	r2, r3
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	429a      	cmp	r2, r3
 80098a2:	d307      	bcc.n	80098b4 <CircularQueue_Add+0x190>
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	691a      	ldr	r2, [r3, #16]
 80098a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80098aa:	441a      	add	r2, r3
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	685b      	ldr	r3, [r3, #4]
 80098b0:	1ad3      	subs	r3, r2, r3
 80098b2:	e003      	b.n	80098bc <CircularQueue_Add+0x198>
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	691a      	ldr	r2, [r3, #16]
 80098b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80098ba:	4413      	add	r3, r2
 80098bc:	68fa      	ldr	r2, [r7, #12]
 80098be:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	691b      	ldr	r3, [r3, #16]
 80098c4:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store fisrt the element size if element size is varaible */
      if (q->elementSize == 0) 
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	891b      	ldrh	r3, [r3, #8]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d130      	bne.n	8009930 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681a      	ldr	r2, [r3, #0]
 80098d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d4:	1c59      	adds	r1, r3, #1
 80098d6:	6339      	str	r1, [r7, #48]	; 0x30
 80098d8:	4413      	add	r3, r2
 80098da:	88fa      	ldrh	r2, [r7, #6]
 80098dc:	b2d2      	uxtb	r2, r2
 80098de:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	685b      	ldr	r3, [r3, #4]
 80098e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098e6:	429a      	cmp	r2, r3
 80098e8:	d304      	bcc.n	80098f4 <CircularQueue_Add+0x1d0>
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	685b      	ldr	r3, [r3, #4]
 80098ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098f0:	1ad3      	subs	r3, r2, r3
 80098f2:	e000      	b.n	80098f6 <CircularQueue_Add+0x1d2>
 80098f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098f6:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 80098f8:	88fb      	ldrh	r3, [r7, #6]
 80098fa:	0a1b      	lsrs	r3, r3, #8
 80098fc:	b298      	uxth	r0, r3
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681a      	ldr	r2, [r3, #0]
 8009902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009904:	1c59      	adds	r1, r3, #1
 8009906:	6339      	str	r1, [r7, #48]	; 0x30
 8009908:	4413      	add	r3, r2
 800990a:	b2c2      	uxtb	r2, r0
 800990c:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	685b      	ldr	r3, [r3, #4]
 8009912:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009914:	429a      	cmp	r2, r3
 8009916:	d304      	bcc.n	8009922 <CircularQueue_Add+0x1fe>
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	685b      	ldr	r3, [r3, #4]
 800991c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800991e:	1ad3      	subs	r3, r2, r3
 8009920:	e000      	b.n	8009924 <CircularQueue_Add+0x200>
 8009922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009924:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	695b      	ldr	r3, [r3, #20]
 800992a:	1c9a      	adds	r2, r3, #2
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 8009930:	88fa      	ldrh	r2, [r7, #6]
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	6859      	ldr	r1, [r3, #4]
 8009936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009938:	1acb      	subs	r3, r1, r3
 800993a:	4293      	cmp	r3, r2
 800993c:	bf28      	it	cs
 800993e:	4613      	movcs	r3, r2
 8009940:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In thi case part of data will copied at the end of the buffer and the rest a the beggining */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 8009942:	88fb      	ldrh	r3, [r7, #6]
 8009944:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009946:	429a      	cmp	r2, r3
 8009948:	d007      	beq.n	800995a <CircularQueue_Add+0x236>
 800994a:	88fb      	ldrh	r3, [r7, #6]
 800994c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800994e:	429a      	cmp	r2, r3
 8009950:	d225      	bcs.n	800999e <CircularQueue_Add+0x27a>
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	7f1b      	ldrb	r3, [r3, #28]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d121      	bne.n	800999e <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681a      	ldr	r2, [r3, #0]
 800995e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009960:	18d0      	adds	r0, r2, r3
 8009962:	88fb      	ldrh	r3, [r7, #6]
 8009964:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009966:	fb02 f303 	mul.w	r3, r2, r3
 800996a:	68ba      	ldr	r2, [r7, #8]
 800996c:	4413      	add	r3, r2
 800996e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009970:	4619      	mov	r1, r3
 8009972:	f001 f8a5 	bl	800aac0 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	695a      	ldr	r2, [r3, #20]
 800997a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800997c:	441a      	add	r2, r3
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 8009982:	2300      	movs	r3, #0
 8009984:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 8009986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009988:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800998a:	88fa      	ldrh	r2, [r7, #6]
 800998c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800998e:	1ad3      	subs	r3, r2, r3
 8009990:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 8009992:	7ffb      	ldrb	r3, [r7, #31]
 8009994:	b29a      	uxth	r2, r3
 8009996:	88fb      	ldrh	r3, [r7, #6]
 8009998:	4413      	add	r3, r2
 800999a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800999c:	e0a4      	b.n	8009ae8 <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800999e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	f000 80a1 	beq.w	8009ae8 <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	7f1b      	ldrb	r3, [r3, #28]
 80099aa:	f003 0301 	and.w	r3, r3, #1
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d03a      	beq.n	8009a28 <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	891b      	ldrh	r3, [r3, #8]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d10d      	bne.n	80099d6 <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681a      	ldr	r2, [r3, #0]
 80099be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c0:	3b02      	subs	r3, #2
 80099c2:	4413      	add	r3, r2
 80099c4:	22ff      	movs	r2, #255	; 0xff
 80099c6:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681a      	ldr	r2, [r3, #0]
 80099cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ce:	3b01      	subs	r3, #1
 80099d0:	4413      	add	r3, r2
 80099d2:	22ff      	movs	r2, #255	; 0xff
 80099d4:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	695a      	ldr	r2, [r3, #20]
 80099da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099dc:	441a      	add	r2, r3
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 80099e2:	2300      	movs	r3, #0
 80099e4:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 80099e6:	88fb      	ldrh	r3, [r7, #6]
 80099e8:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 80099ea:	2300      	movs	r3, #0
 80099ec:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	891b      	ldrh	r3, [r3, #8]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d16f      	bne.n	8009ad6 <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681a      	ldr	r2, [r3, #0]
 80099fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099fc:	1c59      	adds	r1, r3, #1
 80099fe:	6339      	str	r1, [r7, #48]	; 0x30
 8009a00:	4413      	add	r3, r2
 8009a02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a04:	b2d2      	uxtb	r2, r2
 8009a06:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8009a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a0a:	0a18      	lsrs	r0, r3, #8
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681a      	ldr	r2, [r3, #0]
 8009a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a12:	1c59      	adds	r1, r3, #1
 8009a14:	6339      	str	r1, [r7, #48]	; 0x30
 8009a16:	4413      	add	r3, r2
 8009a18:	b2c2      	uxtb	r2, r0
 8009a1a:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	695b      	ldr	r3, [r3, #20]
 8009a20:	1c9a      	adds	r2, r3, #2
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	615a      	str	r2, [r3, #20]
 8009a26:	e056      	b.n	8009ad6 <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	7f1b      	ldrb	r3, [r3, #28]
 8009a2c:	f003 0302 	and.w	r3, r3, #2
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d050      	beq.n	8009ad6 <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	891b      	ldrh	r3, [r3, #8]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d14a      	bne.n	8009ad2 <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681a      	ldr	r2, [r3, #0]
 8009a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a42:	3b02      	subs	r3, #2
 8009a44:	4413      	add	r3, r2
 8009a46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a48:	b2d2      	uxtb	r2, r2
 8009a4a:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8009a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a4e:	0a19      	lsrs	r1, r3, #8
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681a      	ldr	r2, [r3, #0]
 8009a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a56:	3b01      	subs	r3, #1
 8009a58:	4413      	add	r3, r2
 8009a5a:	b2ca      	uxtb	r2, r1
 8009a5c:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681a      	ldr	r2, [r3, #0]
 8009a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a64:	18d0      	adds	r0, r2, r3
 8009a66:	88fb      	ldrh	r3, [r7, #6]
 8009a68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a6a:	fb02 f303 	mul.w	r3, r2, r3
 8009a6e:	68ba      	ldr	r2, [r7, #8]
 8009a70:	4413      	add	r3, r2
 8009a72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a74:	4619      	mov	r1, r3
 8009a76:	f001 f823 	bl	800aac0 <memcpy>
             q->byteCount += NbBytesToCopy; 
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	695a      	ldr	r2, [r3, #20]
 8009a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a80:	441a      	add	r2, r3
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 8009a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a88:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 8009a8a:	88fa      	ldrh	r2, [r7, #6]
 8009a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a8e:	1ad3      	subs	r3, r2, r3
 8009a90:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	699b      	ldr	r3, [r3, #24]
 8009a96:	1c5a      	adds	r2, r3, #1
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681a      	ldr	r2, [r3, #0]
 8009aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa6:	1c59      	adds	r1, r3, #1
 8009aa8:	6339      	str	r1, [r7, #48]	; 0x30
 8009aaa:	4413      	add	r3, r2
 8009aac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009aae:	b2d2      	uxtb	r2, r2
 8009ab0:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8009ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab4:	0a18      	lsrs	r0, r3, #8
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009abc:	1c59      	adds	r1, r3, #1
 8009abe:	6339      	str	r1, [r7, #48]	; 0x30
 8009ac0:	4413      	add	r3, r2
 8009ac2:	b2c2      	uxtb	r2, r0
 8009ac4:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	695b      	ldr	r3, [r3, #20]
 8009aca:	1c9a      	adds	r2, r3, #2
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	615a      	str	r2, [r3, #20]
 8009ad0:	e001      	b.n	8009ad6 <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	e049      	b.n	8009b6a <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 8009ad6:	7ffb      	ldrb	r3, [r7, #31]
 8009ad8:	b29a      	uxth	r2, r3
 8009ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009adc:	b29b      	uxth	r3, r3
 8009ade:	4413      	add	r3, r2
 8009ae0:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 8009ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d015      	beq.n	8009b1a <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681a      	ldr	r2, [r3, #0]
 8009af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af4:	18d0      	adds	r0, r2, r3
 8009af6:	88fb      	ldrh	r3, [r7, #6]
 8009af8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009afa:	fb03 f202 	mul.w	r2, r3, r2
 8009afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b00:	4413      	add	r3, r2
 8009b02:	68ba      	ldr	r2, [r7, #8]
 8009b04:	4413      	add	r3, r2
 8009b06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b08:	4619      	mov	r1, r3
 8009b0a:	f000 ffd9 	bl	800aac0 <memcpy>
        q->byteCount += NbBytesToCopy;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	695a      	ldr	r2, [r3, #20]
 8009b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b14:	441a      	add	r2, r3
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	699b      	ldr	r3, [r3, #24]
 8009b1e:	1c5a      	adds	r2, r3, #1
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 8009b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b26:	3301      	adds	r3, #1
 8009b28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	429a      	cmp	r2, r3
 8009b30:	f4ff aeb0 	bcc.w	8009894 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681a      	ldr	r2, [r3, #0]
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	6919      	ldr	r1, [r3, #16]
 8009b3c:	7ffb      	ldrb	r3, [r7, #31]
 8009b3e:	4419      	add	r1, r3
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	685b      	ldr	r3, [r3, #4]
 8009b44:	4299      	cmp	r1, r3
 8009b46:	d307      	bcc.n	8009b58 <CircularQueue_Add+0x434>
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	6919      	ldr	r1, [r3, #16]
 8009b4c:	7ffb      	ldrb	r3, [r7, #31]
 8009b4e:	4419      	add	r1, r3
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	685b      	ldr	r3, [r3, #4]
 8009b54:	1acb      	subs	r3, r1, r3
 8009b56:	e003      	b.n	8009b60 <CircularQueue_Add+0x43c>
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	6919      	ldr	r1, [r3, #16]
 8009b5c:	7ffb      	ldrb	r3, [r7, #31]
 8009b5e:	440b      	add	r3, r1
 8009b60:	4413      	add	r3, r2
 8009b62:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 8009b64:	6a3b      	ldr	r3, [r7, #32]
 8009b66:	e000      	b.n	8009b6a <CircularQueue_Add+0x446>
    return NULL;
 8009b68:	2300      	movs	r3, #0
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3738      	adds	r7, #56	; 0x38
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}

08009b72 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 8009b72:	b480      	push	{r7}
 8009b74:	b085      	sub	sp, #20
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	6078      	str	r0, [r7, #4]
 8009b7a:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 8009b80:	2300      	movs	r3, #0
 8009b82:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	891b      	ldrh	r3, [r3, #8]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d101      	bne.n	8009b90 <CircularQueue_Remove+0x1e>
 8009b8c:	2302      	movs	r3, #2
 8009b8e:	e000      	b.n	8009b92 <CircularQueue_Remove+0x20>
 8009b90:	2300      	movs	r3, #0
 8009b92:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 8009b94:	2300      	movs	r3, #0
 8009b96:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	695b      	ldr	r3, [r3, #20]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	f000 80cc 	beq.w	8009d3a <CircularQueue_Remove+0x1c8>
  {
    /* retreive element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	891b      	ldrh	r3, [r3, #8]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d121      	bne.n	8009bee <CircularQueue_Remove+0x7c>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681a      	ldr	r2, [r3, #0]
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	68db      	ldr	r3, [r3, #12]
 8009bb2:	4413      	add	r3, r2
 8009bb4:	781b      	ldrb	r3, [r3, #0]
 8009bb6:	b29a      	uxth	r2, r3
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6819      	ldr	r1, [r3, #0]
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	68db      	ldr	r3, [r3, #12]
 8009bc0:	1c58      	adds	r0, r3, #1
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	685b      	ldr	r3, [r3, #4]
 8009bc6:	4298      	cmp	r0, r3
 8009bc8:	d306      	bcc.n	8009bd8 <CircularQueue_Remove+0x66>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	68d8      	ldr	r0, [r3, #12]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	1ac3      	subs	r3, r0, r3
 8009bd4:	3301      	adds	r3, #1
 8009bd6:	e002      	b.n	8009bde <CircularQueue_Remove+0x6c>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	68db      	ldr	r3, [r3, #12]
 8009bdc:	3301      	adds	r3, #1
 8009bde:	440b      	add	r3, r1
 8009be0:	781b      	ldrb	r3, [r3, #0]
 8009be2:	b29b      	uxth	r3, r3
 8009be4:	021b      	lsls	r3, r3, #8
 8009be6:	b29b      	uxth	r3, r3
 8009be8:	4413      	add	r3, r2
 8009bea:	b29b      	uxth	r3, r3
 8009bec:	e001      	b.n	8009bf2 <CircularQueue_Remove+0x80>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	891b      	ldrh	r3, [r3, #8]
 8009bf2:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	7f1b      	ldrb	r3, [r3, #28]
 8009bf8:	f003 0301 	and.w	r3, r3, #1
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d057      	beq.n	8009cb0 <CircularQueue_Remove+0x13e>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	7f1b      	ldrb	r3, [r3, #28]
 8009c04:	f003 0302 	and.w	r3, r3, #2
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d151      	bne.n	8009cb0 <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8009c0c:	897b      	ldrh	r3, [r7, #10]
 8009c0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d103      	bne.n	8009c1e <CircularQueue_Remove+0xac>
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	891b      	ldrh	r3, [r3, #8]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d012      	beq.n	8009c44 <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	68da      	ldr	r2, [r3, #12]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8009c26:	429a      	cmp	r2, r3
 8009c28:	d942      	bls.n	8009cb0 <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	891b      	ldrh	r3, [r3, #8]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d03e      	beq.n	8009cb0 <CircularQueue_Remove+0x13e>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	685a      	ldr	r2, [r3, #4]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	68db      	ldr	r3, [r3, #12]
 8009c3a:	1ad3      	subs	r3, r2, r3
 8009c3c:	687a      	ldr	r2, [r7, #4]
 8009c3e:	8912      	ldrh	r2, [r2, #8]
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d235      	bcs.n	8009cb0 <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	695a      	ldr	r2, [r3, #20]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	68d9      	ldr	r1, [r3, #12]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	685b      	ldr	r3, [r3, #4]
 8009c50:	1acb      	subs	r3, r1, r3
 8009c52:	441a      	add	r2, r3
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	60da      	str	r2, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	891b      	ldrh	r3, [r3, #8]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d121      	bne.n	8009caa <CircularQueue_Remove+0x138>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681a      	ldr	r2, [r3, #0]
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	68db      	ldr	r3, [r3, #12]
 8009c6e:	4413      	add	r3, r2
 8009c70:	781b      	ldrb	r3, [r3, #0]
 8009c72:	b29a      	uxth	r2, r3
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6819      	ldr	r1, [r3, #0]
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	68db      	ldr	r3, [r3, #12]
 8009c7c:	1c58      	adds	r0, r3, #1
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	4298      	cmp	r0, r3
 8009c84:	d306      	bcc.n	8009c94 <CircularQueue_Remove+0x122>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	68d8      	ldr	r0, [r3, #12]
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	685b      	ldr	r3, [r3, #4]
 8009c8e:	1ac3      	subs	r3, r0, r3
 8009c90:	3301      	adds	r3, #1
 8009c92:	e002      	b.n	8009c9a <CircularQueue_Remove+0x128>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	68db      	ldr	r3, [r3, #12]
 8009c98:	3301      	adds	r3, #1
 8009c9a:	440b      	add	r3, r1
 8009c9c:	781b      	ldrb	r3, [r3, #0]
 8009c9e:	b29b      	uxth	r3, r3
 8009ca0:	021b      	lsls	r3, r3, #8
 8009ca2:	b29b      	uxth	r3, r3
 8009ca4:	4413      	add	r3, r2
 8009ca6:	b29b      	uxth	r3, r3
 8009ca8:	e001      	b.n	8009cae <CircularQueue_Remove+0x13c>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	891b      	ldrh	r3, [r3, #8]
 8009cae:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681a      	ldr	r2, [r3, #0]
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	68d9      	ldr	r1, [r3, #12]
 8009cb8:	7a7b      	ldrb	r3, [r7, #9]
 8009cba:	4419      	add	r1, r3
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	685b      	ldr	r3, [r3, #4]
 8009cc0:	4299      	cmp	r1, r3
 8009cc2:	d307      	bcc.n	8009cd4 <CircularQueue_Remove+0x162>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	68d9      	ldr	r1, [r3, #12]
 8009cc8:	7a7b      	ldrb	r3, [r7, #9]
 8009cca:	4419      	add	r1, r3
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	685b      	ldr	r3, [r3, #4]
 8009cd0:	1acb      	subs	r3, r1, r3
 8009cd2:	e003      	b.n	8009cdc <CircularQueue_Remove+0x16a>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	68d9      	ldr	r1, [r3, #12]
 8009cd8:	7a7b      	ldrb	r3, [r7, #9]
 8009cda:	440b      	add	r3, r1
 8009cdc:	4413      	add	r3, r2
 8009cde:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	695b      	ldr	r3, [r3, #20]
 8009ce4:	8979      	ldrh	r1, [r7, #10]
 8009ce6:	7a7a      	ldrb	r2, [r7, #9]
 8009ce8:	440a      	add	r2, r1
 8009cea:	1a9a      	subs	r2, r3, r2
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	695b      	ldr	r3, [r3, #20]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d01b      	beq.n	8009d30 <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	68da      	ldr	r2, [r3, #12]
 8009cfc:	897b      	ldrh	r3, [r7, #10]
 8009cfe:	441a      	add	r2, r3
 8009d00:	7a7b      	ldrb	r3, [r7, #9]
 8009d02:	441a      	add	r2, r3
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	685b      	ldr	r3, [r3, #4]
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	d309      	bcc.n	8009d20 <CircularQueue_Remove+0x1ae>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	68da      	ldr	r2, [r3, #12]
 8009d10:	897b      	ldrh	r3, [r7, #10]
 8009d12:	441a      	add	r2, r3
 8009d14:	7a7b      	ldrb	r3, [r7, #9]
 8009d16:	441a      	add	r2, r3
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	1ad3      	subs	r3, r2, r3
 8009d1e:	e005      	b.n	8009d2c <CircularQueue_Remove+0x1ba>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	68da      	ldr	r2, [r3, #12]
 8009d24:	897b      	ldrh	r3, [r7, #10]
 8009d26:	441a      	add	r2, r3
 8009d28:	7a7b      	ldrb	r3, [r7, #9]
 8009d2a:	4413      	add	r3, r2
 8009d2c:	687a      	ldr	r2, [r7, #4]
 8009d2e:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	699b      	ldr	r3, [r3, #24]
 8009d34:	1e5a      	subs	r2, r3, #1
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d002      	beq.n	8009d46 <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	897a      	ldrh	r2, [r7, #10]
 8009d44:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 8009d46:	68fb      	ldr	r3, [r7, #12]
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	3714      	adds	r7, #20
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr

08009d54 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b087      	sub	sp, #28
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
 8009d5c:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 8009d62:	2300      	movs	r3, #0
 8009d64:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	891b      	ldrh	r3, [r3, #8]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d101      	bne.n	8009d72 <CircularQueue_Sense+0x1e>
 8009d6e:	2302      	movs	r3, #2
 8009d70:	e000      	b.n	8009d74 <CircularQueue_Sense+0x20>
 8009d72:	2300      	movs	r3, #0
 8009d74:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 8009d76:	2300      	movs	r3, #0
 8009d78:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	695b      	ldr	r3, [r3, #20]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	f000 8090 	beq.w	8009ea8 <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	68db      	ldr	r3, [r3, #12]
 8009d8c:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	891b      	ldrh	r3, [r3, #8]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d121      	bne.n	8009dda <CircularQueue_Sense+0x86>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681a      	ldr	r2, [r3, #0]
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	68db      	ldr	r3, [r3, #12]
 8009d9e:	4413      	add	r3, r2
 8009da0:	781b      	ldrb	r3, [r3, #0]
 8009da2:	b29a      	uxth	r2, r3
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6819      	ldr	r1, [r3, #0]
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	68db      	ldr	r3, [r3, #12]
 8009dac:	1c58      	adds	r0, r3, #1
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	685b      	ldr	r3, [r3, #4]
 8009db2:	4298      	cmp	r0, r3
 8009db4:	d306      	bcc.n	8009dc4 <CircularQueue_Sense+0x70>
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	68d8      	ldr	r0, [r3, #12]
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	1ac3      	subs	r3, r0, r3
 8009dc0:	3301      	adds	r3, #1
 8009dc2:	e002      	b.n	8009dca <CircularQueue_Sense+0x76>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	68db      	ldr	r3, [r3, #12]
 8009dc8:	3301      	adds	r3, #1
 8009dca:	440b      	add	r3, r1
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	b29b      	uxth	r3, r3
 8009dd0:	021b      	lsls	r3, r3, #8
 8009dd2:	b29b      	uxth	r3, r3
 8009dd4:	4413      	add	r3, r2
 8009dd6:	b29b      	uxth	r3, r3
 8009dd8:	e001      	b.n	8009dde <CircularQueue_Sense+0x8a>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	891b      	ldrh	r3, [r3, #8]
 8009dde:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	7f1b      	ldrb	r3, [r3, #28]
 8009de4:	f003 0301 	and.w	r3, r3, #1
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d048      	beq.n	8009e7e <CircularQueue_Sense+0x12a>
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	7f1b      	ldrb	r3, [r3, #28]
 8009df0:	f003 0302 	and.w	r3, r3, #2
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d142      	bne.n	8009e7e <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8009df8:	8a7b      	ldrh	r3, [r7, #18]
 8009dfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d103      	bne.n	8009e0a <CircularQueue_Sense+0xb6>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	891b      	ldrh	r3, [r3, #8]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d012      	beq.n	8009e30 <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	68da      	ldr	r2, [r3, #12]
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8009e12:	429a      	cmp	r2, r3
 8009e14:	d933      	bls.n	8009e7e <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	891b      	ldrh	r3, [r3, #8]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d02f      	beq.n	8009e7e <CircularQueue_Sense+0x12a>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	685a      	ldr	r2, [r3, #4]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	68db      	ldr	r3, [r3, #12]
 8009e26:	1ad3      	subs	r3, r2, r3
 8009e28:	687a      	ldr	r2, [r7, #4]
 8009e2a:	8912      	ldrh	r2, [r2, #8]
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d226      	bcs.n	8009e7e <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 8009e30:	2300      	movs	r3, #0
 8009e32:	60fb      	str	r3, [r7, #12]

        /* retrieve the rigth size after the wrap [if varaible size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	891b      	ldrh	r3, [r3, #8]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d11d      	bne.n	8009e78 <CircularQueue_Sense+0x124>
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681a      	ldr	r2, [r3, #0]
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	4413      	add	r3, r2
 8009e44:	781b      	ldrb	r3, [r3, #0]
 8009e46:	b29a      	uxth	r2, r3
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6819      	ldr	r1, [r3, #0]
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	1c58      	adds	r0, r3, #1
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	685b      	ldr	r3, [r3, #4]
 8009e54:	4298      	cmp	r0, r3
 8009e56:	d305      	bcc.n	8009e64 <CircularQueue_Sense+0x110>
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	68f8      	ldr	r0, [r7, #12]
 8009e5e:	1ac3      	subs	r3, r0, r3
 8009e60:	3301      	adds	r3, #1
 8009e62:	e001      	b.n	8009e68 <CircularQueue_Sense+0x114>
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	3301      	adds	r3, #1
 8009e68:	440b      	add	r3, r1
 8009e6a:	781b      	ldrb	r3, [r3, #0]
 8009e6c:	b29b      	uxth	r3, r3
 8009e6e:	021b      	lsls	r3, r3, #8
 8009e70:	b29b      	uxth	r3, r3
 8009e72:	4413      	add	r3, r2
 8009e74:	b29b      	uxth	r3, r3
 8009e76:	e001      	b.n	8009e7c <CircularQueue_Sense+0x128>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	891b      	ldrh	r3, [r3, #8]
 8009e7c:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681a      	ldr	r2, [r3, #0]
 8009e82:	7af9      	ldrb	r1, [r7, #11]
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	4419      	add	r1, r3
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	685b      	ldr	r3, [r3, #4]
 8009e8c:	4299      	cmp	r1, r3
 8009e8e:	d306      	bcc.n	8009e9e <CircularQueue_Sense+0x14a>
 8009e90:	7af9      	ldrb	r1, [r7, #11]
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	4419      	add	r1, r3
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	685b      	ldr	r3, [r3, #4]
 8009e9a:	1acb      	subs	r3, r1, r3
 8009e9c:	e002      	b.n	8009ea4 <CircularQueue_Sense+0x150>
 8009e9e:	7af9      	ldrb	r1, [r7, #11]
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	440b      	add	r3, r1
 8009ea4:	4413      	add	r3, r2
 8009ea6:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d002      	beq.n	8009eb4 <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	8a7a      	ldrh	r2, [r7, #18]
 8009eb2:	801a      	strh	r2, [r3, #0]
  }
  return x;
 8009eb4:	697b      	ldr	r3, [r7, #20]
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	371c      	adds	r7, #28
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec0:	4770      	bx	lr

08009ec2 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8009ec2:	b480      	push	{r7}
 8009ec4:	af00      	add	r7, sp, #0
  return;
 8009ec6:	bf00      	nop
}
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ece:	4770      	bx	lr

08009ed0 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	af00      	add	r7, sp, #0
  return;
 8009ed4:	bf00      	nop
}
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009edc:	4770      	bx	lr

08009ede <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8009ede:	b480      	push	{r7}
 8009ee0:	af00      	add	r7, sp, #0
  return;
 8009ee2:	bf00      	nop
}
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eea:	4770      	bx	lr

08009eec <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8009eec:	b480      	push	{r7}
 8009eee:	af00      	add	r7, sp, #0
  return;
 8009ef0:	bf00      	nop
}
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr

08009efa <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8009efa:	b480      	push	{r7}
 8009efc:	af00      	add	r7, sp, #0
  return;
 8009efe:	bf00      	nop
}
 8009f00:	46bd      	mov	sp, r7
 8009f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f06:	4770      	bx	lr

08009f08 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8009f08:	b480      	push	{r7}
 8009f0a:	af00      	add	r7, sp, #0
  return;
 8009f0c:	bf00      	nop
}
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f14:	4770      	bx	lr

08009f16 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8009f16:	b480      	push	{r7}
 8009f18:	af00      	add	r7, sp, #0
  return;
 8009f1a:	bf00      	nop
}
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f22:	4770      	bx	lr

08009f24 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8009f24:	b480      	push	{r7}
 8009f26:	af00      	add	r7, sp, #0
  return;
 8009f28:	bf00      	nop
}
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f30:	4770      	bx	lr

08009f32 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8009f32:	b480      	push	{r7}
 8009f34:	af00      	add	r7, sp, #0
  return;
 8009f36:	bf00      	nop
}
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr

08009f40 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8009f40:	b480      	push	{r7}
 8009f42:	af00      	add	r7, sp, #0
  return;
 8009f44:	bf00      	nop
}
 8009f46:	46bd      	mov	sp, r7
 8009f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4c:	4770      	bx	lr

08009f4e <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8009f4e:	b480      	push	{r7}
 8009f50:	af00      	add	r7, sp, #0
  return;
 8009f52:	bf00      	nop
}
 8009f54:	46bd      	mov	sp, r7
 8009f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5a:	4770      	bx	lr

08009f5c <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	af00      	add	r7, sp, #0
  return;
 8009f60:	bf00      	nop
}
 8009f62:	46bd      	mov	sp, r7
 8009f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f68:	4770      	bx	lr

08009f6a <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8009f6a:	b480      	push	{r7}
 8009f6c:	af00      	add	r7, sp, #0
  return;
 8009f6e:	bf00      	nop
}
 8009f70:	46bd      	mov	sp, r7
 8009f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f76:	4770      	bx	lr

08009f78 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8009f78:	b480      	push	{r7}
 8009f7a:	af00      	add	r7, sp, #0
  return;
 8009f7c:	bf00      	nop
}
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f84:	4770      	bx	lr

08009f86 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8009f86:	b480      	push	{r7}
 8009f88:	af00      	add	r7, sp, #0
  return;
 8009f8a:	bf00      	nop
}
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr

08009f94 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8009f94:	b480      	push	{r7}
 8009f96:	af00      	add	r7, sp, #0
  return;
 8009f98:	bf00      	nop
}
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa0:	4770      	bx	lr

08009fa2 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8009fa2:	b480      	push	{r7}
 8009fa4:	af00      	add	r7, sp, #0
  return;
 8009fa6:	bf00      	nop
}
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fae:	4770      	bx	lr

08009fb0 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8009fb4:	4b04      	ldr	r3, [pc, #16]	; (8009fc8 <SVCCTL_Init+0x18>)
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8009fba:	4b04      	ldr	r3, [pc, #16]	; (8009fcc <SVCCTL_Init+0x1c>)
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8009fc0:	f000 f806 	bl	8009fd0 <SVCCTL_SvcInit>

  return;
 8009fc4:	bf00      	nop
}
 8009fc6:	bd80      	pop	{r7, pc}
 8009fc8:	200001d8 	.word	0x200001d8
 8009fcc:	200001f8 	.word	0x200001f8

08009fd0 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	af00      	add	r7, sp, #0
  BAS_Init();
 8009fd4:	f7ff ff75 	bl	8009ec2 <BAS_Init>

  BLS_Init();
 8009fd8:	f7ff ff7a 	bl	8009ed0 <BLS_Init>

  CRS_STM_Init();
 8009fdc:	f7ff ff7f 	bl	8009ede <CRS_STM_Init>

  DIS_Init();
 8009fe0:	f7ff ff84 	bl	8009eec <DIS_Init>

  EDS_STM_Init();
 8009fe4:	f7ff ff89 	bl	8009efa <EDS_STM_Init>

  HIDS_Init();
 8009fe8:	f7ff ff8e 	bl	8009f08 <HIDS_Init>

  HRS_Init();
 8009fec:	f7ff ff93 	bl	8009f16 <HRS_Init>

  HTS_Init();
 8009ff0:	f7ff ff98 	bl	8009f24 <HTS_Init>

  IAS_Init();
 8009ff4:	f7ff ff9d 	bl	8009f32 <IAS_Init>

  LLS_Init();
 8009ff8:	f7ff ffa2 	bl	8009f40 <LLS_Init>

  TPS_Init();
 8009ffc:	f7ff ffa7 	bl	8009f4e <TPS_Init>

  MOTENV_STM_Init();
 800a000:	f7ff ffac 	bl	8009f5c <MOTENV_STM_Init>

  P2PS_STM_Init();
 800a004:	f7ff ffb1 	bl	8009f6a <P2PS_STM_Init>

  ZDD_STM_Init();
 800a008:	f7ff ffb6 	bl	8009f78 <ZDD_STM_Init>

  OTAS_STM_Init();
 800a00c:	f7ff ffbb 	bl	8009f86 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800a010:	f7ff ffc7 	bl	8009fa2 <BVOPUS_STM_Init>

  MESH_Init();
 800a014:	f7ff ffbe 	bl	8009f94 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800a018:	f7f8 ff00 	bl	8002e1c <SVCCTL_InitCustomSvc>
  
  return;
 800a01c:	bf00      	nop
}
 800a01e:	bd80      	pop	{r7, pc}

0800a020 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800a020:	b480      	push	{r7}
 800a022:	b083      	sub	sp, #12
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800a028:	4b09      	ldr	r3, [pc, #36]	; (800a050 <SVCCTL_RegisterSvcHandler+0x30>)
 800a02a:	7f1b      	ldrb	r3, [r3, #28]
 800a02c:	4619      	mov	r1, r3
 800a02e:	4a08      	ldr	r2, [pc, #32]	; (800a050 <SVCCTL_RegisterSvcHandler+0x30>)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800a036:	4b06      	ldr	r3, [pc, #24]	; (800a050 <SVCCTL_RegisterSvcHandler+0x30>)
 800a038:	7f1b      	ldrb	r3, [r3, #28]
 800a03a:	3301      	adds	r3, #1
 800a03c:	b2da      	uxtb	r2, r3
 800a03e:	4b04      	ldr	r3, [pc, #16]	; (800a050 <SVCCTL_RegisterSvcHandler+0x30>)
 800a040:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800a042:	bf00      	nop
}
 800a044:	370c      	adds	r7, #12
 800a046:	46bd      	mov	sp, r7
 800a048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04c:	4770      	bx	lr
 800a04e:	bf00      	nop
 800a050:	200001d8 	.word	0x200001d8

0800a054 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b086      	sub	sp, #24
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	3301      	adds	r3, #1
 800a060:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800a062:	2300      	movs	r3, #0
 800a064:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800a066:	693b      	ldr	r3, [r7, #16]
 800a068:	781b      	ldrb	r3, [r3, #0]
 800a06a:	2bff      	cmp	r3, #255	; 0xff
 800a06c:	d125      	bne.n	800a0ba <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	3302      	adds	r3, #2
 800a072:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	881b      	ldrh	r3, [r3, #0]
 800a078:	b29b      	uxth	r3, r3
 800a07a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a07e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a082:	d118      	bne.n	800a0b6 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800a084:	2300      	movs	r3, #0
 800a086:	757b      	strb	r3, [r7, #21]
 800a088:	e00d      	b.n	800a0a6 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800a08a:	7d7b      	ldrb	r3, [r7, #21]
 800a08c:	4a1a      	ldr	r2, [pc, #104]	; (800a0f8 <SVCCTL_UserEvtRx+0xa4>)
 800a08e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	4798      	blx	r3
 800a096:	4603      	mov	r3, r0
 800a098:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800a09a:	7dfb      	ldrb	r3, [r7, #23]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d108      	bne.n	800a0b2 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800a0a0:	7d7b      	ldrb	r3, [r7, #21]
 800a0a2:	3301      	adds	r3, #1
 800a0a4:	757b      	strb	r3, [r7, #21]
 800a0a6:	4b14      	ldr	r3, [pc, #80]	; (800a0f8 <SVCCTL_UserEvtRx+0xa4>)
 800a0a8:	7f1b      	ldrb	r3, [r3, #28]
 800a0aa:	7d7a      	ldrb	r2, [r7, #21]
 800a0ac:	429a      	cmp	r2, r3
 800a0ae:	d3ec      	bcc.n	800a08a <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800a0b0:	e002      	b.n	800a0b8 <SVCCTL_UserEvtRx+0x64>
              break;
 800a0b2:	bf00      	nop
          break;
 800a0b4:	e000      	b.n	800a0b8 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800a0b6:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800a0b8:	e000      	b.n	800a0bc <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800a0ba:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800a0bc:	7dfb      	ldrb	r3, [r7, #23]
 800a0be:	2b02      	cmp	r3, #2
 800a0c0:	d00f      	beq.n	800a0e2 <SVCCTL_UserEvtRx+0x8e>
 800a0c2:	2b02      	cmp	r3, #2
 800a0c4:	dc10      	bgt.n	800a0e8 <SVCCTL_UserEvtRx+0x94>
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d002      	beq.n	800a0d0 <SVCCTL_UserEvtRx+0x7c>
 800a0ca:	2b01      	cmp	r3, #1
 800a0cc:	d006      	beq.n	800a0dc <SVCCTL_UserEvtRx+0x88>
 800a0ce:	e00b      	b.n	800a0e8 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f7f8 faf3 	bl	80026bc <SVCCTL_App_Notification>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	75bb      	strb	r3, [r7, #22]
      break;
 800a0da:	e008      	b.n	800a0ee <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800a0dc:	2301      	movs	r3, #1
 800a0de:	75bb      	strb	r3, [r7, #22]
      break;
 800a0e0:	e005      	b.n	800a0ee <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	75bb      	strb	r3, [r7, #22]
      break;
 800a0e6:	e002      	b.n	800a0ee <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	75bb      	strb	r3, [r7, #22]
      break;
 800a0ec:	bf00      	nop
  }

  return (return_status);
 800a0ee:	7dbb      	ldrb	r3, [r7, #22]
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	3718      	adds	r7, #24
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}
 800a0f8:	200001d8 	.word	0x200001d8

0800a0fc <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800a100:	f7f9 f8c0 	bl	8003284 <HW_IPCC_Enable>

  return;
 800a104:	bf00      	nop
}
 800a106:	bd80      	pop	{r7, pc}

0800a108 <TL_Init>:


void TL_Init( void )
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800a10c:	4b10      	ldr	r3, [pc, #64]	; (800a150 <TL_Init+0x48>)
 800a10e:	4a11      	ldr	r2, [pc, #68]	; (800a154 <TL_Init+0x4c>)
 800a110:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800a112:	4b0f      	ldr	r3, [pc, #60]	; (800a150 <TL_Init+0x48>)
 800a114:	4a10      	ldr	r2, [pc, #64]	; (800a158 <TL_Init+0x50>)
 800a116:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800a118:	4b0d      	ldr	r3, [pc, #52]	; (800a150 <TL_Init+0x48>)
 800a11a:	4a10      	ldr	r2, [pc, #64]	; (800a15c <TL_Init+0x54>)
 800a11c:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800a11e:	4b0c      	ldr	r3, [pc, #48]	; (800a150 <TL_Init+0x48>)
 800a120:	4a0f      	ldr	r2, [pc, #60]	; (800a160 <TL_Init+0x58>)
 800a122:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800a124:	4b0a      	ldr	r3, [pc, #40]	; (800a150 <TL_Init+0x48>)
 800a126:	4a0f      	ldr	r2, [pc, #60]	; (800a164 <TL_Init+0x5c>)
 800a128:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800a12a:	4b09      	ldr	r3, [pc, #36]	; (800a150 <TL_Init+0x48>)
 800a12c:	4a0e      	ldr	r2, [pc, #56]	; (800a168 <TL_Init+0x60>)
 800a12e:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800a130:	4b07      	ldr	r3, [pc, #28]	; (800a150 <TL_Init+0x48>)
 800a132:	4a0e      	ldr	r2, [pc, #56]	; (800a16c <TL_Init+0x64>)
 800a134:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800a136:	4b06      	ldr	r3, [pc, #24]	; (800a150 <TL_Init+0x48>)
 800a138:	4a0d      	ldr	r2, [pc, #52]	; (800a170 <TL_Init+0x68>)
 800a13a:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800a13c:	4b04      	ldr	r3, [pc, #16]	; (800a150 <TL_Init+0x48>)
 800a13e:	4a0d      	ldr	r2, [pc, #52]	; (800a174 <TL_Init+0x6c>)
 800a140:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800a142:	4b03      	ldr	r3, [pc, #12]	; (800a150 <TL_Init+0x48>)
 800a144:	4a0c      	ldr	r2, [pc, #48]	; (800a178 <TL_Init+0x70>)
 800a146:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800a148:	f7f9 f8b0 	bl	80032ac <HW_IPCC_Init>

  return;
 800a14c:	bf00      	nop
}
 800a14e:	bd80      	pop	{r7, pc}
 800a150:	20030000 	.word	0x20030000
 800a154:	20030134 	.word	0x20030134
 800a158:	20030154 	.word	0x20030154
 800a15c:	20030164 	.word	0x20030164
 800a160:	20030170 	.word	0x20030170
 800a164:	20030178 	.word	0x20030178
 800a168:	20030180 	.word	0x20030180
 800a16c:	20030188 	.word	0x20030188
 800a170:	200301a4 	.word	0x200301a4
 800a174:	200301a8 	.word	0x200301a8
 800a178:	200301b4 	.word	0x200301b4

0800a17c <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b084      	sub	sp, #16
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800a188:	4811      	ldr	r0, [pc, #68]	; (800a1d0 <TL_BLE_Init+0x54>)
 800a18a:	f7ff f9db 	bl	8009544 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800a18e:	4b11      	ldr	r3, [pc, #68]	; (800a1d4 <TL_BLE_Init+0x58>)
 800a190:	685b      	ldr	r3, [r3, #4]
 800a192:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	689a      	ldr	r2, [r3, #8]
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	68da      	ldr	r2, [r3, #12]
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	4a0c      	ldr	r2, [pc, #48]	; (800a1d8 <TL_BLE_Init+0x5c>)
 800a1a8:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	4a08      	ldr	r2, [pc, #32]	; (800a1d0 <TL_BLE_Init+0x54>)
 800a1ae:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800a1b0:	f7f9 f892 	bl	80032d8 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4a08      	ldr	r2, [pc, #32]	; (800a1dc <TL_BLE_Init+0x60>)
 800a1ba:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	4a07      	ldr	r2, [pc, #28]	; (800a1e0 <TL_BLE_Init+0x64>)
 800a1c2:	6013      	str	r3, [r2, #0]

  return 0;
 800a1c4:	2300      	movs	r3, #0
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3710      	adds	r7, #16
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}
 800a1ce:	bf00      	nop
 800a1d0:	200301d0 	.word	0x200301d0
 800a1d4:	20030000 	.word	0x20030000
 800a1d8:	20030a48 	.word	0x20030a48
 800a1dc:	20001718 	.word	0x20001718
 800a1e0:	2000171c 	.word	0x2000171c

0800a1e4 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b082      	sub	sp, #8
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	460b      	mov	r3, r1
 800a1ee:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800a1f0:	4b09      	ldr	r3, [pc, #36]	; (800a218 <TL_BLE_SendCmd+0x34>)
 800a1f2:	685b      	ldr	r3, [r3, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	2201      	movs	r2, #1
 800a1f8:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800a1fa:	4b07      	ldr	r3, [pc, #28]	; (800a218 <TL_BLE_SendCmd+0x34>)
 800a1fc:	685b      	ldr	r3, [r3, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4619      	mov	r1, r3
 800a202:	2001      	movs	r0, #1
 800a204:	f000 f96c 	bl	800a4e0 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800a208:	f7f9 f870 	bl	80032ec <HW_IPCC_BLE_SendCmd>

  return 0;
 800a20c:	2300      	movs	r3, #0
}
 800a20e:	4618      	mov	r0, r3
 800a210:	3708      	adds	r7, #8
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}
 800a216:	bf00      	nop
 800a218:	20030000 	.word	0x20030000

0800a21c <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b082      	sub	sp, #8
 800a220:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800a222:	e01c      	b.n	800a25e <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800a224:	1d3b      	adds	r3, r7, #4
 800a226:	4619      	mov	r1, r3
 800a228:	4812      	ldr	r0, [pc, #72]	; (800a274 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800a22a:	f7ff fa2a 	bl	8009682 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	7a5b      	ldrb	r3, [r3, #9]
 800a232:	2b0f      	cmp	r3, #15
 800a234:	d003      	beq.n	800a23e <HW_IPCC_BLE_RxEvtNot+0x22>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	7a5b      	ldrb	r3, [r3, #9]
 800a23a:	2b0e      	cmp	r3, #14
 800a23c:	d105      	bne.n	800a24a <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	4619      	mov	r1, r3
 800a242:	2002      	movs	r0, #2
 800a244:	f000 f94c 	bl	800a4e0 <OutputDbgTrace>
 800a248:	e004      	b.n	800a254 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	4619      	mov	r1, r3
 800a24e:	2003      	movs	r0, #3
 800a250:	f000 f946 	bl	800a4e0 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800a254:	4b08      	ldr	r3, [pc, #32]	; (800a278 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	687a      	ldr	r2, [r7, #4]
 800a25a:	4610      	mov	r0, r2
 800a25c:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800a25e:	4805      	ldr	r0, [pc, #20]	; (800a274 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800a260:	f7ff f980 	bl	8009564 <LST_is_empty>
 800a264:	4603      	mov	r3, r0
 800a266:	2b00      	cmp	r3, #0
 800a268:	d0dc      	beq.n	800a224 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800a26a:	bf00      	nop
}
 800a26c:	3708      	adds	r7, #8
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}
 800a272:	bf00      	nop
 800a274:	200301d0 	.word	0x200301d0
 800a278:	20001718 	.word	0x20001718

0800a27c <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800a280:	4b02      	ldr	r3, [pc, #8]	; (800a28c <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	4798      	blx	r3

  return;
 800a286:	bf00      	nop
}
 800a288:	bd80      	pop	{r7, pc}
 800a28a:	bf00      	nop
 800a28c:	2000171c 	.word	0x2000171c

0800a290 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b084      	sub	sp, #16
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800a29c:	480d      	ldr	r0, [pc, #52]	; (800a2d4 <TL_SYS_Init+0x44>)
 800a29e:	f7ff f951 	bl	8009544 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800a2a2:	4b0d      	ldr	r3, [pc, #52]	; (800a2d8 <TL_SYS_Init+0x48>)
 800a2a4:	68db      	ldr	r3, [r3, #12]
 800a2a6:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	689a      	ldr	r2, [r3, #8]
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	4a08      	ldr	r2, [pc, #32]	; (800a2d4 <TL_SYS_Init+0x44>)
 800a2b4:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800a2b6:	f7f9 f83b 	bl	8003330 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	4a07      	ldr	r2, [pc, #28]	; (800a2dc <TL_SYS_Init+0x4c>)
 800a2c0:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	685b      	ldr	r3, [r3, #4]
 800a2c6:	4a06      	ldr	r2, [pc, #24]	; (800a2e0 <TL_SYS_Init+0x50>)
 800a2c8:	6013      	str	r3, [r2, #0]

  return 0;
 800a2ca:	2300      	movs	r3, #0
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	3710      	adds	r7, #16
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}
 800a2d4:	200301d8 	.word	0x200301d8
 800a2d8:	20030000 	.word	0x20030000
 800a2dc:	20001720 	.word	0x20001720
 800a2e0:	20001724 	.word	0x20001724

0800a2e4 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b082      	sub	sp, #8
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
 800a2ec:	460b      	mov	r3, r1
 800a2ee:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800a2f0:	4b09      	ldr	r3, [pc, #36]	; (800a318 <TL_SYS_SendCmd+0x34>)
 800a2f2:	68db      	ldr	r3, [r3, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	2210      	movs	r2, #16
 800a2f8:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800a2fa:	4b07      	ldr	r3, [pc, #28]	; (800a318 <TL_SYS_SendCmd+0x34>)
 800a2fc:	68db      	ldr	r3, [r3, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	4619      	mov	r1, r3
 800a302:	2004      	movs	r0, #4
 800a304:	f000 f8ec 	bl	800a4e0 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800a308:	f7f9 f81c 	bl	8003344 <HW_IPCC_SYS_SendCmd>

  return 0;
 800a30c:	2300      	movs	r3, #0
}
 800a30e:	4618      	mov	r0, r3
 800a310:	3708      	adds	r7, #8
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}
 800a316:	bf00      	nop
 800a318:	20030000 	.word	0x20030000

0800a31c <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800a320:	4b07      	ldr	r3, [pc, #28]	; (800a340 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800a322:	68db      	ldr	r3, [r3, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	4619      	mov	r1, r3
 800a328:	2005      	movs	r0, #5
 800a32a:	f000 f8d9 	bl	800a4e0 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800a32e:	4b05      	ldr	r3, [pc, #20]	; (800a344 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	4a03      	ldr	r2, [pc, #12]	; (800a340 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800a334:	68d2      	ldr	r2, [r2, #12]
 800a336:	6812      	ldr	r2, [r2, #0]
 800a338:	4610      	mov	r0, r2
 800a33a:	4798      	blx	r3

  return;
 800a33c:	bf00      	nop
}
 800a33e:	bd80      	pop	{r7, pc}
 800a340:	20030000 	.word	0x20030000
 800a344:	20001720 	.word	0x20001720

0800a348 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b082      	sub	sp, #8
 800a34c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800a34e:	e00e      	b.n	800a36e <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800a350:	1d3b      	adds	r3, r7, #4
 800a352:	4619      	mov	r1, r3
 800a354:	480b      	ldr	r0, [pc, #44]	; (800a384 <HW_IPCC_SYS_EvtNot+0x3c>)
 800a356:	f7ff f994 	bl	8009682 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	4619      	mov	r1, r3
 800a35e:	2006      	movs	r0, #6
 800a360:	f000 f8be 	bl	800a4e0 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800a364:	4b08      	ldr	r3, [pc, #32]	; (800a388 <HW_IPCC_SYS_EvtNot+0x40>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	687a      	ldr	r2, [r7, #4]
 800a36a:	4610      	mov	r0, r2
 800a36c:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800a36e:	4805      	ldr	r0, [pc, #20]	; (800a384 <HW_IPCC_SYS_EvtNot+0x3c>)
 800a370:	f7ff f8f8 	bl	8009564 <LST_is_empty>
 800a374:	4603      	mov	r3, r0
 800a376:	2b00      	cmp	r3, #0
 800a378:	d0ea      	beq.n	800a350 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800a37a:	bf00      	nop
}
 800a37c:	3708      	adds	r7, #8
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}
 800a382:	bf00      	nop
 800a384:	200301d8 	.word	0x200301d8
 800a388:	20001724 	.word	0x20001724

0800a38c <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b082      	sub	sp, #8
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800a394:	4817      	ldr	r0, [pc, #92]	; (800a3f4 <TL_MM_Init+0x68>)
 800a396:	f7ff f8d5 	bl	8009544 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800a39a:	4817      	ldr	r0, [pc, #92]	; (800a3f8 <TL_MM_Init+0x6c>)
 800a39c:	f7ff f8d2 	bl	8009544 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800a3a0:	4b16      	ldr	r3, [pc, #88]	; (800a3fc <TL_MM_Init+0x70>)
 800a3a2:	691b      	ldr	r3, [r3, #16]
 800a3a4:	4a16      	ldr	r2, [pc, #88]	; (800a400 <TL_MM_Init+0x74>)
 800a3a6:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800a3a8:	4b15      	ldr	r3, [pc, #84]	; (800a400 <TL_MM_Init+0x74>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	687a      	ldr	r2, [r7, #4]
 800a3ae:	6892      	ldr	r2, [r2, #8]
 800a3b0:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800a3b2:	4b13      	ldr	r3, [pc, #76]	; (800a400 <TL_MM_Init+0x74>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	687a      	ldr	r2, [r7, #4]
 800a3b8:	68d2      	ldr	r2, [r2, #12]
 800a3ba:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800a3bc:	4b10      	ldr	r3, [pc, #64]	; (800a400 <TL_MM_Init+0x74>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4a0c      	ldr	r2, [pc, #48]	; (800a3f4 <TL_MM_Init+0x68>)
 800a3c2:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800a3c4:	4b0e      	ldr	r3, [pc, #56]	; (800a400 <TL_MM_Init+0x74>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	687a      	ldr	r2, [r7, #4]
 800a3ca:	6812      	ldr	r2, [r2, #0]
 800a3cc:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800a3ce:	4b0c      	ldr	r3, [pc, #48]	; (800a400 <TL_MM_Init+0x74>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	687a      	ldr	r2, [r7, #4]
 800a3d4:	6852      	ldr	r2, [r2, #4]
 800a3d6:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800a3d8:	4b09      	ldr	r3, [pc, #36]	; (800a400 <TL_MM_Init+0x74>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	687a      	ldr	r2, [r7, #4]
 800a3de:	6912      	ldr	r2, [r2, #16]
 800a3e0:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800a3e2:	4b07      	ldr	r3, [pc, #28]	; (800a400 <TL_MM_Init+0x74>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	687a      	ldr	r2, [r7, #4]
 800a3e8:	6952      	ldr	r2, [r2, #20]
 800a3ea:	619a      	str	r2, [r3, #24]

  return;
 800a3ec:	bf00      	nop
}
 800a3ee:	3708      	adds	r7, #8
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}
 800a3f4:	200301c0 	.word	0x200301c0
 800a3f8:	20001710 	.word	0x20001710
 800a3fc:	20030000 	.word	0x20030000
 800a400:	20001728 	.word	0x20001728

0800a404 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b082      	sub	sp, #8
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800a40c:	6879      	ldr	r1, [r7, #4]
 800a40e:	4807      	ldr	r0, [pc, #28]	; (800a42c <TL_MM_EvtDone+0x28>)
 800a410:	f7ff f8f0 	bl	80095f4 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800a414:	6879      	ldr	r1, [r7, #4]
 800a416:	2000      	movs	r0, #0
 800a418:	f000 f862 	bl	800a4e0 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800a41c:	4804      	ldr	r0, [pc, #16]	; (800a430 <TL_MM_EvtDone+0x2c>)
 800a41e:	f7f8 ffb7 	bl	8003390 <HW_IPCC_MM_SendFreeBuf>

  return;
 800a422:	bf00      	nop
}
 800a424:	3708      	adds	r7, #8
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}
 800a42a:	bf00      	nop
 800a42c:	20001710 	.word	0x20001710
 800a430:	0800a435 	.word	0x0800a435

0800a434 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b082      	sub	sp, #8
 800a438:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800a43a:	e00c      	b.n	800a456 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800a43c:	1d3b      	adds	r3, r7, #4
 800a43e:	4619      	mov	r1, r3
 800a440:	480a      	ldr	r0, [pc, #40]	; (800a46c <SendFreeBuf+0x38>)
 800a442:	f7ff f91e 	bl	8009682 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800a446:	4b0a      	ldr	r3, [pc, #40]	; (800a470 <SendFreeBuf+0x3c>)
 800a448:	691b      	ldr	r3, [r3, #16]
 800a44a:	691b      	ldr	r3, [r3, #16]
 800a44c:	687a      	ldr	r2, [r7, #4]
 800a44e:	4611      	mov	r1, r2
 800a450:	4618      	mov	r0, r3
 800a452:	f7ff f8cf 	bl	80095f4 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800a456:	4805      	ldr	r0, [pc, #20]	; (800a46c <SendFreeBuf+0x38>)
 800a458:	f7ff f884 	bl	8009564 <LST_is_empty>
 800a45c:	4603      	mov	r3, r0
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d0ec      	beq.n	800a43c <SendFreeBuf+0x8>
  }

  return;
 800a462:	bf00      	nop
}
 800a464:	3708      	adds	r7, #8
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}
 800a46a:	bf00      	nop
 800a46c:	20001710 	.word	0x20001710
 800a470:	20030000 	.word	0x20030000

0800a474 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800a474:	b580      	push	{r7, lr}
 800a476:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800a478:	4805      	ldr	r0, [pc, #20]	; (800a490 <TL_TRACES_Init+0x1c>)
 800a47a:	f7ff f863 	bl	8009544 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800a47e:	4b05      	ldr	r3, [pc, #20]	; (800a494 <TL_TRACES_Init+0x20>)
 800a480:	695b      	ldr	r3, [r3, #20]
 800a482:	4a03      	ldr	r2, [pc, #12]	; (800a490 <TL_TRACES_Init+0x1c>)
 800a484:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800a486:	f7f8 ffb9 	bl	80033fc <HW_IPCC_TRACES_Init>

  return;
 800a48a:	bf00      	nop
}
 800a48c:	bd80      	pop	{r7, pc}
 800a48e:	bf00      	nop
 800a490:	200301c8 	.word	0x200301c8
 800a494:	20030000 	.word	0x20030000

0800a498 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b082      	sub	sp, #8
 800a49c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800a49e:	e008      	b.n	800a4b2 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800a4a0:	1d3b      	adds	r3, r7, #4
 800a4a2:	4619      	mov	r1, r3
 800a4a4:	4808      	ldr	r0, [pc, #32]	; (800a4c8 <HW_IPCC_TRACES_EvtNot+0x30>)
 800a4a6:	f7ff f8ec 	bl	8009682 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f000 f80d 	bl	800a4cc <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800a4b2:	4805      	ldr	r0, [pc, #20]	; (800a4c8 <HW_IPCC_TRACES_EvtNot+0x30>)
 800a4b4:	f7ff f856 	bl	8009564 <LST_is_empty>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d0f0      	beq.n	800a4a0 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800a4be:	bf00      	nop
}
 800a4c0:	3708      	adds	r7, #8
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}
 800a4c6:	bf00      	nop
 800a4c8:	200301c8 	.word	0x200301c8

0800a4cc <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b083      	sub	sp, #12
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800a4d4:	bf00      	nop
 800a4d6:	370c      	adds	r7, #12
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr

0800a4e0 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b085      	sub	sp, #20
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	6039      	str	r1, [r7, #0]
 800a4ea:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800a4ec:	79fb      	ldrb	r3, [r7, #7]
 800a4ee:	2b06      	cmp	r3, #6
 800a4f0:	d845      	bhi.n	800a57e <OutputDbgTrace+0x9e>
 800a4f2:	a201      	add	r2, pc, #4	; (adr r2, 800a4f8 <OutputDbgTrace+0x18>)
 800a4f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4f8:	0800a515 	.word	0x0800a515
 800a4fc:	0800a539 	.word	0x0800a539
 800a500:	0800a53f 	.word	0x0800a53f
 800a504:	0800a553 	.word	0x0800a553
 800a508:	0800a55f 	.word	0x0800a55f
 800a50c:	0800a565 	.word	0x0800a565
 800a510:	0800a573 	.word	0x0800a573
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	7a5b      	ldrb	r3, [r3, #9]
 800a51c:	2bff      	cmp	r3, #255	; 0xff
 800a51e:	d005      	beq.n	800a52c <OutputDbgTrace+0x4c>
 800a520:	2bff      	cmp	r3, #255	; 0xff
 800a522:	dc05      	bgt.n	800a530 <OutputDbgTrace+0x50>
 800a524:	2b0e      	cmp	r3, #14
 800a526:	d005      	beq.n	800a534 <OutputDbgTrace+0x54>
 800a528:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800a52a:	e001      	b.n	800a530 <OutputDbgTrace+0x50>
          break;
 800a52c:	bf00      	nop
 800a52e:	e027      	b.n	800a580 <OutputDbgTrace+0xa0>
          break;
 800a530:	bf00      	nop
 800a532:	e025      	b.n	800a580 <OutputDbgTrace+0xa0>
          break;
 800a534:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800a536:	e023      	b.n	800a580 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800a53c:	e020      	b.n	800a580 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	7a5b      	ldrb	r3, [r3, #9]
 800a546:	2b0e      	cmp	r3, #14
 800a548:	d001      	beq.n	800a54e <OutputDbgTrace+0x6e>
 800a54a:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800a54c:	e000      	b.n	800a550 <OutputDbgTrace+0x70>
          break;
 800a54e:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a550:	e016      	b.n	800a580 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	7a5b      	ldrb	r3, [r3, #9]
 800a55a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a55c:	e010      	b.n	800a580 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800a562:	e00d      	b.n	800a580 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	7a5b      	ldrb	r3, [r3, #9]
 800a56c:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800a56e:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a570:	e006      	b.n	800a580 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	7a5b      	ldrb	r3, [r3, #9]
 800a57a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a57c:	e000      	b.n	800a580 <OutputDbgTrace+0xa0>

    default:
      break;
 800a57e:	bf00      	nop
  }

  return;
 800a580:	bf00      	nop
}
 800a582:	3714      	adds	r7, #20
 800a584:	46bd      	mov	sp, r7
 800a586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58a:	4770      	bx	lr

0800a58c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800a58c:	b480      	push	{r7}
 800a58e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800a590:	4b05      	ldr	r3, [pc, #20]	; (800a5a8 <UTIL_LPM_Init+0x1c>)
 800a592:	2200      	movs	r2, #0
 800a594:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800a596:	4b05      	ldr	r3, [pc, #20]	; (800a5ac <UTIL_LPM_Init+0x20>)
 800a598:	2200      	movs	r2, #0
 800a59a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800a59c:	bf00      	nop
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a4:	4770      	bx	lr
 800a5a6:	bf00      	nop
 800a5a8:	2000172c 	.word	0x2000172c
 800a5ac:	20001730 	.word	0x20001730

0800a5b0 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b087      	sub	sp, #28
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
 800a5b8:	460b      	mov	r3, r1
 800a5ba:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5bc:	f3ef 8310 	mrs	r3, PRIMASK
 800a5c0:	613b      	str	r3, [r7, #16]
  return(result);
 800a5c2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800a5c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a5c6:	b672      	cpsid	i
}
 800a5c8:	bf00      	nop
  
  switch(state)
 800a5ca:	78fb      	ldrb	r3, [r7, #3]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d008      	beq.n	800a5e2 <UTIL_LPM_SetOffMode+0x32>
 800a5d0:	2b01      	cmp	r3, #1
 800a5d2:	d10e      	bne.n	800a5f2 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800a5d4:	4b0d      	ldr	r3, [pc, #52]	; (800a60c <UTIL_LPM_SetOffMode+0x5c>)
 800a5d6:	681a      	ldr	r2, [r3, #0]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	4313      	orrs	r3, r2
 800a5dc:	4a0b      	ldr	r2, [pc, #44]	; (800a60c <UTIL_LPM_SetOffMode+0x5c>)
 800a5de:	6013      	str	r3, [r2, #0]
      break;
 800a5e0:	e008      	b.n	800a5f4 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	43da      	mvns	r2, r3
 800a5e6:	4b09      	ldr	r3, [pc, #36]	; (800a60c <UTIL_LPM_SetOffMode+0x5c>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4013      	ands	r3, r2
 800a5ec:	4a07      	ldr	r2, [pc, #28]	; (800a60c <UTIL_LPM_SetOffMode+0x5c>)
 800a5ee:	6013      	str	r3, [r2, #0]
      break;
 800a5f0:	e000      	b.n	800a5f4 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800a5f2:	bf00      	nop
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	f383 8810 	msr	PRIMASK, r3
}
 800a5fe:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800a600:	bf00      	nop
 800a602:	371c      	adds	r7, #28
 800a604:	46bd      	mov	sp, r7
 800a606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60a:	4770      	bx	lr
 800a60c:	20001730 	.word	0x20001730

0800a610 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b08c      	sub	sp, #48	; 0x30
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800a618:	4b6a      	ldr	r3, [pc, #424]	; (800a7c4 <UTIL_SEQ_Run+0x1b4>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	627b      	str	r3, [r7, #36]	; 0x24
  SuperMask &= Mask_bm;
 800a61e:	4b69      	ldr	r3, [pc, #420]	; (800a7c4 <UTIL_SEQ_Run+0x1b4>)
 800a620:	681a      	ldr	r2, [r3, #0]
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	4013      	ands	r3, r2
 800a626:	4a67      	ldr	r2, [pc, #412]	; (800a7c4 <UTIL_SEQ_Run+0x1b4>)
 800a628:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800a62a:	4b67      	ldr	r3, [pc, #412]	; (800a7c8 <UTIL_SEQ_Run+0x1b8>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	62bb      	str	r3, [r7, #40]	; 0x28
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800a630:	e086      	b.n	800a740 <UTIL_SEQ_Run+0x130>
  {
    counter = 0U;
 800a632:	2300      	movs	r3, #0
 800a634:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800a636:	e002      	b.n	800a63e <UTIL_SEQ_Run+0x2e>
    {
      counter++;
 800a638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a63a:	3301      	adds	r3, #1
 800a63c:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800a63e:	4a63      	ldr	r2, [pc, #396]	; (800a7cc <UTIL_SEQ_Run+0x1bc>)
 800a640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a642:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a646:	4b62      	ldr	r3, [pc, #392]	; (800a7d0 <UTIL_SEQ_Run+0x1c0>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	401a      	ands	r2, r3
 800a64c:	4b5d      	ldr	r3, [pc, #372]	; (800a7c4 <UTIL_SEQ_Run+0x1b4>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	4013      	ands	r3, r2
 800a652:	2b00      	cmp	r3, #0
 800a654:	d0f0      	beq.n	800a638 <UTIL_SEQ_Run+0x28>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 800a656:	4a5d      	ldr	r2, [pc, #372]	; (800a7cc <UTIL_SEQ_Run+0x1bc>)
 800a658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a65a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a65e:	4b5c      	ldr	r3, [pc, #368]	; (800a7d0 <UTIL_SEQ_Run+0x1c0>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	401a      	ands	r2, r3
 800a664:	4b57      	ldr	r3, [pc, #348]	; (800a7c4 <UTIL_SEQ_Run+0x1b4>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	4013      	ands	r3, r2
 800a66a:	623b      	str	r3, [r7, #32]
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800a66c:	4a57      	ldr	r2, [pc, #348]	; (800a7cc <UTIL_SEQ_Run+0x1bc>)
 800a66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a670:	00db      	lsls	r3, r3, #3
 800a672:	4413      	add	r3, r2
 800a674:	685a      	ldr	r2, [r3, #4]
 800a676:	6a3b      	ldr	r3, [r7, #32]
 800a678:	4013      	ands	r3, r2
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d106      	bne.n	800a68c <UTIL_SEQ_Run+0x7c>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800a67e:	4a53      	ldr	r2, [pc, #332]	; (800a7cc <UTIL_SEQ_Run+0x1bc>)
 800a680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a682:	00db      	lsls	r3, r3, #3
 800a684:	4413      	add	r3, r2
 800a686:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a68a:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800a68c:	4a4f      	ldr	r2, [pc, #316]	; (800a7cc <UTIL_SEQ_Run+0x1bc>)
 800a68e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a690:	00db      	lsls	r3, r3, #3
 800a692:	4413      	add	r3, r2
 800a694:	685a      	ldr	r2, [r3, #4]
 800a696:	6a3b      	ldr	r3, [r7, #32]
 800a698:	4013      	ands	r3, r2
 800a69a:	4618      	mov	r0, r3
 800a69c:	f000 f9ac 	bl	800a9f8 <SEQ_BitPosition>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	4b4b      	ldr	r3, [pc, #300]	; (800a7d4 <UTIL_SEQ_Run+0x1c4>)
 800a6a6:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800a6a8:	4a48      	ldr	r2, [pc, #288]	; (800a7cc <UTIL_SEQ_Run+0x1bc>)
 800a6aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ac:	00db      	lsls	r3, r3, #3
 800a6ae:	4413      	add	r3, r2
 800a6b0:	685a      	ldr	r2, [r3, #4]
 800a6b2:	4b48      	ldr	r3, [pc, #288]	; (800a7d4 <UTIL_SEQ_Run+0x1c4>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	2101      	movs	r1, #1
 800a6b8:	fa01 f303 	lsl.w	r3, r1, r3
 800a6bc:	43db      	mvns	r3, r3
 800a6be:	401a      	ands	r2, r3
 800a6c0:	4942      	ldr	r1, [pc, #264]	; (800a7cc <UTIL_SEQ_Run+0x1bc>)
 800a6c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6c4:	00db      	lsls	r3, r3, #3
 800a6c6:	440b      	add	r3, r1
 800a6c8:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a6ca:	f3ef 8310 	mrs	r3, PRIMASK
 800a6ce:	617b      	str	r3, [r7, #20]
  return(result);
 800a6d0:	697b      	ldr	r3, [r7, #20]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a6d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a6d4:	b672      	cpsid	i
}
 800a6d6:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800a6d8:	4b3e      	ldr	r3, [pc, #248]	; (800a7d4 <UTIL_SEQ_Run+0x1c4>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	2201      	movs	r2, #1
 800a6de:	fa02 f303 	lsl.w	r3, r2, r3
 800a6e2:	43da      	mvns	r2, r3
 800a6e4:	4b38      	ldr	r3, [pc, #224]	; (800a7c8 <UTIL_SEQ_Run+0x1b8>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	4013      	ands	r3, r2
 800a6ea:	4a37      	ldr	r2, [pc, #220]	; (800a7c8 <UTIL_SEQ_Run+0x1b8>)
 800a6ec:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a6ee:	2302      	movs	r3, #2
 800a6f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a6f2:	e013      	b.n	800a71c <UTIL_SEQ_Run+0x10c>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800a6f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f6:	3b01      	subs	r3, #1
 800a6f8:	4a34      	ldr	r2, [pc, #208]	; (800a7cc <UTIL_SEQ_Run+0x1bc>)
 800a6fa:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800a6fe:	4b35      	ldr	r3, [pc, #212]	; (800a7d4 <UTIL_SEQ_Run+0x1c4>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	2201      	movs	r2, #1
 800a704:	fa02 f303 	lsl.w	r3, r2, r3
 800a708:	43da      	mvns	r2, r3
 800a70a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a70c:	3b01      	subs	r3, #1
 800a70e:	400a      	ands	r2, r1
 800a710:	492e      	ldr	r1, [pc, #184]	; (800a7cc <UTIL_SEQ_Run+0x1bc>)
 800a712:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a718:	3b01      	subs	r3, #1
 800a71a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d1e8      	bne.n	800a6f4 <UTIL_SEQ_Run+0xe4>
 800a722:	69fb      	ldr	r3, [r7, #28]
 800a724:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	f383 8810 	msr	PRIMASK, r3
}
 800a72c:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800a72e:	4b29      	ldr	r3, [pc, #164]	; (800a7d4 <UTIL_SEQ_Run+0x1c4>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	4a29      	ldr	r2, [pc, #164]	; (800a7d8 <UTIL_SEQ_Run+0x1c8>)
 800a734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a738:	4798      	blx	r3
    
    local_taskset = TaskSet;
 800a73a:	4b23      	ldr	r3, [pc, #140]	; (800a7c8 <UTIL_SEQ_Run+0x1b8>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	62bb      	str	r3, [r7, #40]	; 0x28
  while(((local_taskset & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800a740:	4b23      	ldr	r3, [pc, #140]	; (800a7d0 <UTIL_SEQ_Run+0x1c0>)
 800a742:	681a      	ldr	r2, [r3, #0]
 800a744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a746:	401a      	ands	r2, r3
 800a748:	4b1e      	ldr	r3, [pc, #120]	; (800a7c4 <UTIL_SEQ_Run+0x1b4>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	4013      	ands	r3, r2
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d007      	beq.n	800a762 <UTIL_SEQ_Run+0x152>
 800a752:	4b22      	ldr	r3, [pc, #136]	; (800a7dc <UTIL_SEQ_Run+0x1cc>)
 800a754:	681a      	ldr	r2, [r3, #0]
 800a756:	4b22      	ldr	r3, [pc, #136]	; (800a7e0 <UTIL_SEQ_Run+0x1d0>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	4013      	ands	r3, r2
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	f43f af68 	beq.w	800a632 <UTIL_SEQ_Run+0x22>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800a762:	4b1c      	ldr	r3, [pc, #112]	; (800a7d4 <UTIL_SEQ_Run+0x1c4>)
 800a764:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a768:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800a76a:	f000 f937 	bl	800a9dc <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a76e:	f3ef 8310 	mrs	r3, PRIMASK
 800a772:	60fb      	str	r3, [r7, #12]
  return(result);
 800a774:	68fb      	ldr	r3, [r7, #12]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800a776:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800a778:	b672      	cpsid	i
}
 800a77a:	bf00      	nop
  local_taskset = TaskSet;
 800a77c:	4b12      	ldr	r3, [pc, #72]	; (800a7c8 <UTIL_SEQ_Run+0x1b8>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	62bb      	str	r3, [r7, #40]	; 0x28
  if (!(((local_taskset & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 800a782:	4b13      	ldr	r3, [pc, #76]	; (800a7d0 <UTIL_SEQ_Run+0x1c0>)
 800a784:	681a      	ldr	r2, [r3, #0]
 800a786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a788:	401a      	ands	r2, r3
 800a78a:	4b0e      	ldr	r3, [pc, #56]	; (800a7c4 <UTIL_SEQ_Run+0x1b4>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	4013      	ands	r3, r2
 800a790:	2b00      	cmp	r3, #0
 800a792:	d108      	bne.n	800a7a6 <UTIL_SEQ_Run+0x196>
 800a794:	4b11      	ldr	r3, [pc, #68]	; (800a7dc <UTIL_SEQ_Run+0x1cc>)
 800a796:	681a      	ldr	r2, [r3, #0]
 800a798:	4b11      	ldr	r3, [pc, #68]	; (800a7e0 <UTIL_SEQ_Run+0x1d0>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	4013      	ands	r3, r2
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d101      	bne.n	800a7a6 <UTIL_SEQ_Run+0x196>
  {
	UTIL_SEQ_Idle( );
 800a7a2:	f7f6 fb53 	bl	8000e4c <UTIL_SEQ_Idle>
 800a7a6:	69bb      	ldr	r3, [r7, #24]
 800a7a8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	f383 8810 	msr	PRIMASK, r3
}
 800a7b0:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 800a7b2:	f000 f91a 	bl	800a9ea <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800a7b6:	4a03      	ldr	r2, [pc, #12]	; (800a7c4 <UTIL_SEQ_Run+0x1b4>)
 800a7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ba:	6013      	str	r3, [r2, #0]

  return;
 800a7bc:	bf00      	nop
}
 800a7be:	3730      	adds	r7, #48	; 0x30
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}
 800a7c4:	20000030 	.word	0x20000030
 800a7c8:	20001734 	.word	0x20001734
 800a7cc:	200017c4 	.word	0x200017c4
 800a7d0:	2000002c 	.word	0x2000002c
 800a7d4:	20001740 	.word	0x20001740
 800a7d8:	20001744 	.word	0x20001744
 800a7dc:	20001738 	.word	0x20001738
 800a7e0:	2000173c 	.word	0x2000173c

0800a7e4 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b088      	sub	sp, #32
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	60f8      	str	r0, [r7, #12]
 800a7ec:	60b9      	str	r1, [r7, #8]
 800a7ee:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7f0:	f3ef 8310 	mrs	r3, PRIMASK
 800a7f4:	617b      	str	r3, [r7, #20]
  return(result);
 800a7f6:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800a7f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a7fa:	b672      	cpsid	i
}
 800a7fc:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800a7fe:	68f8      	ldr	r0, [r7, #12]
 800a800:	f000 f8fa 	bl	800a9f8 <SEQ_BitPosition>
 800a804:	4603      	mov	r3, r0
 800a806:	4619      	mov	r1, r3
 800a808:	4a06      	ldr	r2, [pc, #24]	; (800a824 <UTIL_SEQ_RegTask+0x40>)
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a810:	69fb      	ldr	r3, [r7, #28]
 800a812:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a814:	69bb      	ldr	r3, [r7, #24]
 800a816:	f383 8810 	msr	PRIMASK, r3
}
 800a81a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800a81c:	bf00      	nop
}
 800a81e:	3720      	adds	r7, #32
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}
 800a824:	20001744 	.word	0x20001744

0800a828 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800a828:	b480      	push	{r7}
 800a82a:	b087      	sub	sp, #28
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
 800a830:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a832:	f3ef 8310 	mrs	r3, PRIMASK
 800a836:	60fb      	str	r3, [r7, #12]
  return(result);
 800a838:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a83a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a83c:	b672      	cpsid	i
}
 800a83e:	bf00      	nop

  TaskSet |= TaskId_bm;
 800a840:	4b0d      	ldr	r3, [pc, #52]	; (800a878 <UTIL_SEQ_SetTask+0x50>)
 800a842:	681a      	ldr	r2, [r3, #0]
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	4313      	orrs	r3, r2
 800a848:	4a0b      	ldr	r2, [pc, #44]	; (800a878 <UTIL_SEQ_SetTask+0x50>)
 800a84a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800a84c:	4a0b      	ldr	r2, [pc, #44]	; (800a87c <UTIL_SEQ_SetTask+0x54>)
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	431a      	orrs	r2, r3
 800a858:	4908      	ldr	r1, [pc, #32]	; (800a87c <UTIL_SEQ_SetTask+0x54>)
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	f383 8810 	msr	PRIMASK, r3
}
 800a86a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a86c:	bf00      	nop
}
 800a86e:	371c      	adds	r7, #28
 800a870:	46bd      	mov	sp, r7
 800a872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a876:	4770      	bx	lr
 800a878:	20001734 	.word	0x20001734
 800a87c:	200017c4 	.word	0x200017c4

0800a880 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800a880:	b480      	push	{r7}
 800a882:	b087      	sub	sp, #28
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a888:	f3ef 8310 	mrs	r3, PRIMASK
 800a88c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a88e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a890:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a892:	b672      	cpsid	i
}
 800a894:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	43da      	mvns	r2, r3
 800a89a:	4b08      	ldr	r3, [pc, #32]	; (800a8bc <UTIL_SEQ_PauseTask+0x3c>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	4013      	ands	r3, r2
 800a8a0:	4a06      	ldr	r2, [pc, #24]	; (800a8bc <UTIL_SEQ_PauseTask+0x3c>)
 800a8a2:	6013      	str	r3, [r2, #0]
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8a8:	693b      	ldr	r3, [r7, #16]
 800a8aa:	f383 8810 	msr	PRIMASK, r3
}
 800a8ae:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a8b0:	bf00      	nop
}
 800a8b2:	371c      	adds	r7, #28
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr
 800a8bc:	2000002c 	.word	0x2000002c

0800a8c0 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b087      	sub	sp, #28
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8c8:	f3ef 8310 	mrs	r3, PRIMASK
 800a8cc:	60fb      	str	r3, [r7, #12]
  return(result);
 800a8ce:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a8d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a8d2:	b672      	cpsid	i
}
 800a8d4:	bf00      	nop

  TaskMask |= TaskId_bm;
 800a8d6:	4b09      	ldr	r3, [pc, #36]	; (800a8fc <UTIL_SEQ_ResumeTask+0x3c>)
 800a8d8:	681a      	ldr	r2, [r3, #0]
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	4313      	orrs	r3, r2
 800a8de:	4a07      	ldr	r2, [pc, #28]	; (800a8fc <UTIL_SEQ_ResumeTask+0x3c>)
 800a8e0:	6013      	str	r3, [r2, #0]
 800a8e2:	697b      	ldr	r3, [r7, #20]
 800a8e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	f383 8810 	msr	PRIMASK, r3
}
 800a8ec:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a8ee:	bf00      	nop
}
 800a8f0:	371c      	adds	r7, #28
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f8:	4770      	bx	lr
 800a8fa:	bf00      	nop
 800a8fc:	2000002c 	.word	0x2000002c

0800a900 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800a900:	b480      	push	{r7}
 800a902:	b087      	sub	sp, #28
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a908:	f3ef 8310 	mrs	r3, PRIMASK
 800a90c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a90e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a910:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a912:	b672      	cpsid	i
}
 800a914:	bf00      	nop

  EvtSet |= EvtId_bm;
 800a916:	4b09      	ldr	r3, [pc, #36]	; (800a93c <UTIL_SEQ_SetEvt+0x3c>)
 800a918:	681a      	ldr	r2, [r3, #0]
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	4313      	orrs	r3, r2
 800a91e:	4a07      	ldr	r2, [pc, #28]	; (800a93c <UTIL_SEQ_SetEvt+0x3c>)
 800a920:	6013      	str	r3, [r2, #0]
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a926:	693b      	ldr	r3, [r7, #16]
 800a928:	f383 8810 	msr	PRIMASK, r3
}
 800a92c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a92e:	bf00      	nop
}
 800a930:	371c      	adds	r7, #28
 800a932:	46bd      	mov	sp, r7
 800a934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a938:	4770      	bx	lr
 800a93a:	bf00      	nop
 800a93c:	20001738 	.word	0x20001738

0800a940 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b088      	sub	sp, #32
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800a948:	4b21      	ldr	r3, [pc, #132]	; (800a9d0 <UTIL_SEQ_WaitEvt+0x90>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800a94e:	4b20      	ldr	r3, [pc, #128]	; (800a9d0 <UTIL_SEQ_WaitEvt+0x90>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a956:	d102      	bne.n	800a95e <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 800a958:	2300      	movs	r3, #0
 800a95a:	61fb      	str	r3, [r7, #28]
 800a95c:	e005      	b.n	800a96a <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 800a95e:	4b1c      	ldr	r3, [pc, #112]	; (800a9d0 <UTIL_SEQ_WaitEvt+0x90>)
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	2201      	movs	r2, #1
 800a964:	fa02 f303 	lsl.w	r3, r2, r3
 800a968:	61fb      	str	r3, [r7, #28]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800a96a:	4b1a      	ldr	r3, [pc, #104]	; (800a9d4 <UTIL_SEQ_WaitEvt+0x94>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800a970:	4a18      	ldr	r2, [pc, #96]	; (800a9d4 <UTIL_SEQ_WaitEvt+0x94>)
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 800a976:	e005      	b.n	800a984 <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 800a978:	4b16      	ldr	r3, [pc, #88]	; (800a9d4 <UTIL_SEQ_WaitEvt+0x94>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	4619      	mov	r1, r3
 800a97e:	69f8      	ldr	r0, [r7, #28]
 800a980:	f7f6 fa6b 	bl	8000e5a <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 800a984:	4b14      	ldr	r3, [pc, #80]	; (800a9d8 <UTIL_SEQ_WaitEvt+0x98>)
 800a986:	681a      	ldr	r2, [r3, #0]
 800a988:	4b12      	ldr	r3, [pc, #72]	; (800a9d4 <UTIL_SEQ_WaitEvt+0x94>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	4013      	ands	r3, r2
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d0f2      	beq.n	800a978 <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800a992:	4a0f      	ldr	r2, [pc, #60]	; (800a9d0 <UTIL_SEQ_WaitEvt+0x90>)
 800a994:	69bb      	ldr	r3, [r7, #24]
 800a996:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a998:	f3ef 8310 	mrs	r3, PRIMASK
 800a99c:	60bb      	str	r3, [r7, #8]
  return(result);
 800a99e:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a9a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a9a2:	b672      	cpsid	i
}
 800a9a4:	bf00      	nop

  EvtSet &= (~EvtWaited);
 800a9a6:	4b0b      	ldr	r3, [pc, #44]	; (800a9d4 <UTIL_SEQ_WaitEvt+0x94>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	43da      	mvns	r2, r3
 800a9ac:	4b0a      	ldr	r3, [pc, #40]	; (800a9d8 <UTIL_SEQ_WaitEvt+0x98>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	4013      	ands	r3, r2
 800a9b2:	4a09      	ldr	r2, [pc, #36]	; (800a9d8 <UTIL_SEQ_WaitEvt+0x98>)
 800a9b4:	6013      	str	r3, [r2, #0]
 800a9b6:	693b      	ldr	r3, [r7, #16]
 800a9b8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	f383 8810 	msr	PRIMASK, r3
}
 800a9c0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800a9c2:	4a04      	ldr	r2, [pc, #16]	; (800a9d4 <UTIL_SEQ_WaitEvt+0x94>)
 800a9c4:	697b      	ldr	r3, [r7, #20]
 800a9c6:	6013      	str	r3, [r2, #0]

  return;
 800a9c8:	bf00      	nop
}
 800a9ca:	3720      	adds	r7, #32
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}
 800a9d0:	20001740 	.word	0x20001740
 800a9d4:	2000173c 	.word	0x2000173c
 800a9d8:	20001738 	.word	0x20001738

0800a9dc <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800a9dc:	b480      	push	{r7}
 800a9de:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800a9e0:	bf00      	nop
}
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e8:	4770      	bx	lr

0800a9ea <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800a9ea:	b480      	push	{r7}
 800a9ec:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800a9ee:	bf00      	nop
}
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f6:	4770      	bx	lr

0800a9f8 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b085      	sub	sp, #20
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 800aa00:	2300      	movs	r3, #0
 800aa02:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	0c1b      	lsrs	r3, r3, #16
 800aa08:	041b      	lsls	r3, r3, #16
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d104      	bne.n	800aa18 <SEQ_BitPosition+0x20>
 800aa0e:	2310      	movs	r3, #16
 800aa10:	73fb      	strb	r3, [r7, #15]
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	041b      	lsls	r3, r3, #16
 800aa16:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d105      	bne.n	800aa2e <SEQ_BitPosition+0x36>
 800aa22:	7bfb      	ldrb	r3, [r7, #15]
 800aa24:	3308      	adds	r3, #8
 800aa26:	73fb      	strb	r3, [r7, #15]
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	021b      	lsls	r3, r3, #8
 800aa2c:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d105      	bne.n	800aa44 <SEQ_BitPosition+0x4c>
 800aa38:	7bfb      	ldrb	r3, [r7, #15]
 800aa3a:	3304      	adds	r3, #4
 800aa3c:	73fb      	strb	r3, [r7, #15]
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	011b      	lsls	r3, r3, #4
 800aa42:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	0f1b      	lsrs	r3, r3, #28
 800aa48:	4a07      	ldr	r2, [pc, #28]	; (800aa68 <SEQ_BitPosition+0x70>)
 800aa4a:	5cd2      	ldrb	r2, [r2, r3]
 800aa4c:	7bfb      	ldrb	r3, [r7, #15]
 800aa4e:	4413      	add	r3, r2
 800aa50:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800aa52:	7bfb      	ldrb	r3, [r7, #15]
 800aa54:	f1c3 031f 	rsb	r3, r3, #31
 800aa58:	b2db      	uxtb	r3, r3
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	3714      	adds	r7, #20
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa64:	4770      	bx	lr
 800aa66:	bf00      	nop
 800aa68:	0800c2b0 	.word	0x0800c2b0

0800aa6c <__errno>:
 800aa6c:	4b01      	ldr	r3, [pc, #4]	; (800aa74 <__errno+0x8>)
 800aa6e:	6818      	ldr	r0, [r3, #0]
 800aa70:	4770      	bx	lr
 800aa72:	bf00      	nop
 800aa74:	20000034 	.word	0x20000034

0800aa78 <__libc_init_array>:
 800aa78:	b570      	push	{r4, r5, r6, lr}
 800aa7a:	4d0d      	ldr	r5, [pc, #52]	; (800aab0 <__libc_init_array+0x38>)
 800aa7c:	4c0d      	ldr	r4, [pc, #52]	; (800aab4 <__libc_init_array+0x3c>)
 800aa7e:	1b64      	subs	r4, r4, r5
 800aa80:	10a4      	asrs	r4, r4, #2
 800aa82:	2600      	movs	r6, #0
 800aa84:	42a6      	cmp	r6, r4
 800aa86:	d109      	bne.n	800aa9c <__libc_init_array+0x24>
 800aa88:	4d0b      	ldr	r5, [pc, #44]	; (800aab8 <__libc_init_array+0x40>)
 800aa8a:	4c0c      	ldr	r4, [pc, #48]	; (800aabc <__libc_init_array+0x44>)
 800aa8c:	f001 f832 	bl	800baf4 <_init>
 800aa90:	1b64      	subs	r4, r4, r5
 800aa92:	10a4      	asrs	r4, r4, #2
 800aa94:	2600      	movs	r6, #0
 800aa96:	42a6      	cmp	r6, r4
 800aa98:	d105      	bne.n	800aaa6 <__libc_init_array+0x2e>
 800aa9a:	bd70      	pop	{r4, r5, r6, pc}
 800aa9c:	f855 3b04 	ldr.w	r3, [r5], #4
 800aaa0:	4798      	blx	r3
 800aaa2:	3601      	adds	r6, #1
 800aaa4:	e7ee      	b.n	800aa84 <__libc_init_array+0xc>
 800aaa6:	f855 3b04 	ldr.w	r3, [r5], #4
 800aaaa:	4798      	blx	r3
 800aaac:	3601      	adds	r6, #1
 800aaae:	e7f2      	b.n	800aa96 <__libc_init_array+0x1e>
 800aab0:	0800c360 	.word	0x0800c360
 800aab4:	0800c360 	.word	0x0800c360
 800aab8:	0800c360 	.word	0x0800c360
 800aabc:	0800c364 	.word	0x0800c364

0800aac0 <memcpy>:
 800aac0:	440a      	add	r2, r1
 800aac2:	4291      	cmp	r1, r2
 800aac4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800aac8:	d100      	bne.n	800aacc <memcpy+0xc>
 800aaca:	4770      	bx	lr
 800aacc:	b510      	push	{r4, lr}
 800aace:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aad2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aad6:	4291      	cmp	r1, r2
 800aad8:	d1f9      	bne.n	800aace <memcpy+0xe>
 800aada:	bd10      	pop	{r4, pc}

0800aadc <memset>:
 800aadc:	4402      	add	r2, r0
 800aade:	4603      	mov	r3, r0
 800aae0:	4293      	cmp	r3, r2
 800aae2:	d100      	bne.n	800aae6 <memset+0xa>
 800aae4:	4770      	bx	lr
 800aae6:	f803 1b01 	strb.w	r1, [r3], #1
 800aaea:	e7f9      	b.n	800aae0 <memset+0x4>

0800aaec <iprintf>:
 800aaec:	b40f      	push	{r0, r1, r2, r3}
 800aaee:	4b0a      	ldr	r3, [pc, #40]	; (800ab18 <iprintf+0x2c>)
 800aaf0:	b513      	push	{r0, r1, r4, lr}
 800aaf2:	681c      	ldr	r4, [r3, #0]
 800aaf4:	b124      	cbz	r4, 800ab00 <iprintf+0x14>
 800aaf6:	69a3      	ldr	r3, [r4, #24]
 800aaf8:	b913      	cbnz	r3, 800ab00 <iprintf+0x14>
 800aafa:	4620      	mov	r0, r4
 800aafc:	f000 fa5e 	bl	800afbc <__sinit>
 800ab00:	ab05      	add	r3, sp, #20
 800ab02:	9a04      	ldr	r2, [sp, #16]
 800ab04:	68a1      	ldr	r1, [r4, #8]
 800ab06:	9301      	str	r3, [sp, #4]
 800ab08:	4620      	mov	r0, r4
 800ab0a:	f000 fc67 	bl	800b3dc <_vfiprintf_r>
 800ab0e:	b002      	add	sp, #8
 800ab10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab14:	b004      	add	sp, #16
 800ab16:	4770      	bx	lr
 800ab18:	20000034 	.word	0x20000034

0800ab1c <_puts_r>:
 800ab1c:	b570      	push	{r4, r5, r6, lr}
 800ab1e:	460e      	mov	r6, r1
 800ab20:	4605      	mov	r5, r0
 800ab22:	b118      	cbz	r0, 800ab2c <_puts_r+0x10>
 800ab24:	6983      	ldr	r3, [r0, #24]
 800ab26:	b90b      	cbnz	r3, 800ab2c <_puts_r+0x10>
 800ab28:	f000 fa48 	bl	800afbc <__sinit>
 800ab2c:	69ab      	ldr	r3, [r5, #24]
 800ab2e:	68ac      	ldr	r4, [r5, #8]
 800ab30:	b913      	cbnz	r3, 800ab38 <_puts_r+0x1c>
 800ab32:	4628      	mov	r0, r5
 800ab34:	f000 fa42 	bl	800afbc <__sinit>
 800ab38:	4b2c      	ldr	r3, [pc, #176]	; (800abec <_puts_r+0xd0>)
 800ab3a:	429c      	cmp	r4, r3
 800ab3c:	d120      	bne.n	800ab80 <_puts_r+0x64>
 800ab3e:	686c      	ldr	r4, [r5, #4]
 800ab40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab42:	07db      	lsls	r3, r3, #31
 800ab44:	d405      	bmi.n	800ab52 <_puts_r+0x36>
 800ab46:	89a3      	ldrh	r3, [r4, #12]
 800ab48:	0598      	lsls	r0, r3, #22
 800ab4a:	d402      	bmi.n	800ab52 <_puts_r+0x36>
 800ab4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab4e:	f000 fad3 	bl	800b0f8 <__retarget_lock_acquire_recursive>
 800ab52:	89a3      	ldrh	r3, [r4, #12]
 800ab54:	0719      	lsls	r1, r3, #28
 800ab56:	d51d      	bpl.n	800ab94 <_puts_r+0x78>
 800ab58:	6923      	ldr	r3, [r4, #16]
 800ab5a:	b1db      	cbz	r3, 800ab94 <_puts_r+0x78>
 800ab5c:	3e01      	subs	r6, #1
 800ab5e:	68a3      	ldr	r3, [r4, #8]
 800ab60:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ab64:	3b01      	subs	r3, #1
 800ab66:	60a3      	str	r3, [r4, #8]
 800ab68:	bb39      	cbnz	r1, 800abba <_puts_r+0x9e>
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	da38      	bge.n	800abe0 <_puts_r+0xc4>
 800ab6e:	4622      	mov	r2, r4
 800ab70:	210a      	movs	r1, #10
 800ab72:	4628      	mov	r0, r5
 800ab74:	f000 f848 	bl	800ac08 <__swbuf_r>
 800ab78:	3001      	adds	r0, #1
 800ab7a:	d011      	beq.n	800aba0 <_puts_r+0x84>
 800ab7c:	250a      	movs	r5, #10
 800ab7e:	e011      	b.n	800aba4 <_puts_r+0x88>
 800ab80:	4b1b      	ldr	r3, [pc, #108]	; (800abf0 <_puts_r+0xd4>)
 800ab82:	429c      	cmp	r4, r3
 800ab84:	d101      	bne.n	800ab8a <_puts_r+0x6e>
 800ab86:	68ac      	ldr	r4, [r5, #8]
 800ab88:	e7da      	b.n	800ab40 <_puts_r+0x24>
 800ab8a:	4b1a      	ldr	r3, [pc, #104]	; (800abf4 <_puts_r+0xd8>)
 800ab8c:	429c      	cmp	r4, r3
 800ab8e:	bf08      	it	eq
 800ab90:	68ec      	ldreq	r4, [r5, #12]
 800ab92:	e7d5      	b.n	800ab40 <_puts_r+0x24>
 800ab94:	4621      	mov	r1, r4
 800ab96:	4628      	mov	r0, r5
 800ab98:	f000 f888 	bl	800acac <__swsetup_r>
 800ab9c:	2800      	cmp	r0, #0
 800ab9e:	d0dd      	beq.n	800ab5c <_puts_r+0x40>
 800aba0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800aba4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aba6:	07da      	lsls	r2, r3, #31
 800aba8:	d405      	bmi.n	800abb6 <_puts_r+0x9a>
 800abaa:	89a3      	ldrh	r3, [r4, #12]
 800abac:	059b      	lsls	r3, r3, #22
 800abae:	d402      	bmi.n	800abb6 <_puts_r+0x9a>
 800abb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abb2:	f000 faa2 	bl	800b0fa <__retarget_lock_release_recursive>
 800abb6:	4628      	mov	r0, r5
 800abb8:	bd70      	pop	{r4, r5, r6, pc}
 800abba:	2b00      	cmp	r3, #0
 800abbc:	da04      	bge.n	800abc8 <_puts_r+0xac>
 800abbe:	69a2      	ldr	r2, [r4, #24]
 800abc0:	429a      	cmp	r2, r3
 800abc2:	dc06      	bgt.n	800abd2 <_puts_r+0xb6>
 800abc4:	290a      	cmp	r1, #10
 800abc6:	d004      	beq.n	800abd2 <_puts_r+0xb6>
 800abc8:	6823      	ldr	r3, [r4, #0]
 800abca:	1c5a      	adds	r2, r3, #1
 800abcc:	6022      	str	r2, [r4, #0]
 800abce:	7019      	strb	r1, [r3, #0]
 800abd0:	e7c5      	b.n	800ab5e <_puts_r+0x42>
 800abd2:	4622      	mov	r2, r4
 800abd4:	4628      	mov	r0, r5
 800abd6:	f000 f817 	bl	800ac08 <__swbuf_r>
 800abda:	3001      	adds	r0, #1
 800abdc:	d1bf      	bne.n	800ab5e <_puts_r+0x42>
 800abde:	e7df      	b.n	800aba0 <_puts_r+0x84>
 800abe0:	6823      	ldr	r3, [r4, #0]
 800abe2:	250a      	movs	r5, #10
 800abe4:	1c5a      	adds	r2, r3, #1
 800abe6:	6022      	str	r2, [r4, #0]
 800abe8:	701d      	strb	r5, [r3, #0]
 800abea:	e7db      	b.n	800aba4 <_puts_r+0x88>
 800abec:	0800c2e4 	.word	0x0800c2e4
 800abf0:	0800c304 	.word	0x0800c304
 800abf4:	0800c2c4 	.word	0x0800c2c4

0800abf8 <puts>:
 800abf8:	4b02      	ldr	r3, [pc, #8]	; (800ac04 <puts+0xc>)
 800abfa:	4601      	mov	r1, r0
 800abfc:	6818      	ldr	r0, [r3, #0]
 800abfe:	f7ff bf8d 	b.w	800ab1c <_puts_r>
 800ac02:	bf00      	nop
 800ac04:	20000034 	.word	0x20000034

0800ac08 <__swbuf_r>:
 800ac08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac0a:	460e      	mov	r6, r1
 800ac0c:	4614      	mov	r4, r2
 800ac0e:	4605      	mov	r5, r0
 800ac10:	b118      	cbz	r0, 800ac1a <__swbuf_r+0x12>
 800ac12:	6983      	ldr	r3, [r0, #24]
 800ac14:	b90b      	cbnz	r3, 800ac1a <__swbuf_r+0x12>
 800ac16:	f000 f9d1 	bl	800afbc <__sinit>
 800ac1a:	4b21      	ldr	r3, [pc, #132]	; (800aca0 <__swbuf_r+0x98>)
 800ac1c:	429c      	cmp	r4, r3
 800ac1e:	d12b      	bne.n	800ac78 <__swbuf_r+0x70>
 800ac20:	686c      	ldr	r4, [r5, #4]
 800ac22:	69a3      	ldr	r3, [r4, #24]
 800ac24:	60a3      	str	r3, [r4, #8]
 800ac26:	89a3      	ldrh	r3, [r4, #12]
 800ac28:	071a      	lsls	r2, r3, #28
 800ac2a:	d52f      	bpl.n	800ac8c <__swbuf_r+0x84>
 800ac2c:	6923      	ldr	r3, [r4, #16]
 800ac2e:	b36b      	cbz	r3, 800ac8c <__swbuf_r+0x84>
 800ac30:	6923      	ldr	r3, [r4, #16]
 800ac32:	6820      	ldr	r0, [r4, #0]
 800ac34:	1ac0      	subs	r0, r0, r3
 800ac36:	6963      	ldr	r3, [r4, #20]
 800ac38:	b2f6      	uxtb	r6, r6
 800ac3a:	4283      	cmp	r3, r0
 800ac3c:	4637      	mov	r7, r6
 800ac3e:	dc04      	bgt.n	800ac4a <__swbuf_r+0x42>
 800ac40:	4621      	mov	r1, r4
 800ac42:	4628      	mov	r0, r5
 800ac44:	f000 f926 	bl	800ae94 <_fflush_r>
 800ac48:	bb30      	cbnz	r0, 800ac98 <__swbuf_r+0x90>
 800ac4a:	68a3      	ldr	r3, [r4, #8]
 800ac4c:	3b01      	subs	r3, #1
 800ac4e:	60a3      	str	r3, [r4, #8]
 800ac50:	6823      	ldr	r3, [r4, #0]
 800ac52:	1c5a      	adds	r2, r3, #1
 800ac54:	6022      	str	r2, [r4, #0]
 800ac56:	701e      	strb	r6, [r3, #0]
 800ac58:	6963      	ldr	r3, [r4, #20]
 800ac5a:	3001      	adds	r0, #1
 800ac5c:	4283      	cmp	r3, r0
 800ac5e:	d004      	beq.n	800ac6a <__swbuf_r+0x62>
 800ac60:	89a3      	ldrh	r3, [r4, #12]
 800ac62:	07db      	lsls	r3, r3, #31
 800ac64:	d506      	bpl.n	800ac74 <__swbuf_r+0x6c>
 800ac66:	2e0a      	cmp	r6, #10
 800ac68:	d104      	bne.n	800ac74 <__swbuf_r+0x6c>
 800ac6a:	4621      	mov	r1, r4
 800ac6c:	4628      	mov	r0, r5
 800ac6e:	f000 f911 	bl	800ae94 <_fflush_r>
 800ac72:	b988      	cbnz	r0, 800ac98 <__swbuf_r+0x90>
 800ac74:	4638      	mov	r0, r7
 800ac76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac78:	4b0a      	ldr	r3, [pc, #40]	; (800aca4 <__swbuf_r+0x9c>)
 800ac7a:	429c      	cmp	r4, r3
 800ac7c:	d101      	bne.n	800ac82 <__swbuf_r+0x7a>
 800ac7e:	68ac      	ldr	r4, [r5, #8]
 800ac80:	e7cf      	b.n	800ac22 <__swbuf_r+0x1a>
 800ac82:	4b09      	ldr	r3, [pc, #36]	; (800aca8 <__swbuf_r+0xa0>)
 800ac84:	429c      	cmp	r4, r3
 800ac86:	bf08      	it	eq
 800ac88:	68ec      	ldreq	r4, [r5, #12]
 800ac8a:	e7ca      	b.n	800ac22 <__swbuf_r+0x1a>
 800ac8c:	4621      	mov	r1, r4
 800ac8e:	4628      	mov	r0, r5
 800ac90:	f000 f80c 	bl	800acac <__swsetup_r>
 800ac94:	2800      	cmp	r0, #0
 800ac96:	d0cb      	beq.n	800ac30 <__swbuf_r+0x28>
 800ac98:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ac9c:	e7ea      	b.n	800ac74 <__swbuf_r+0x6c>
 800ac9e:	bf00      	nop
 800aca0:	0800c2e4 	.word	0x0800c2e4
 800aca4:	0800c304 	.word	0x0800c304
 800aca8:	0800c2c4 	.word	0x0800c2c4

0800acac <__swsetup_r>:
 800acac:	4b32      	ldr	r3, [pc, #200]	; (800ad78 <__swsetup_r+0xcc>)
 800acae:	b570      	push	{r4, r5, r6, lr}
 800acb0:	681d      	ldr	r5, [r3, #0]
 800acb2:	4606      	mov	r6, r0
 800acb4:	460c      	mov	r4, r1
 800acb6:	b125      	cbz	r5, 800acc2 <__swsetup_r+0x16>
 800acb8:	69ab      	ldr	r3, [r5, #24]
 800acba:	b913      	cbnz	r3, 800acc2 <__swsetup_r+0x16>
 800acbc:	4628      	mov	r0, r5
 800acbe:	f000 f97d 	bl	800afbc <__sinit>
 800acc2:	4b2e      	ldr	r3, [pc, #184]	; (800ad7c <__swsetup_r+0xd0>)
 800acc4:	429c      	cmp	r4, r3
 800acc6:	d10f      	bne.n	800ace8 <__swsetup_r+0x3c>
 800acc8:	686c      	ldr	r4, [r5, #4]
 800acca:	89a3      	ldrh	r3, [r4, #12]
 800accc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800acd0:	0719      	lsls	r1, r3, #28
 800acd2:	d42c      	bmi.n	800ad2e <__swsetup_r+0x82>
 800acd4:	06dd      	lsls	r5, r3, #27
 800acd6:	d411      	bmi.n	800acfc <__swsetup_r+0x50>
 800acd8:	2309      	movs	r3, #9
 800acda:	6033      	str	r3, [r6, #0]
 800acdc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ace0:	81a3      	strh	r3, [r4, #12]
 800ace2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ace6:	e03e      	b.n	800ad66 <__swsetup_r+0xba>
 800ace8:	4b25      	ldr	r3, [pc, #148]	; (800ad80 <__swsetup_r+0xd4>)
 800acea:	429c      	cmp	r4, r3
 800acec:	d101      	bne.n	800acf2 <__swsetup_r+0x46>
 800acee:	68ac      	ldr	r4, [r5, #8]
 800acf0:	e7eb      	b.n	800acca <__swsetup_r+0x1e>
 800acf2:	4b24      	ldr	r3, [pc, #144]	; (800ad84 <__swsetup_r+0xd8>)
 800acf4:	429c      	cmp	r4, r3
 800acf6:	bf08      	it	eq
 800acf8:	68ec      	ldreq	r4, [r5, #12]
 800acfa:	e7e6      	b.n	800acca <__swsetup_r+0x1e>
 800acfc:	0758      	lsls	r0, r3, #29
 800acfe:	d512      	bpl.n	800ad26 <__swsetup_r+0x7a>
 800ad00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad02:	b141      	cbz	r1, 800ad16 <__swsetup_r+0x6a>
 800ad04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad08:	4299      	cmp	r1, r3
 800ad0a:	d002      	beq.n	800ad12 <__swsetup_r+0x66>
 800ad0c:	4630      	mov	r0, r6
 800ad0e:	f000 fa5b 	bl	800b1c8 <_free_r>
 800ad12:	2300      	movs	r3, #0
 800ad14:	6363      	str	r3, [r4, #52]	; 0x34
 800ad16:	89a3      	ldrh	r3, [r4, #12]
 800ad18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ad1c:	81a3      	strh	r3, [r4, #12]
 800ad1e:	2300      	movs	r3, #0
 800ad20:	6063      	str	r3, [r4, #4]
 800ad22:	6923      	ldr	r3, [r4, #16]
 800ad24:	6023      	str	r3, [r4, #0]
 800ad26:	89a3      	ldrh	r3, [r4, #12]
 800ad28:	f043 0308 	orr.w	r3, r3, #8
 800ad2c:	81a3      	strh	r3, [r4, #12]
 800ad2e:	6923      	ldr	r3, [r4, #16]
 800ad30:	b94b      	cbnz	r3, 800ad46 <__swsetup_r+0x9a>
 800ad32:	89a3      	ldrh	r3, [r4, #12]
 800ad34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ad38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad3c:	d003      	beq.n	800ad46 <__swsetup_r+0x9a>
 800ad3e:	4621      	mov	r1, r4
 800ad40:	4630      	mov	r0, r6
 800ad42:	f000 fa01 	bl	800b148 <__smakebuf_r>
 800ad46:	89a0      	ldrh	r0, [r4, #12]
 800ad48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ad4c:	f010 0301 	ands.w	r3, r0, #1
 800ad50:	d00a      	beq.n	800ad68 <__swsetup_r+0xbc>
 800ad52:	2300      	movs	r3, #0
 800ad54:	60a3      	str	r3, [r4, #8]
 800ad56:	6963      	ldr	r3, [r4, #20]
 800ad58:	425b      	negs	r3, r3
 800ad5a:	61a3      	str	r3, [r4, #24]
 800ad5c:	6923      	ldr	r3, [r4, #16]
 800ad5e:	b943      	cbnz	r3, 800ad72 <__swsetup_r+0xc6>
 800ad60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ad64:	d1ba      	bne.n	800acdc <__swsetup_r+0x30>
 800ad66:	bd70      	pop	{r4, r5, r6, pc}
 800ad68:	0781      	lsls	r1, r0, #30
 800ad6a:	bf58      	it	pl
 800ad6c:	6963      	ldrpl	r3, [r4, #20]
 800ad6e:	60a3      	str	r3, [r4, #8]
 800ad70:	e7f4      	b.n	800ad5c <__swsetup_r+0xb0>
 800ad72:	2000      	movs	r0, #0
 800ad74:	e7f7      	b.n	800ad66 <__swsetup_r+0xba>
 800ad76:	bf00      	nop
 800ad78:	20000034 	.word	0x20000034
 800ad7c:	0800c2e4 	.word	0x0800c2e4
 800ad80:	0800c304 	.word	0x0800c304
 800ad84:	0800c2c4 	.word	0x0800c2c4

0800ad88 <__sflush_r>:
 800ad88:	898a      	ldrh	r2, [r1, #12]
 800ad8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad8e:	4605      	mov	r5, r0
 800ad90:	0710      	lsls	r0, r2, #28
 800ad92:	460c      	mov	r4, r1
 800ad94:	d458      	bmi.n	800ae48 <__sflush_r+0xc0>
 800ad96:	684b      	ldr	r3, [r1, #4]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	dc05      	bgt.n	800ada8 <__sflush_r+0x20>
 800ad9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	dc02      	bgt.n	800ada8 <__sflush_r+0x20>
 800ada2:	2000      	movs	r0, #0
 800ada4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ada8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800adaa:	2e00      	cmp	r6, #0
 800adac:	d0f9      	beq.n	800ada2 <__sflush_r+0x1a>
 800adae:	2300      	movs	r3, #0
 800adb0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800adb4:	682f      	ldr	r7, [r5, #0]
 800adb6:	602b      	str	r3, [r5, #0]
 800adb8:	d032      	beq.n	800ae20 <__sflush_r+0x98>
 800adba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800adbc:	89a3      	ldrh	r3, [r4, #12]
 800adbe:	075a      	lsls	r2, r3, #29
 800adc0:	d505      	bpl.n	800adce <__sflush_r+0x46>
 800adc2:	6863      	ldr	r3, [r4, #4]
 800adc4:	1ac0      	subs	r0, r0, r3
 800adc6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800adc8:	b10b      	cbz	r3, 800adce <__sflush_r+0x46>
 800adca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800adcc:	1ac0      	subs	r0, r0, r3
 800adce:	2300      	movs	r3, #0
 800add0:	4602      	mov	r2, r0
 800add2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800add4:	6a21      	ldr	r1, [r4, #32]
 800add6:	4628      	mov	r0, r5
 800add8:	47b0      	blx	r6
 800adda:	1c43      	adds	r3, r0, #1
 800addc:	89a3      	ldrh	r3, [r4, #12]
 800adde:	d106      	bne.n	800adee <__sflush_r+0x66>
 800ade0:	6829      	ldr	r1, [r5, #0]
 800ade2:	291d      	cmp	r1, #29
 800ade4:	d82c      	bhi.n	800ae40 <__sflush_r+0xb8>
 800ade6:	4a2a      	ldr	r2, [pc, #168]	; (800ae90 <__sflush_r+0x108>)
 800ade8:	40ca      	lsrs	r2, r1
 800adea:	07d6      	lsls	r6, r2, #31
 800adec:	d528      	bpl.n	800ae40 <__sflush_r+0xb8>
 800adee:	2200      	movs	r2, #0
 800adf0:	6062      	str	r2, [r4, #4]
 800adf2:	04d9      	lsls	r1, r3, #19
 800adf4:	6922      	ldr	r2, [r4, #16]
 800adf6:	6022      	str	r2, [r4, #0]
 800adf8:	d504      	bpl.n	800ae04 <__sflush_r+0x7c>
 800adfa:	1c42      	adds	r2, r0, #1
 800adfc:	d101      	bne.n	800ae02 <__sflush_r+0x7a>
 800adfe:	682b      	ldr	r3, [r5, #0]
 800ae00:	b903      	cbnz	r3, 800ae04 <__sflush_r+0x7c>
 800ae02:	6560      	str	r0, [r4, #84]	; 0x54
 800ae04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae06:	602f      	str	r7, [r5, #0]
 800ae08:	2900      	cmp	r1, #0
 800ae0a:	d0ca      	beq.n	800ada2 <__sflush_r+0x1a>
 800ae0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae10:	4299      	cmp	r1, r3
 800ae12:	d002      	beq.n	800ae1a <__sflush_r+0x92>
 800ae14:	4628      	mov	r0, r5
 800ae16:	f000 f9d7 	bl	800b1c8 <_free_r>
 800ae1a:	2000      	movs	r0, #0
 800ae1c:	6360      	str	r0, [r4, #52]	; 0x34
 800ae1e:	e7c1      	b.n	800ada4 <__sflush_r+0x1c>
 800ae20:	6a21      	ldr	r1, [r4, #32]
 800ae22:	2301      	movs	r3, #1
 800ae24:	4628      	mov	r0, r5
 800ae26:	47b0      	blx	r6
 800ae28:	1c41      	adds	r1, r0, #1
 800ae2a:	d1c7      	bne.n	800adbc <__sflush_r+0x34>
 800ae2c:	682b      	ldr	r3, [r5, #0]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d0c4      	beq.n	800adbc <__sflush_r+0x34>
 800ae32:	2b1d      	cmp	r3, #29
 800ae34:	d001      	beq.n	800ae3a <__sflush_r+0xb2>
 800ae36:	2b16      	cmp	r3, #22
 800ae38:	d101      	bne.n	800ae3e <__sflush_r+0xb6>
 800ae3a:	602f      	str	r7, [r5, #0]
 800ae3c:	e7b1      	b.n	800ada2 <__sflush_r+0x1a>
 800ae3e:	89a3      	ldrh	r3, [r4, #12]
 800ae40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae44:	81a3      	strh	r3, [r4, #12]
 800ae46:	e7ad      	b.n	800ada4 <__sflush_r+0x1c>
 800ae48:	690f      	ldr	r7, [r1, #16]
 800ae4a:	2f00      	cmp	r7, #0
 800ae4c:	d0a9      	beq.n	800ada2 <__sflush_r+0x1a>
 800ae4e:	0793      	lsls	r3, r2, #30
 800ae50:	680e      	ldr	r6, [r1, #0]
 800ae52:	bf08      	it	eq
 800ae54:	694b      	ldreq	r3, [r1, #20]
 800ae56:	600f      	str	r7, [r1, #0]
 800ae58:	bf18      	it	ne
 800ae5a:	2300      	movne	r3, #0
 800ae5c:	eba6 0807 	sub.w	r8, r6, r7
 800ae60:	608b      	str	r3, [r1, #8]
 800ae62:	f1b8 0f00 	cmp.w	r8, #0
 800ae66:	dd9c      	ble.n	800ada2 <__sflush_r+0x1a>
 800ae68:	6a21      	ldr	r1, [r4, #32]
 800ae6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ae6c:	4643      	mov	r3, r8
 800ae6e:	463a      	mov	r2, r7
 800ae70:	4628      	mov	r0, r5
 800ae72:	47b0      	blx	r6
 800ae74:	2800      	cmp	r0, #0
 800ae76:	dc06      	bgt.n	800ae86 <__sflush_r+0xfe>
 800ae78:	89a3      	ldrh	r3, [r4, #12]
 800ae7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae7e:	81a3      	strh	r3, [r4, #12]
 800ae80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae84:	e78e      	b.n	800ada4 <__sflush_r+0x1c>
 800ae86:	4407      	add	r7, r0
 800ae88:	eba8 0800 	sub.w	r8, r8, r0
 800ae8c:	e7e9      	b.n	800ae62 <__sflush_r+0xda>
 800ae8e:	bf00      	nop
 800ae90:	20400001 	.word	0x20400001

0800ae94 <_fflush_r>:
 800ae94:	b538      	push	{r3, r4, r5, lr}
 800ae96:	690b      	ldr	r3, [r1, #16]
 800ae98:	4605      	mov	r5, r0
 800ae9a:	460c      	mov	r4, r1
 800ae9c:	b913      	cbnz	r3, 800aea4 <_fflush_r+0x10>
 800ae9e:	2500      	movs	r5, #0
 800aea0:	4628      	mov	r0, r5
 800aea2:	bd38      	pop	{r3, r4, r5, pc}
 800aea4:	b118      	cbz	r0, 800aeae <_fflush_r+0x1a>
 800aea6:	6983      	ldr	r3, [r0, #24]
 800aea8:	b90b      	cbnz	r3, 800aeae <_fflush_r+0x1a>
 800aeaa:	f000 f887 	bl	800afbc <__sinit>
 800aeae:	4b14      	ldr	r3, [pc, #80]	; (800af00 <_fflush_r+0x6c>)
 800aeb0:	429c      	cmp	r4, r3
 800aeb2:	d11b      	bne.n	800aeec <_fflush_r+0x58>
 800aeb4:	686c      	ldr	r4, [r5, #4]
 800aeb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d0ef      	beq.n	800ae9e <_fflush_r+0xa>
 800aebe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aec0:	07d0      	lsls	r0, r2, #31
 800aec2:	d404      	bmi.n	800aece <_fflush_r+0x3a>
 800aec4:	0599      	lsls	r1, r3, #22
 800aec6:	d402      	bmi.n	800aece <_fflush_r+0x3a>
 800aec8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aeca:	f000 f915 	bl	800b0f8 <__retarget_lock_acquire_recursive>
 800aece:	4628      	mov	r0, r5
 800aed0:	4621      	mov	r1, r4
 800aed2:	f7ff ff59 	bl	800ad88 <__sflush_r>
 800aed6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aed8:	07da      	lsls	r2, r3, #31
 800aeda:	4605      	mov	r5, r0
 800aedc:	d4e0      	bmi.n	800aea0 <_fflush_r+0xc>
 800aede:	89a3      	ldrh	r3, [r4, #12]
 800aee0:	059b      	lsls	r3, r3, #22
 800aee2:	d4dd      	bmi.n	800aea0 <_fflush_r+0xc>
 800aee4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aee6:	f000 f908 	bl	800b0fa <__retarget_lock_release_recursive>
 800aeea:	e7d9      	b.n	800aea0 <_fflush_r+0xc>
 800aeec:	4b05      	ldr	r3, [pc, #20]	; (800af04 <_fflush_r+0x70>)
 800aeee:	429c      	cmp	r4, r3
 800aef0:	d101      	bne.n	800aef6 <_fflush_r+0x62>
 800aef2:	68ac      	ldr	r4, [r5, #8]
 800aef4:	e7df      	b.n	800aeb6 <_fflush_r+0x22>
 800aef6:	4b04      	ldr	r3, [pc, #16]	; (800af08 <_fflush_r+0x74>)
 800aef8:	429c      	cmp	r4, r3
 800aefa:	bf08      	it	eq
 800aefc:	68ec      	ldreq	r4, [r5, #12]
 800aefe:	e7da      	b.n	800aeb6 <_fflush_r+0x22>
 800af00:	0800c2e4 	.word	0x0800c2e4
 800af04:	0800c304 	.word	0x0800c304
 800af08:	0800c2c4 	.word	0x0800c2c4

0800af0c <std>:
 800af0c:	2300      	movs	r3, #0
 800af0e:	b510      	push	{r4, lr}
 800af10:	4604      	mov	r4, r0
 800af12:	e9c0 3300 	strd	r3, r3, [r0]
 800af16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800af1a:	6083      	str	r3, [r0, #8]
 800af1c:	8181      	strh	r1, [r0, #12]
 800af1e:	6643      	str	r3, [r0, #100]	; 0x64
 800af20:	81c2      	strh	r2, [r0, #14]
 800af22:	6183      	str	r3, [r0, #24]
 800af24:	4619      	mov	r1, r3
 800af26:	2208      	movs	r2, #8
 800af28:	305c      	adds	r0, #92	; 0x5c
 800af2a:	f7ff fdd7 	bl	800aadc <memset>
 800af2e:	4b05      	ldr	r3, [pc, #20]	; (800af44 <std+0x38>)
 800af30:	6263      	str	r3, [r4, #36]	; 0x24
 800af32:	4b05      	ldr	r3, [pc, #20]	; (800af48 <std+0x3c>)
 800af34:	62a3      	str	r3, [r4, #40]	; 0x28
 800af36:	4b05      	ldr	r3, [pc, #20]	; (800af4c <std+0x40>)
 800af38:	62e3      	str	r3, [r4, #44]	; 0x2c
 800af3a:	4b05      	ldr	r3, [pc, #20]	; (800af50 <std+0x44>)
 800af3c:	6224      	str	r4, [r4, #32]
 800af3e:	6323      	str	r3, [r4, #48]	; 0x30
 800af40:	bd10      	pop	{r4, pc}
 800af42:	bf00      	nop
 800af44:	0800b985 	.word	0x0800b985
 800af48:	0800b9a7 	.word	0x0800b9a7
 800af4c:	0800b9df 	.word	0x0800b9df
 800af50:	0800ba03 	.word	0x0800ba03

0800af54 <_cleanup_r>:
 800af54:	4901      	ldr	r1, [pc, #4]	; (800af5c <_cleanup_r+0x8>)
 800af56:	f000 b8af 	b.w	800b0b8 <_fwalk_reent>
 800af5a:	bf00      	nop
 800af5c:	0800ae95 	.word	0x0800ae95

0800af60 <__sfmoreglue>:
 800af60:	b570      	push	{r4, r5, r6, lr}
 800af62:	2268      	movs	r2, #104	; 0x68
 800af64:	1e4d      	subs	r5, r1, #1
 800af66:	4355      	muls	r5, r2
 800af68:	460e      	mov	r6, r1
 800af6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800af6e:	f000 f997 	bl	800b2a0 <_malloc_r>
 800af72:	4604      	mov	r4, r0
 800af74:	b140      	cbz	r0, 800af88 <__sfmoreglue+0x28>
 800af76:	2100      	movs	r1, #0
 800af78:	e9c0 1600 	strd	r1, r6, [r0]
 800af7c:	300c      	adds	r0, #12
 800af7e:	60a0      	str	r0, [r4, #8]
 800af80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800af84:	f7ff fdaa 	bl	800aadc <memset>
 800af88:	4620      	mov	r0, r4
 800af8a:	bd70      	pop	{r4, r5, r6, pc}

0800af8c <__sfp_lock_acquire>:
 800af8c:	4801      	ldr	r0, [pc, #4]	; (800af94 <__sfp_lock_acquire+0x8>)
 800af8e:	f000 b8b3 	b.w	800b0f8 <__retarget_lock_acquire_recursive>
 800af92:	bf00      	nop
 800af94:	200017d5 	.word	0x200017d5

0800af98 <__sfp_lock_release>:
 800af98:	4801      	ldr	r0, [pc, #4]	; (800afa0 <__sfp_lock_release+0x8>)
 800af9a:	f000 b8ae 	b.w	800b0fa <__retarget_lock_release_recursive>
 800af9e:	bf00      	nop
 800afa0:	200017d5 	.word	0x200017d5

0800afa4 <__sinit_lock_acquire>:
 800afa4:	4801      	ldr	r0, [pc, #4]	; (800afac <__sinit_lock_acquire+0x8>)
 800afa6:	f000 b8a7 	b.w	800b0f8 <__retarget_lock_acquire_recursive>
 800afaa:	bf00      	nop
 800afac:	200017d6 	.word	0x200017d6

0800afb0 <__sinit_lock_release>:
 800afb0:	4801      	ldr	r0, [pc, #4]	; (800afb8 <__sinit_lock_release+0x8>)
 800afb2:	f000 b8a2 	b.w	800b0fa <__retarget_lock_release_recursive>
 800afb6:	bf00      	nop
 800afb8:	200017d6 	.word	0x200017d6

0800afbc <__sinit>:
 800afbc:	b510      	push	{r4, lr}
 800afbe:	4604      	mov	r4, r0
 800afc0:	f7ff fff0 	bl	800afa4 <__sinit_lock_acquire>
 800afc4:	69a3      	ldr	r3, [r4, #24]
 800afc6:	b11b      	cbz	r3, 800afd0 <__sinit+0x14>
 800afc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afcc:	f7ff bff0 	b.w	800afb0 <__sinit_lock_release>
 800afd0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800afd4:	6523      	str	r3, [r4, #80]	; 0x50
 800afd6:	4b13      	ldr	r3, [pc, #76]	; (800b024 <__sinit+0x68>)
 800afd8:	4a13      	ldr	r2, [pc, #76]	; (800b028 <__sinit+0x6c>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	62a2      	str	r2, [r4, #40]	; 0x28
 800afde:	42a3      	cmp	r3, r4
 800afe0:	bf04      	itt	eq
 800afe2:	2301      	moveq	r3, #1
 800afe4:	61a3      	streq	r3, [r4, #24]
 800afe6:	4620      	mov	r0, r4
 800afe8:	f000 f820 	bl	800b02c <__sfp>
 800afec:	6060      	str	r0, [r4, #4]
 800afee:	4620      	mov	r0, r4
 800aff0:	f000 f81c 	bl	800b02c <__sfp>
 800aff4:	60a0      	str	r0, [r4, #8]
 800aff6:	4620      	mov	r0, r4
 800aff8:	f000 f818 	bl	800b02c <__sfp>
 800affc:	2200      	movs	r2, #0
 800affe:	60e0      	str	r0, [r4, #12]
 800b000:	2104      	movs	r1, #4
 800b002:	6860      	ldr	r0, [r4, #4]
 800b004:	f7ff ff82 	bl	800af0c <std>
 800b008:	68a0      	ldr	r0, [r4, #8]
 800b00a:	2201      	movs	r2, #1
 800b00c:	2109      	movs	r1, #9
 800b00e:	f7ff ff7d 	bl	800af0c <std>
 800b012:	68e0      	ldr	r0, [r4, #12]
 800b014:	2202      	movs	r2, #2
 800b016:	2112      	movs	r1, #18
 800b018:	f7ff ff78 	bl	800af0c <std>
 800b01c:	2301      	movs	r3, #1
 800b01e:	61a3      	str	r3, [r4, #24]
 800b020:	e7d2      	b.n	800afc8 <__sinit+0xc>
 800b022:	bf00      	nop
 800b024:	0800c2c0 	.word	0x0800c2c0
 800b028:	0800af55 	.word	0x0800af55

0800b02c <__sfp>:
 800b02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b02e:	4607      	mov	r7, r0
 800b030:	f7ff ffac 	bl	800af8c <__sfp_lock_acquire>
 800b034:	4b1e      	ldr	r3, [pc, #120]	; (800b0b0 <__sfp+0x84>)
 800b036:	681e      	ldr	r6, [r3, #0]
 800b038:	69b3      	ldr	r3, [r6, #24]
 800b03a:	b913      	cbnz	r3, 800b042 <__sfp+0x16>
 800b03c:	4630      	mov	r0, r6
 800b03e:	f7ff ffbd 	bl	800afbc <__sinit>
 800b042:	3648      	adds	r6, #72	; 0x48
 800b044:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b048:	3b01      	subs	r3, #1
 800b04a:	d503      	bpl.n	800b054 <__sfp+0x28>
 800b04c:	6833      	ldr	r3, [r6, #0]
 800b04e:	b30b      	cbz	r3, 800b094 <__sfp+0x68>
 800b050:	6836      	ldr	r6, [r6, #0]
 800b052:	e7f7      	b.n	800b044 <__sfp+0x18>
 800b054:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b058:	b9d5      	cbnz	r5, 800b090 <__sfp+0x64>
 800b05a:	4b16      	ldr	r3, [pc, #88]	; (800b0b4 <__sfp+0x88>)
 800b05c:	60e3      	str	r3, [r4, #12]
 800b05e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b062:	6665      	str	r5, [r4, #100]	; 0x64
 800b064:	f000 f847 	bl	800b0f6 <__retarget_lock_init_recursive>
 800b068:	f7ff ff96 	bl	800af98 <__sfp_lock_release>
 800b06c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b070:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b074:	6025      	str	r5, [r4, #0]
 800b076:	61a5      	str	r5, [r4, #24]
 800b078:	2208      	movs	r2, #8
 800b07a:	4629      	mov	r1, r5
 800b07c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b080:	f7ff fd2c 	bl	800aadc <memset>
 800b084:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b088:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b08c:	4620      	mov	r0, r4
 800b08e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b090:	3468      	adds	r4, #104	; 0x68
 800b092:	e7d9      	b.n	800b048 <__sfp+0x1c>
 800b094:	2104      	movs	r1, #4
 800b096:	4638      	mov	r0, r7
 800b098:	f7ff ff62 	bl	800af60 <__sfmoreglue>
 800b09c:	4604      	mov	r4, r0
 800b09e:	6030      	str	r0, [r6, #0]
 800b0a0:	2800      	cmp	r0, #0
 800b0a2:	d1d5      	bne.n	800b050 <__sfp+0x24>
 800b0a4:	f7ff ff78 	bl	800af98 <__sfp_lock_release>
 800b0a8:	230c      	movs	r3, #12
 800b0aa:	603b      	str	r3, [r7, #0]
 800b0ac:	e7ee      	b.n	800b08c <__sfp+0x60>
 800b0ae:	bf00      	nop
 800b0b0:	0800c2c0 	.word	0x0800c2c0
 800b0b4:	ffff0001 	.word	0xffff0001

0800b0b8 <_fwalk_reent>:
 800b0b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0bc:	4606      	mov	r6, r0
 800b0be:	4688      	mov	r8, r1
 800b0c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b0c4:	2700      	movs	r7, #0
 800b0c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b0ca:	f1b9 0901 	subs.w	r9, r9, #1
 800b0ce:	d505      	bpl.n	800b0dc <_fwalk_reent+0x24>
 800b0d0:	6824      	ldr	r4, [r4, #0]
 800b0d2:	2c00      	cmp	r4, #0
 800b0d4:	d1f7      	bne.n	800b0c6 <_fwalk_reent+0xe>
 800b0d6:	4638      	mov	r0, r7
 800b0d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0dc:	89ab      	ldrh	r3, [r5, #12]
 800b0de:	2b01      	cmp	r3, #1
 800b0e0:	d907      	bls.n	800b0f2 <_fwalk_reent+0x3a>
 800b0e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b0e6:	3301      	adds	r3, #1
 800b0e8:	d003      	beq.n	800b0f2 <_fwalk_reent+0x3a>
 800b0ea:	4629      	mov	r1, r5
 800b0ec:	4630      	mov	r0, r6
 800b0ee:	47c0      	blx	r8
 800b0f0:	4307      	orrs	r7, r0
 800b0f2:	3568      	adds	r5, #104	; 0x68
 800b0f4:	e7e9      	b.n	800b0ca <_fwalk_reent+0x12>

0800b0f6 <__retarget_lock_init_recursive>:
 800b0f6:	4770      	bx	lr

0800b0f8 <__retarget_lock_acquire_recursive>:
 800b0f8:	4770      	bx	lr

0800b0fa <__retarget_lock_release_recursive>:
 800b0fa:	4770      	bx	lr

0800b0fc <__swhatbuf_r>:
 800b0fc:	b570      	push	{r4, r5, r6, lr}
 800b0fe:	460e      	mov	r6, r1
 800b100:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b104:	2900      	cmp	r1, #0
 800b106:	b096      	sub	sp, #88	; 0x58
 800b108:	4614      	mov	r4, r2
 800b10a:	461d      	mov	r5, r3
 800b10c:	da08      	bge.n	800b120 <__swhatbuf_r+0x24>
 800b10e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b112:	2200      	movs	r2, #0
 800b114:	602a      	str	r2, [r5, #0]
 800b116:	061a      	lsls	r2, r3, #24
 800b118:	d410      	bmi.n	800b13c <__swhatbuf_r+0x40>
 800b11a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b11e:	e00e      	b.n	800b13e <__swhatbuf_r+0x42>
 800b120:	466a      	mov	r2, sp
 800b122:	f000 fc95 	bl	800ba50 <_fstat_r>
 800b126:	2800      	cmp	r0, #0
 800b128:	dbf1      	blt.n	800b10e <__swhatbuf_r+0x12>
 800b12a:	9a01      	ldr	r2, [sp, #4]
 800b12c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b130:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b134:	425a      	negs	r2, r3
 800b136:	415a      	adcs	r2, r3
 800b138:	602a      	str	r2, [r5, #0]
 800b13a:	e7ee      	b.n	800b11a <__swhatbuf_r+0x1e>
 800b13c:	2340      	movs	r3, #64	; 0x40
 800b13e:	2000      	movs	r0, #0
 800b140:	6023      	str	r3, [r4, #0]
 800b142:	b016      	add	sp, #88	; 0x58
 800b144:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b148 <__smakebuf_r>:
 800b148:	898b      	ldrh	r3, [r1, #12]
 800b14a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b14c:	079d      	lsls	r5, r3, #30
 800b14e:	4606      	mov	r6, r0
 800b150:	460c      	mov	r4, r1
 800b152:	d507      	bpl.n	800b164 <__smakebuf_r+0x1c>
 800b154:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b158:	6023      	str	r3, [r4, #0]
 800b15a:	6123      	str	r3, [r4, #16]
 800b15c:	2301      	movs	r3, #1
 800b15e:	6163      	str	r3, [r4, #20]
 800b160:	b002      	add	sp, #8
 800b162:	bd70      	pop	{r4, r5, r6, pc}
 800b164:	ab01      	add	r3, sp, #4
 800b166:	466a      	mov	r2, sp
 800b168:	f7ff ffc8 	bl	800b0fc <__swhatbuf_r>
 800b16c:	9900      	ldr	r1, [sp, #0]
 800b16e:	4605      	mov	r5, r0
 800b170:	4630      	mov	r0, r6
 800b172:	f000 f895 	bl	800b2a0 <_malloc_r>
 800b176:	b948      	cbnz	r0, 800b18c <__smakebuf_r+0x44>
 800b178:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b17c:	059a      	lsls	r2, r3, #22
 800b17e:	d4ef      	bmi.n	800b160 <__smakebuf_r+0x18>
 800b180:	f023 0303 	bic.w	r3, r3, #3
 800b184:	f043 0302 	orr.w	r3, r3, #2
 800b188:	81a3      	strh	r3, [r4, #12]
 800b18a:	e7e3      	b.n	800b154 <__smakebuf_r+0xc>
 800b18c:	4b0d      	ldr	r3, [pc, #52]	; (800b1c4 <__smakebuf_r+0x7c>)
 800b18e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b190:	89a3      	ldrh	r3, [r4, #12]
 800b192:	6020      	str	r0, [r4, #0]
 800b194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b198:	81a3      	strh	r3, [r4, #12]
 800b19a:	9b00      	ldr	r3, [sp, #0]
 800b19c:	6163      	str	r3, [r4, #20]
 800b19e:	9b01      	ldr	r3, [sp, #4]
 800b1a0:	6120      	str	r0, [r4, #16]
 800b1a2:	b15b      	cbz	r3, 800b1bc <__smakebuf_r+0x74>
 800b1a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1a8:	4630      	mov	r0, r6
 800b1aa:	f000 fc63 	bl	800ba74 <_isatty_r>
 800b1ae:	b128      	cbz	r0, 800b1bc <__smakebuf_r+0x74>
 800b1b0:	89a3      	ldrh	r3, [r4, #12]
 800b1b2:	f023 0303 	bic.w	r3, r3, #3
 800b1b6:	f043 0301 	orr.w	r3, r3, #1
 800b1ba:	81a3      	strh	r3, [r4, #12]
 800b1bc:	89a0      	ldrh	r0, [r4, #12]
 800b1be:	4305      	orrs	r5, r0
 800b1c0:	81a5      	strh	r5, [r4, #12]
 800b1c2:	e7cd      	b.n	800b160 <__smakebuf_r+0x18>
 800b1c4:	0800af55 	.word	0x0800af55

0800b1c8 <_free_r>:
 800b1c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1ca:	2900      	cmp	r1, #0
 800b1cc:	d044      	beq.n	800b258 <_free_r+0x90>
 800b1ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1d2:	9001      	str	r0, [sp, #4]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	f1a1 0404 	sub.w	r4, r1, #4
 800b1da:	bfb8      	it	lt
 800b1dc:	18e4      	addlt	r4, r4, r3
 800b1de:	f000 fc6b 	bl	800bab8 <__malloc_lock>
 800b1e2:	4a1e      	ldr	r2, [pc, #120]	; (800b25c <_free_r+0x94>)
 800b1e4:	9801      	ldr	r0, [sp, #4]
 800b1e6:	6813      	ldr	r3, [r2, #0]
 800b1e8:	b933      	cbnz	r3, 800b1f8 <_free_r+0x30>
 800b1ea:	6063      	str	r3, [r4, #4]
 800b1ec:	6014      	str	r4, [r2, #0]
 800b1ee:	b003      	add	sp, #12
 800b1f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b1f4:	f000 bc66 	b.w	800bac4 <__malloc_unlock>
 800b1f8:	42a3      	cmp	r3, r4
 800b1fa:	d908      	bls.n	800b20e <_free_r+0x46>
 800b1fc:	6825      	ldr	r5, [r4, #0]
 800b1fe:	1961      	adds	r1, r4, r5
 800b200:	428b      	cmp	r3, r1
 800b202:	bf01      	itttt	eq
 800b204:	6819      	ldreq	r1, [r3, #0]
 800b206:	685b      	ldreq	r3, [r3, #4]
 800b208:	1949      	addeq	r1, r1, r5
 800b20a:	6021      	streq	r1, [r4, #0]
 800b20c:	e7ed      	b.n	800b1ea <_free_r+0x22>
 800b20e:	461a      	mov	r2, r3
 800b210:	685b      	ldr	r3, [r3, #4]
 800b212:	b10b      	cbz	r3, 800b218 <_free_r+0x50>
 800b214:	42a3      	cmp	r3, r4
 800b216:	d9fa      	bls.n	800b20e <_free_r+0x46>
 800b218:	6811      	ldr	r1, [r2, #0]
 800b21a:	1855      	adds	r5, r2, r1
 800b21c:	42a5      	cmp	r5, r4
 800b21e:	d10b      	bne.n	800b238 <_free_r+0x70>
 800b220:	6824      	ldr	r4, [r4, #0]
 800b222:	4421      	add	r1, r4
 800b224:	1854      	adds	r4, r2, r1
 800b226:	42a3      	cmp	r3, r4
 800b228:	6011      	str	r1, [r2, #0]
 800b22a:	d1e0      	bne.n	800b1ee <_free_r+0x26>
 800b22c:	681c      	ldr	r4, [r3, #0]
 800b22e:	685b      	ldr	r3, [r3, #4]
 800b230:	6053      	str	r3, [r2, #4]
 800b232:	4421      	add	r1, r4
 800b234:	6011      	str	r1, [r2, #0]
 800b236:	e7da      	b.n	800b1ee <_free_r+0x26>
 800b238:	d902      	bls.n	800b240 <_free_r+0x78>
 800b23a:	230c      	movs	r3, #12
 800b23c:	6003      	str	r3, [r0, #0]
 800b23e:	e7d6      	b.n	800b1ee <_free_r+0x26>
 800b240:	6825      	ldr	r5, [r4, #0]
 800b242:	1961      	adds	r1, r4, r5
 800b244:	428b      	cmp	r3, r1
 800b246:	bf04      	itt	eq
 800b248:	6819      	ldreq	r1, [r3, #0]
 800b24a:	685b      	ldreq	r3, [r3, #4]
 800b24c:	6063      	str	r3, [r4, #4]
 800b24e:	bf04      	itt	eq
 800b250:	1949      	addeq	r1, r1, r5
 800b252:	6021      	streq	r1, [r4, #0]
 800b254:	6054      	str	r4, [r2, #4]
 800b256:	e7ca      	b.n	800b1ee <_free_r+0x26>
 800b258:	b003      	add	sp, #12
 800b25a:	bd30      	pop	{r4, r5, pc}
 800b25c:	200017d8 	.word	0x200017d8

0800b260 <sbrk_aligned>:
 800b260:	b570      	push	{r4, r5, r6, lr}
 800b262:	4e0e      	ldr	r6, [pc, #56]	; (800b29c <sbrk_aligned+0x3c>)
 800b264:	460c      	mov	r4, r1
 800b266:	6831      	ldr	r1, [r6, #0]
 800b268:	4605      	mov	r5, r0
 800b26a:	b911      	cbnz	r1, 800b272 <sbrk_aligned+0x12>
 800b26c:	f000 fb7a 	bl	800b964 <_sbrk_r>
 800b270:	6030      	str	r0, [r6, #0]
 800b272:	4621      	mov	r1, r4
 800b274:	4628      	mov	r0, r5
 800b276:	f000 fb75 	bl	800b964 <_sbrk_r>
 800b27a:	1c43      	adds	r3, r0, #1
 800b27c:	d00a      	beq.n	800b294 <sbrk_aligned+0x34>
 800b27e:	1cc4      	adds	r4, r0, #3
 800b280:	f024 0403 	bic.w	r4, r4, #3
 800b284:	42a0      	cmp	r0, r4
 800b286:	d007      	beq.n	800b298 <sbrk_aligned+0x38>
 800b288:	1a21      	subs	r1, r4, r0
 800b28a:	4628      	mov	r0, r5
 800b28c:	f000 fb6a 	bl	800b964 <_sbrk_r>
 800b290:	3001      	adds	r0, #1
 800b292:	d101      	bne.n	800b298 <sbrk_aligned+0x38>
 800b294:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b298:	4620      	mov	r0, r4
 800b29a:	bd70      	pop	{r4, r5, r6, pc}
 800b29c:	200017dc 	.word	0x200017dc

0800b2a0 <_malloc_r>:
 800b2a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2a4:	1ccd      	adds	r5, r1, #3
 800b2a6:	f025 0503 	bic.w	r5, r5, #3
 800b2aa:	3508      	adds	r5, #8
 800b2ac:	2d0c      	cmp	r5, #12
 800b2ae:	bf38      	it	cc
 800b2b0:	250c      	movcc	r5, #12
 800b2b2:	2d00      	cmp	r5, #0
 800b2b4:	4607      	mov	r7, r0
 800b2b6:	db01      	blt.n	800b2bc <_malloc_r+0x1c>
 800b2b8:	42a9      	cmp	r1, r5
 800b2ba:	d905      	bls.n	800b2c8 <_malloc_r+0x28>
 800b2bc:	230c      	movs	r3, #12
 800b2be:	603b      	str	r3, [r7, #0]
 800b2c0:	2600      	movs	r6, #0
 800b2c2:	4630      	mov	r0, r6
 800b2c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2c8:	4e2e      	ldr	r6, [pc, #184]	; (800b384 <_malloc_r+0xe4>)
 800b2ca:	f000 fbf5 	bl	800bab8 <__malloc_lock>
 800b2ce:	6833      	ldr	r3, [r6, #0]
 800b2d0:	461c      	mov	r4, r3
 800b2d2:	bb34      	cbnz	r4, 800b322 <_malloc_r+0x82>
 800b2d4:	4629      	mov	r1, r5
 800b2d6:	4638      	mov	r0, r7
 800b2d8:	f7ff ffc2 	bl	800b260 <sbrk_aligned>
 800b2dc:	1c43      	adds	r3, r0, #1
 800b2de:	4604      	mov	r4, r0
 800b2e0:	d14d      	bne.n	800b37e <_malloc_r+0xde>
 800b2e2:	6834      	ldr	r4, [r6, #0]
 800b2e4:	4626      	mov	r6, r4
 800b2e6:	2e00      	cmp	r6, #0
 800b2e8:	d140      	bne.n	800b36c <_malloc_r+0xcc>
 800b2ea:	6823      	ldr	r3, [r4, #0]
 800b2ec:	4631      	mov	r1, r6
 800b2ee:	4638      	mov	r0, r7
 800b2f0:	eb04 0803 	add.w	r8, r4, r3
 800b2f4:	f000 fb36 	bl	800b964 <_sbrk_r>
 800b2f8:	4580      	cmp	r8, r0
 800b2fa:	d13a      	bne.n	800b372 <_malloc_r+0xd2>
 800b2fc:	6821      	ldr	r1, [r4, #0]
 800b2fe:	3503      	adds	r5, #3
 800b300:	1a6d      	subs	r5, r5, r1
 800b302:	f025 0503 	bic.w	r5, r5, #3
 800b306:	3508      	adds	r5, #8
 800b308:	2d0c      	cmp	r5, #12
 800b30a:	bf38      	it	cc
 800b30c:	250c      	movcc	r5, #12
 800b30e:	4629      	mov	r1, r5
 800b310:	4638      	mov	r0, r7
 800b312:	f7ff ffa5 	bl	800b260 <sbrk_aligned>
 800b316:	3001      	adds	r0, #1
 800b318:	d02b      	beq.n	800b372 <_malloc_r+0xd2>
 800b31a:	6823      	ldr	r3, [r4, #0]
 800b31c:	442b      	add	r3, r5
 800b31e:	6023      	str	r3, [r4, #0]
 800b320:	e00e      	b.n	800b340 <_malloc_r+0xa0>
 800b322:	6822      	ldr	r2, [r4, #0]
 800b324:	1b52      	subs	r2, r2, r5
 800b326:	d41e      	bmi.n	800b366 <_malloc_r+0xc6>
 800b328:	2a0b      	cmp	r2, #11
 800b32a:	d916      	bls.n	800b35a <_malloc_r+0xba>
 800b32c:	1961      	adds	r1, r4, r5
 800b32e:	42a3      	cmp	r3, r4
 800b330:	6025      	str	r5, [r4, #0]
 800b332:	bf18      	it	ne
 800b334:	6059      	strne	r1, [r3, #4]
 800b336:	6863      	ldr	r3, [r4, #4]
 800b338:	bf08      	it	eq
 800b33a:	6031      	streq	r1, [r6, #0]
 800b33c:	5162      	str	r2, [r4, r5]
 800b33e:	604b      	str	r3, [r1, #4]
 800b340:	4638      	mov	r0, r7
 800b342:	f104 060b 	add.w	r6, r4, #11
 800b346:	f000 fbbd 	bl	800bac4 <__malloc_unlock>
 800b34a:	f026 0607 	bic.w	r6, r6, #7
 800b34e:	1d23      	adds	r3, r4, #4
 800b350:	1af2      	subs	r2, r6, r3
 800b352:	d0b6      	beq.n	800b2c2 <_malloc_r+0x22>
 800b354:	1b9b      	subs	r3, r3, r6
 800b356:	50a3      	str	r3, [r4, r2]
 800b358:	e7b3      	b.n	800b2c2 <_malloc_r+0x22>
 800b35a:	6862      	ldr	r2, [r4, #4]
 800b35c:	42a3      	cmp	r3, r4
 800b35e:	bf0c      	ite	eq
 800b360:	6032      	streq	r2, [r6, #0]
 800b362:	605a      	strne	r2, [r3, #4]
 800b364:	e7ec      	b.n	800b340 <_malloc_r+0xa0>
 800b366:	4623      	mov	r3, r4
 800b368:	6864      	ldr	r4, [r4, #4]
 800b36a:	e7b2      	b.n	800b2d2 <_malloc_r+0x32>
 800b36c:	4634      	mov	r4, r6
 800b36e:	6876      	ldr	r6, [r6, #4]
 800b370:	e7b9      	b.n	800b2e6 <_malloc_r+0x46>
 800b372:	230c      	movs	r3, #12
 800b374:	603b      	str	r3, [r7, #0]
 800b376:	4638      	mov	r0, r7
 800b378:	f000 fba4 	bl	800bac4 <__malloc_unlock>
 800b37c:	e7a1      	b.n	800b2c2 <_malloc_r+0x22>
 800b37e:	6025      	str	r5, [r4, #0]
 800b380:	e7de      	b.n	800b340 <_malloc_r+0xa0>
 800b382:	bf00      	nop
 800b384:	200017d8 	.word	0x200017d8

0800b388 <__sfputc_r>:
 800b388:	6893      	ldr	r3, [r2, #8]
 800b38a:	3b01      	subs	r3, #1
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	b410      	push	{r4}
 800b390:	6093      	str	r3, [r2, #8]
 800b392:	da08      	bge.n	800b3a6 <__sfputc_r+0x1e>
 800b394:	6994      	ldr	r4, [r2, #24]
 800b396:	42a3      	cmp	r3, r4
 800b398:	db01      	blt.n	800b39e <__sfputc_r+0x16>
 800b39a:	290a      	cmp	r1, #10
 800b39c:	d103      	bne.n	800b3a6 <__sfputc_r+0x1e>
 800b39e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3a2:	f7ff bc31 	b.w	800ac08 <__swbuf_r>
 800b3a6:	6813      	ldr	r3, [r2, #0]
 800b3a8:	1c58      	adds	r0, r3, #1
 800b3aa:	6010      	str	r0, [r2, #0]
 800b3ac:	7019      	strb	r1, [r3, #0]
 800b3ae:	4608      	mov	r0, r1
 800b3b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3b4:	4770      	bx	lr

0800b3b6 <__sfputs_r>:
 800b3b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3b8:	4606      	mov	r6, r0
 800b3ba:	460f      	mov	r7, r1
 800b3bc:	4614      	mov	r4, r2
 800b3be:	18d5      	adds	r5, r2, r3
 800b3c0:	42ac      	cmp	r4, r5
 800b3c2:	d101      	bne.n	800b3c8 <__sfputs_r+0x12>
 800b3c4:	2000      	movs	r0, #0
 800b3c6:	e007      	b.n	800b3d8 <__sfputs_r+0x22>
 800b3c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3cc:	463a      	mov	r2, r7
 800b3ce:	4630      	mov	r0, r6
 800b3d0:	f7ff ffda 	bl	800b388 <__sfputc_r>
 800b3d4:	1c43      	adds	r3, r0, #1
 800b3d6:	d1f3      	bne.n	800b3c0 <__sfputs_r+0xa>
 800b3d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b3dc <_vfiprintf_r>:
 800b3dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3e0:	460d      	mov	r5, r1
 800b3e2:	b09d      	sub	sp, #116	; 0x74
 800b3e4:	4614      	mov	r4, r2
 800b3e6:	4698      	mov	r8, r3
 800b3e8:	4606      	mov	r6, r0
 800b3ea:	b118      	cbz	r0, 800b3f4 <_vfiprintf_r+0x18>
 800b3ec:	6983      	ldr	r3, [r0, #24]
 800b3ee:	b90b      	cbnz	r3, 800b3f4 <_vfiprintf_r+0x18>
 800b3f0:	f7ff fde4 	bl	800afbc <__sinit>
 800b3f4:	4b89      	ldr	r3, [pc, #548]	; (800b61c <_vfiprintf_r+0x240>)
 800b3f6:	429d      	cmp	r5, r3
 800b3f8:	d11b      	bne.n	800b432 <_vfiprintf_r+0x56>
 800b3fa:	6875      	ldr	r5, [r6, #4]
 800b3fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b3fe:	07d9      	lsls	r1, r3, #31
 800b400:	d405      	bmi.n	800b40e <_vfiprintf_r+0x32>
 800b402:	89ab      	ldrh	r3, [r5, #12]
 800b404:	059a      	lsls	r2, r3, #22
 800b406:	d402      	bmi.n	800b40e <_vfiprintf_r+0x32>
 800b408:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b40a:	f7ff fe75 	bl	800b0f8 <__retarget_lock_acquire_recursive>
 800b40e:	89ab      	ldrh	r3, [r5, #12]
 800b410:	071b      	lsls	r3, r3, #28
 800b412:	d501      	bpl.n	800b418 <_vfiprintf_r+0x3c>
 800b414:	692b      	ldr	r3, [r5, #16]
 800b416:	b9eb      	cbnz	r3, 800b454 <_vfiprintf_r+0x78>
 800b418:	4629      	mov	r1, r5
 800b41a:	4630      	mov	r0, r6
 800b41c:	f7ff fc46 	bl	800acac <__swsetup_r>
 800b420:	b1c0      	cbz	r0, 800b454 <_vfiprintf_r+0x78>
 800b422:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b424:	07dc      	lsls	r4, r3, #31
 800b426:	d50e      	bpl.n	800b446 <_vfiprintf_r+0x6a>
 800b428:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b42c:	b01d      	add	sp, #116	; 0x74
 800b42e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b432:	4b7b      	ldr	r3, [pc, #492]	; (800b620 <_vfiprintf_r+0x244>)
 800b434:	429d      	cmp	r5, r3
 800b436:	d101      	bne.n	800b43c <_vfiprintf_r+0x60>
 800b438:	68b5      	ldr	r5, [r6, #8]
 800b43a:	e7df      	b.n	800b3fc <_vfiprintf_r+0x20>
 800b43c:	4b79      	ldr	r3, [pc, #484]	; (800b624 <_vfiprintf_r+0x248>)
 800b43e:	429d      	cmp	r5, r3
 800b440:	bf08      	it	eq
 800b442:	68f5      	ldreq	r5, [r6, #12]
 800b444:	e7da      	b.n	800b3fc <_vfiprintf_r+0x20>
 800b446:	89ab      	ldrh	r3, [r5, #12]
 800b448:	0598      	lsls	r0, r3, #22
 800b44a:	d4ed      	bmi.n	800b428 <_vfiprintf_r+0x4c>
 800b44c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b44e:	f7ff fe54 	bl	800b0fa <__retarget_lock_release_recursive>
 800b452:	e7e9      	b.n	800b428 <_vfiprintf_r+0x4c>
 800b454:	2300      	movs	r3, #0
 800b456:	9309      	str	r3, [sp, #36]	; 0x24
 800b458:	2320      	movs	r3, #32
 800b45a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b45e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b462:	2330      	movs	r3, #48	; 0x30
 800b464:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b628 <_vfiprintf_r+0x24c>
 800b468:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b46c:	f04f 0901 	mov.w	r9, #1
 800b470:	4623      	mov	r3, r4
 800b472:	469a      	mov	sl, r3
 800b474:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b478:	b10a      	cbz	r2, 800b47e <_vfiprintf_r+0xa2>
 800b47a:	2a25      	cmp	r2, #37	; 0x25
 800b47c:	d1f9      	bne.n	800b472 <_vfiprintf_r+0x96>
 800b47e:	ebba 0b04 	subs.w	fp, sl, r4
 800b482:	d00b      	beq.n	800b49c <_vfiprintf_r+0xc0>
 800b484:	465b      	mov	r3, fp
 800b486:	4622      	mov	r2, r4
 800b488:	4629      	mov	r1, r5
 800b48a:	4630      	mov	r0, r6
 800b48c:	f7ff ff93 	bl	800b3b6 <__sfputs_r>
 800b490:	3001      	adds	r0, #1
 800b492:	f000 80aa 	beq.w	800b5ea <_vfiprintf_r+0x20e>
 800b496:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b498:	445a      	add	r2, fp
 800b49a:	9209      	str	r2, [sp, #36]	; 0x24
 800b49c:	f89a 3000 	ldrb.w	r3, [sl]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	f000 80a2 	beq.w	800b5ea <_vfiprintf_r+0x20e>
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b4ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4b0:	f10a 0a01 	add.w	sl, sl, #1
 800b4b4:	9304      	str	r3, [sp, #16]
 800b4b6:	9307      	str	r3, [sp, #28]
 800b4b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4bc:	931a      	str	r3, [sp, #104]	; 0x68
 800b4be:	4654      	mov	r4, sl
 800b4c0:	2205      	movs	r2, #5
 800b4c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4c6:	4858      	ldr	r0, [pc, #352]	; (800b628 <_vfiprintf_r+0x24c>)
 800b4c8:	f7f4 fe62 	bl	8000190 <memchr>
 800b4cc:	9a04      	ldr	r2, [sp, #16]
 800b4ce:	b9d8      	cbnz	r0, 800b508 <_vfiprintf_r+0x12c>
 800b4d0:	06d1      	lsls	r1, r2, #27
 800b4d2:	bf44      	itt	mi
 800b4d4:	2320      	movmi	r3, #32
 800b4d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4da:	0713      	lsls	r3, r2, #28
 800b4dc:	bf44      	itt	mi
 800b4de:	232b      	movmi	r3, #43	; 0x2b
 800b4e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4e4:	f89a 3000 	ldrb.w	r3, [sl]
 800b4e8:	2b2a      	cmp	r3, #42	; 0x2a
 800b4ea:	d015      	beq.n	800b518 <_vfiprintf_r+0x13c>
 800b4ec:	9a07      	ldr	r2, [sp, #28]
 800b4ee:	4654      	mov	r4, sl
 800b4f0:	2000      	movs	r0, #0
 800b4f2:	f04f 0c0a 	mov.w	ip, #10
 800b4f6:	4621      	mov	r1, r4
 800b4f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4fc:	3b30      	subs	r3, #48	; 0x30
 800b4fe:	2b09      	cmp	r3, #9
 800b500:	d94e      	bls.n	800b5a0 <_vfiprintf_r+0x1c4>
 800b502:	b1b0      	cbz	r0, 800b532 <_vfiprintf_r+0x156>
 800b504:	9207      	str	r2, [sp, #28]
 800b506:	e014      	b.n	800b532 <_vfiprintf_r+0x156>
 800b508:	eba0 0308 	sub.w	r3, r0, r8
 800b50c:	fa09 f303 	lsl.w	r3, r9, r3
 800b510:	4313      	orrs	r3, r2
 800b512:	9304      	str	r3, [sp, #16]
 800b514:	46a2      	mov	sl, r4
 800b516:	e7d2      	b.n	800b4be <_vfiprintf_r+0xe2>
 800b518:	9b03      	ldr	r3, [sp, #12]
 800b51a:	1d19      	adds	r1, r3, #4
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	9103      	str	r1, [sp, #12]
 800b520:	2b00      	cmp	r3, #0
 800b522:	bfbb      	ittet	lt
 800b524:	425b      	neglt	r3, r3
 800b526:	f042 0202 	orrlt.w	r2, r2, #2
 800b52a:	9307      	strge	r3, [sp, #28]
 800b52c:	9307      	strlt	r3, [sp, #28]
 800b52e:	bfb8      	it	lt
 800b530:	9204      	strlt	r2, [sp, #16]
 800b532:	7823      	ldrb	r3, [r4, #0]
 800b534:	2b2e      	cmp	r3, #46	; 0x2e
 800b536:	d10c      	bne.n	800b552 <_vfiprintf_r+0x176>
 800b538:	7863      	ldrb	r3, [r4, #1]
 800b53a:	2b2a      	cmp	r3, #42	; 0x2a
 800b53c:	d135      	bne.n	800b5aa <_vfiprintf_r+0x1ce>
 800b53e:	9b03      	ldr	r3, [sp, #12]
 800b540:	1d1a      	adds	r2, r3, #4
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	9203      	str	r2, [sp, #12]
 800b546:	2b00      	cmp	r3, #0
 800b548:	bfb8      	it	lt
 800b54a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b54e:	3402      	adds	r4, #2
 800b550:	9305      	str	r3, [sp, #20]
 800b552:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b638 <_vfiprintf_r+0x25c>
 800b556:	7821      	ldrb	r1, [r4, #0]
 800b558:	2203      	movs	r2, #3
 800b55a:	4650      	mov	r0, sl
 800b55c:	f7f4 fe18 	bl	8000190 <memchr>
 800b560:	b140      	cbz	r0, 800b574 <_vfiprintf_r+0x198>
 800b562:	2340      	movs	r3, #64	; 0x40
 800b564:	eba0 000a 	sub.w	r0, r0, sl
 800b568:	fa03 f000 	lsl.w	r0, r3, r0
 800b56c:	9b04      	ldr	r3, [sp, #16]
 800b56e:	4303      	orrs	r3, r0
 800b570:	3401      	adds	r4, #1
 800b572:	9304      	str	r3, [sp, #16]
 800b574:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b578:	482c      	ldr	r0, [pc, #176]	; (800b62c <_vfiprintf_r+0x250>)
 800b57a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b57e:	2206      	movs	r2, #6
 800b580:	f7f4 fe06 	bl	8000190 <memchr>
 800b584:	2800      	cmp	r0, #0
 800b586:	d03f      	beq.n	800b608 <_vfiprintf_r+0x22c>
 800b588:	4b29      	ldr	r3, [pc, #164]	; (800b630 <_vfiprintf_r+0x254>)
 800b58a:	bb1b      	cbnz	r3, 800b5d4 <_vfiprintf_r+0x1f8>
 800b58c:	9b03      	ldr	r3, [sp, #12]
 800b58e:	3307      	adds	r3, #7
 800b590:	f023 0307 	bic.w	r3, r3, #7
 800b594:	3308      	adds	r3, #8
 800b596:	9303      	str	r3, [sp, #12]
 800b598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b59a:	443b      	add	r3, r7
 800b59c:	9309      	str	r3, [sp, #36]	; 0x24
 800b59e:	e767      	b.n	800b470 <_vfiprintf_r+0x94>
 800b5a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5a4:	460c      	mov	r4, r1
 800b5a6:	2001      	movs	r0, #1
 800b5a8:	e7a5      	b.n	800b4f6 <_vfiprintf_r+0x11a>
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	3401      	adds	r4, #1
 800b5ae:	9305      	str	r3, [sp, #20]
 800b5b0:	4619      	mov	r1, r3
 800b5b2:	f04f 0c0a 	mov.w	ip, #10
 800b5b6:	4620      	mov	r0, r4
 800b5b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5bc:	3a30      	subs	r2, #48	; 0x30
 800b5be:	2a09      	cmp	r2, #9
 800b5c0:	d903      	bls.n	800b5ca <_vfiprintf_r+0x1ee>
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d0c5      	beq.n	800b552 <_vfiprintf_r+0x176>
 800b5c6:	9105      	str	r1, [sp, #20]
 800b5c8:	e7c3      	b.n	800b552 <_vfiprintf_r+0x176>
 800b5ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5ce:	4604      	mov	r4, r0
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	e7f0      	b.n	800b5b6 <_vfiprintf_r+0x1da>
 800b5d4:	ab03      	add	r3, sp, #12
 800b5d6:	9300      	str	r3, [sp, #0]
 800b5d8:	462a      	mov	r2, r5
 800b5da:	4b16      	ldr	r3, [pc, #88]	; (800b634 <_vfiprintf_r+0x258>)
 800b5dc:	a904      	add	r1, sp, #16
 800b5de:	4630      	mov	r0, r6
 800b5e0:	f3af 8000 	nop.w
 800b5e4:	4607      	mov	r7, r0
 800b5e6:	1c78      	adds	r0, r7, #1
 800b5e8:	d1d6      	bne.n	800b598 <_vfiprintf_r+0x1bc>
 800b5ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b5ec:	07d9      	lsls	r1, r3, #31
 800b5ee:	d405      	bmi.n	800b5fc <_vfiprintf_r+0x220>
 800b5f0:	89ab      	ldrh	r3, [r5, #12]
 800b5f2:	059a      	lsls	r2, r3, #22
 800b5f4:	d402      	bmi.n	800b5fc <_vfiprintf_r+0x220>
 800b5f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b5f8:	f7ff fd7f 	bl	800b0fa <__retarget_lock_release_recursive>
 800b5fc:	89ab      	ldrh	r3, [r5, #12]
 800b5fe:	065b      	lsls	r3, r3, #25
 800b600:	f53f af12 	bmi.w	800b428 <_vfiprintf_r+0x4c>
 800b604:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b606:	e711      	b.n	800b42c <_vfiprintf_r+0x50>
 800b608:	ab03      	add	r3, sp, #12
 800b60a:	9300      	str	r3, [sp, #0]
 800b60c:	462a      	mov	r2, r5
 800b60e:	4b09      	ldr	r3, [pc, #36]	; (800b634 <_vfiprintf_r+0x258>)
 800b610:	a904      	add	r1, sp, #16
 800b612:	4630      	mov	r0, r6
 800b614:	f000 f880 	bl	800b718 <_printf_i>
 800b618:	e7e4      	b.n	800b5e4 <_vfiprintf_r+0x208>
 800b61a:	bf00      	nop
 800b61c:	0800c2e4 	.word	0x0800c2e4
 800b620:	0800c304 	.word	0x0800c304
 800b624:	0800c2c4 	.word	0x0800c2c4
 800b628:	0800c324 	.word	0x0800c324
 800b62c:	0800c32e 	.word	0x0800c32e
 800b630:	00000000 	.word	0x00000000
 800b634:	0800b3b7 	.word	0x0800b3b7
 800b638:	0800c32a 	.word	0x0800c32a

0800b63c <_printf_common>:
 800b63c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b640:	4616      	mov	r6, r2
 800b642:	4699      	mov	r9, r3
 800b644:	688a      	ldr	r2, [r1, #8]
 800b646:	690b      	ldr	r3, [r1, #16]
 800b648:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b64c:	4293      	cmp	r3, r2
 800b64e:	bfb8      	it	lt
 800b650:	4613      	movlt	r3, r2
 800b652:	6033      	str	r3, [r6, #0]
 800b654:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b658:	4607      	mov	r7, r0
 800b65a:	460c      	mov	r4, r1
 800b65c:	b10a      	cbz	r2, 800b662 <_printf_common+0x26>
 800b65e:	3301      	adds	r3, #1
 800b660:	6033      	str	r3, [r6, #0]
 800b662:	6823      	ldr	r3, [r4, #0]
 800b664:	0699      	lsls	r1, r3, #26
 800b666:	bf42      	ittt	mi
 800b668:	6833      	ldrmi	r3, [r6, #0]
 800b66a:	3302      	addmi	r3, #2
 800b66c:	6033      	strmi	r3, [r6, #0]
 800b66e:	6825      	ldr	r5, [r4, #0]
 800b670:	f015 0506 	ands.w	r5, r5, #6
 800b674:	d106      	bne.n	800b684 <_printf_common+0x48>
 800b676:	f104 0a19 	add.w	sl, r4, #25
 800b67a:	68e3      	ldr	r3, [r4, #12]
 800b67c:	6832      	ldr	r2, [r6, #0]
 800b67e:	1a9b      	subs	r3, r3, r2
 800b680:	42ab      	cmp	r3, r5
 800b682:	dc26      	bgt.n	800b6d2 <_printf_common+0x96>
 800b684:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b688:	1e13      	subs	r3, r2, #0
 800b68a:	6822      	ldr	r2, [r4, #0]
 800b68c:	bf18      	it	ne
 800b68e:	2301      	movne	r3, #1
 800b690:	0692      	lsls	r2, r2, #26
 800b692:	d42b      	bmi.n	800b6ec <_printf_common+0xb0>
 800b694:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b698:	4649      	mov	r1, r9
 800b69a:	4638      	mov	r0, r7
 800b69c:	47c0      	blx	r8
 800b69e:	3001      	adds	r0, #1
 800b6a0:	d01e      	beq.n	800b6e0 <_printf_common+0xa4>
 800b6a2:	6823      	ldr	r3, [r4, #0]
 800b6a4:	68e5      	ldr	r5, [r4, #12]
 800b6a6:	6832      	ldr	r2, [r6, #0]
 800b6a8:	f003 0306 	and.w	r3, r3, #6
 800b6ac:	2b04      	cmp	r3, #4
 800b6ae:	bf08      	it	eq
 800b6b0:	1aad      	subeq	r5, r5, r2
 800b6b2:	68a3      	ldr	r3, [r4, #8]
 800b6b4:	6922      	ldr	r2, [r4, #16]
 800b6b6:	bf0c      	ite	eq
 800b6b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b6bc:	2500      	movne	r5, #0
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	bfc4      	itt	gt
 800b6c2:	1a9b      	subgt	r3, r3, r2
 800b6c4:	18ed      	addgt	r5, r5, r3
 800b6c6:	2600      	movs	r6, #0
 800b6c8:	341a      	adds	r4, #26
 800b6ca:	42b5      	cmp	r5, r6
 800b6cc:	d11a      	bne.n	800b704 <_printf_common+0xc8>
 800b6ce:	2000      	movs	r0, #0
 800b6d0:	e008      	b.n	800b6e4 <_printf_common+0xa8>
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	4652      	mov	r2, sl
 800b6d6:	4649      	mov	r1, r9
 800b6d8:	4638      	mov	r0, r7
 800b6da:	47c0      	blx	r8
 800b6dc:	3001      	adds	r0, #1
 800b6de:	d103      	bne.n	800b6e8 <_printf_common+0xac>
 800b6e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b6e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6e8:	3501      	adds	r5, #1
 800b6ea:	e7c6      	b.n	800b67a <_printf_common+0x3e>
 800b6ec:	18e1      	adds	r1, r4, r3
 800b6ee:	1c5a      	adds	r2, r3, #1
 800b6f0:	2030      	movs	r0, #48	; 0x30
 800b6f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b6f6:	4422      	add	r2, r4
 800b6f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b6fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b700:	3302      	adds	r3, #2
 800b702:	e7c7      	b.n	800b694 <_printf_common+0x58>
 800b704:	2301      	movs	r3, #1
 800b706:	4622      	mov	r2, r4
 800b708:	4649      	mov	r1, r9
 800b70a:	4638      	mov	r0, r7
 800b70c:	47c0      	blx	r8
 800b70e:	3001      	adds	r0, #1
 800b710:	d0e6      	beq.n	800b6e0 <_printf_common+0xa4>
 800b712:	3601      	adds	r6, #1
 800b714:	e7d9      	b.n	800b6ca <_printf_common+0x8e>
	...

0800b718 <_printf_i>:
 800b718:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b71c:	7e0f      	ldrb	r7, [r1, #24]
 800b71e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b720:	2f78      	cmp	r7, #120	; 0x78
 800b722:	4691      	mov	r9, r2
 800b724:	4680      	mov	r8, r0
 800b726:	460c      	mov	r4, r1
 800b728:	469a      	mov	sl, r3
 800b72a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b72e:	d807      	bhi.n	800b740 <_printf_i+0x28>
 800b730:	2f62      	cmp	r7, #98	; 0x62
 800b732:	d80a      	bhi.n	800b74a <_printf_i+0x32>
 800b734:	2f00      	cmp	r7, #0
 800b736:	f000 80d8 	beq.w	800b8ea <_printf_i+0x1d2>
 800b73a:	2f58      	cmp	r7, #88	; 0x58
 800b73c:	f000 80a3 	beq.w	800b886 <_printf_i+0x16e>
 800b740:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b744:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b748:	e03a      	b.n	800b7c0 <_printf_i+0xa8>
 800b74a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b74e:	2b15      	cmp	r3, #21
 800b750:	d8f6      	bhi.n	800b740 <_printf_i+0x28>
 800b752:	a101      	add	r1, pc, #4	; (adr r1, 800b758 <_printf_i+0x40>)
 800b754:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b758:	0800b7b1 	.word	0x0800b7b1
 800b75c:	0800b7c5 	.word	0x0800b7c5
 800b760:	0800b741 	.word	0x0800b741
 800b764:	0800b741 	.word	0x0800b741
 800b768:	0800b741 	.word	0x0800b741
 800b76c:	0800b741 	.word	0x0800b741
 800b770:	0800b7c5 	.word	0x0800b7c5
 800b774:	0800b741 	.word	0x0800b741
 800b778:	0800b741 	.word	0x0800b741
 800b77c:	0800b741 	.word	0x0800b741
 800b780:	0800b741 	.word	0x0800b741
 800b784:	0800b8d1 	.word	0x0800b8d1
 800b788:	0800b7f5 	.word	0x0800b7f5
 800b78c:	0800b8b3 	.word	0x0800b8b3
 800b790:	0800b741 	.word	0x0800b741
 800b794:	0800b741 	.word	0x0800b741
 800b798:	0800b8f3 	.word	0x0800b8f3
 800b79c:	0800b741 	.word	0x0800b741
 800b7a0:	0800b7f5 	.word	0x0800b7f5
 800b7a4:	0800b741 	.word	0x0800b741
 800b7a8:	0800b741 	.word	0x0800b741
 800b7ac:	0800b8bb 	.word	0x0800b8bb
 800b7b0:	682b      	ldr	r3, [r5, #0]
 800b7b2:	1d1a      	adds	r2, r3, #4
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	602a      	str	r2, [r5, #0]
 800b7b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b7bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	e0a3      	b.n	800b90c <_printf_i+0x1f4>
 800b7c4:	6820      	ldr	r0, [r4, #0]
 800b7c6:	6829      	ldr	r1, [r5, #0]
 800b7c8:	0606      	lsls	r6, r0, #24
 800b7ca:	f101 0304 	add.w	r3, r1, #4
 800b7ce:	d50a      	bpl.n	800b7e6 <_printf_i+0xce>
 800b7d0:	680e      	ldr	r6, [r1, #0]
 800b7d2:	602b      	str	r3, [r5, #0]
 800b7d4:	2e00      	cmp	r6, #0
 800b7d6:	da03      	bge.n	800b7e0 <_printf_i+0xc8>
 800b7d8:	232d      	movs	r3, #45	; 0x2d
 800b7da:	4276      	negs	r6, r6
 800b7dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b7e0:	485e      	ldr	r0, [pc, #376]	; (800b95c <_printf_i+0x244>)
 800b7e2:	230a      	movs	r3, #10
 800b7e4:	e019      	b.n	800b81a <_printf_i+0x102>
 800b7e6:	680e      	ldr	r6, [r1, #0]
 800b7e8:	602b      	str	r3, [r5, #0]
 800b7ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b7ee:	bf18      	it	ne
 800b7f0:	b236      	sxthne	r6, r6
 800b7f2:	e7ef      	b.n	800b7d4 <_printf_i+0xbc>
 800b7f4:	682b      	ldr	r3, [r5, #0]
 800b7f6:	6820      	ldr	r0, [r4, #0]
 800b7f8:	1d19      	adds	r1, r3, #4
 800b7fa:	6029      	str	r1, [r5, #0]
 800b7fc:	0601      	lsls	r1, r0, #24
 800b7fe:	d501      	bpl.n	800b804 <_printf_i+0xec>
 800b800:	681e      	ldr	r6, [r3, #0]
 800b802:	e002      	b.n	800b80a <_printf_i+0xf2>
 800b804:	0646      	lsls	r6, r0, #25
 800b806:	d5fb      	bpl.n	800b800 <_printf_i+0xe8>
 800b808:	881e      	ldrh	r6, [r3, #0]
 800b80a:	4854      	ldr	r0, [pc, #336]	; (800b95c <_printf_i+0x244>)
 800b80c:	2f6f      	cmp	r7, #111	; 0x6f
 800b80e:	bf0c      	ite	eq
 800b810:	2308      	moveq	r3, #8
 800b812:	230a      	movne	r3, #10
 800b814:	2100      	movs	r1, #0
 800b816:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b81a:	6865      	ldr	r5, [r4, #4]
 800b81c:	60a5      	str	r5, [r4, #8]
 800b81e:	2d00      	cmp	r5, #0
 800b820:	bfa2      	ittt	ge
 800b822:	6821      	ldrge	r1, [r4, #0]
 800b824:	f021 0104 	bicge.w	r1, r1, #4
 800b828:	6021      	strge	r1, [r4, #0]
 800b82a:	b90e      	cbnz	r6, 800b830 <_printf_i+0x118>
 800b82c:	2d00      	cmp	r5, #0
 800b82e:	d04d      	beq.n	800b8cc <_printf_i+0x1b4>
 800b830:	4615      	mov	r5, r2
 800b832:	fbb6 f1f3 	udiv	r1, r6, r3
 800b836:	fb03 6711 	mls	r7, r3, r1, r6
 800b83a:	5dc7      	ldrb	r7, [r0, r7]
 800b83c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b840:	4637      	mov	r7, r6
 800b842:	42bb      	cmp	r3, r7
 800b844:	460e      	mov	r6, r1
 800b846:	d9f4      	bls.n	800b832 <_printf_i+0x11a>
 800b848:	2b08      	cmp	r3, #8
 800b84a:	d10b      	bne.n	800b864 <_printf_i+0x14c>
 800b84c:	6823      	ldr	r3, [r4, #0]
 800b84e:	07de      	lsls	r6, r3, #31
 800b850:	d508      	bpl.n	800b864 <_printf_i+0x14c>
 800b852:	6923      	ldr	r3, [r4, #16]
 800b854:	6861      	ldr	r1, [r4, #4]
 800b856:	4299      	cmp	r1, r3
 800b858:	bfde      	ittt	le
 800b85a:	2330      	movle	r3, #48	; 0x30
 800b85c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b860:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b864:	1b52      	subs	r2, r2, r5
 800b866:	6122      	str	r2, [r4, #16]
 800b868:	f8cd a000 	str.w	sl, [sp]
 800b86c:	464b      	mov	r3, r9
 800b86e:	aa03      	add	r2, sp, #12
 800b870:	4621      	mov	r1, r4
 800b872:	4640      	mov	r0, r8
 800b874:	f7ff fee2 	bl	800b63c <_printf_common>
 800b878:	3001      	adds	r0, #1
 800b87a:	d14c      	bne.n	800b916 <_printf_i+0x1fe>
 800b87c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b880:	b004      	add	sp, #16
 800b882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b886:	4835      	ldr	r0, [pc, #212]	; (800b95c <_printf_i+0x244>)
 800b888:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b88c:	6829      	ldr	r1, [r5, #0]
 800b88e:	6823      	ldr	r3, [r4, #0]
 800b890:	f851 6b04 	ldr.w	r6, [r1], #4
 800b894:	6029      	str	r1, [r5, #0]
 800b896:	061d      	lsls	r5, r3, #24
 800b898:	d514      	bpl.n	800b8c4 <_printf_i+0x1ac>
 800b89a:	07df      	lsls	r7, r3, #31
 800b89c:	bf44      	itt	mi
 800b89e:	f043 0320 	orrmi.w	r3, r3, #32
 800b8a2:	6023      	strmi	r3, [r4, #0]
 800b8a4:	b91e      	cbnz	r6, 800b8ae <_printf_i+0x196>
 800b8a6:	6823      	ldr	r3, [r4, #0]
 800b8a8:	f023 0320 	bic.w	r3, r3, #32
 800b8ac:	6023      	str	r3, [r4, #0]
 800b8ae:	2310      	movs	r3, #16
 800b8b0:	e7b0      	b.n	800b814 <_printf_i+0xfc>
 800b8b2:	6823      	ldr	r3, [r4, #0]
 800b8b4:	f043 0320 	orr.w	r3, r3, #32
 800b8b8:	6023      	str	r3, [r4, #0]
 800b8ba:	2378      	movs	r3, #120	; 0x78
 800b8bc:	4828      	ldr	r0, [pc, #160]	; (800b960 <_printf_i+0x248>)
 800b8be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b8c2:	e7e3      	b.n	800b88c <_printf_i+0x174>
 800b8c4:	0659      	lsls	r1, r3, #25
 800b8c6:	bf48      	it	mi
 800b8c8:	b2b6      	uxthmi	r6, r6
 800b8ca:	e7e6      	b.n	800b89a <_printf_i+0x182>
 800b8cc:	4615      	mov	r5, r2
 800b8ce:	e7bb      	b.n	800b848 <_printf_i+0x130>
 800b8d0:	682b      	ldr	r3, [r5, #0]
 800b8d2:	6826      	ldr	r6, [r4, #0]
 800b8d4:	6961      	ldr	r1, [r4, #20]
 800b8d6:	1d18      	adds	r0, r3, #4
 800b8d8:	6028      	str	r0, [r5, #0]
 800b8da:	0635      	lsls	r5, r6, #24
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	d501      	bpl.n	800b8e4 <_printf_i+0x1cc>
 800b8e0:	6019      	str	r1, [r3, #0]
 800b8e2:	e002      	b.n	800b8ea <_printf_i+0x1d2>
 800b8e4:	0670      	lsls	r0, r6, #25
 800b8e6:	d5fb      	bpl.n	800b8e0 <_printf_i+0x1c8>
 800b8e8:	8019      	strh	r1, [r3, #0]
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	6123      	str	r3, [r4, #16]
 800b8ee:	4615      	mov	r5, r2
 800b8f0:	e7ba      	b.n	800b868 <_printf_i+0x150>
 800b8f2:	682b      	ldr	r3, [r5, #0]
 800b8f4:	1d1a      	adds	r2, r3, #4
 800b8f6:	602a      	str	r2, [r5, #0]
 800b8f8:	681d      	ldr	r5, [r3, #0]
 800b8fa:	6862      	ldr	r2, [r4, #4]
 800b8fc:	2100      	movs	r1, #0
 800b8fe:	4628      	mov	r0, r5
 800b900:	f7f4 fc46 	bl	8000190 <memchr>
 800b904:	b108      	cbz	r0, 800b90a <_printf_i+0x1f2>
 800b906:	1b40      	subs	r0, r0, r5
 800b908:	6060      	str	r0, [r4, #4]
 800b90a:	6863      	ldr	r3, [r4, #4]
 800b90c:	6123      	str	r3, [r4, #16]
 800b90e:	2300      	movs	r3, #0
 800b910:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b914:	e7a8      	b.n	800b868 <_printf_i+0x150>
 800b916:	6923      	ldr	r3, [r4, #16]
 800b918:	462a      	mov	r2, r5
 800b91a:	4649      	mov	r1, r9
 800b91c:	4640      	mov	r0, r8
 800b91e:	47d0      	blx	sl
 800b920:	3001      	adds	r0, #1
 800b922:	d0ab      	beq.n	800b87c <_printf_i+0x164>
 800b924:	6823      	ldr	r3, [r4, #0]
 800b926:	079b      	lsls	r3, r3, #30
 800b928:	d413      	bmi.n	800b952 <_printf_i+0x23a>
 800b92a:	68e0      	ldr	r0, [r4, #12]
 800b92c:	9b03      	ldr	r3, [sp, #12]
 800b92e:	4298      	cmp	r0, r3
 800b930:	bfb8      	it	lt
 800b932:	4618      	movlt	r0, r3
 800b934:	e7a4      	b.n	800b880 <_printf_i+0x168>
 800b936:	2301      	movs	r3, #1
 800b938:	4632      	mov	r2, r6
 800b93a:	4649      	mov	r1, r9
 800b93c:	4640      	mov	r0, r8
 800b93e:	47d0      	blx	sl
 800b940:	3001      	adds	r0, #1
 800b942:	d09b      	beq.n	800b87c <_printf_i+0x164>
 800b944:	3501      	adds	r5, #1
 800b946:	68e3      	ldr	r3, [r4, #12]
 800b948:	9903      	ldr	r1, [sp, #12]
 800b94a:	1a5b      	subs	r3, r3, r1
 800b94c:	42ab      	cmp	r3, r5
 800b94e:	dcf2      	bgt.n	800b936 <_printf_i+0x21e>
 800b950:	e7eb      	b.n	800b92a <_printf_i+0x212>
 800b952:	2500      	movs	r5, #0
 800b954:	f104 0619 	add.w	r6, r4, #25
 800b958:	e7f5      	b.n	800b946 <_printf_i+0x22e>
 800b95a:	bf00      	nop
 800b95c:	0800c335 	.word	0x0800c335
 800b960:	0800c346 	.word	0x0800c346

0800b964 <_sbrk_r>:
 800b964:	b538      	push	{r3, r4, r5, lr}
 800b966:	4d06      	ldr	r5, [pc, #24]	; (800b980 <_sbrk_r+0x1c>)
 800b968:	2300      	movs	r3, #0
 800b96a:	4604      	mov	r4, r0
 800b96c:	4608      	mov	r0, r1
 800b96e:	602b      	str	r3, [r5, #0]
 800b970:	f7f6 fdfc 	bl	800256c <_sbrk>
 800b974:	1c43      	adds	r3, r0, #1
 800b976:	d102      	bne.n	800b97e <_sbrk_r+0x1a>
 800b978:	682b      	ldr	r3, [r5, #0]
 800b97a:	b103      	cbz	r3, 800b97e <_sbrk_r+0x1a>
 800b97c:	6023      	str	r3, [r4, #0]
 800b97e:	bd38      	pop	{r3, r4, r5, pc}
 800b980:	200017e0 	.word	0x200017e0

0800b984 <__sread>:
 800b984:	b510      	push	{r4, lr}
 800b986:	460c      	mov	r4, r1
 800b988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b98c:	f000 f8a0 	bl	800bad0 <_read_r>
 800b990:	2800      	cmp	r0, #0
 800b992:	bfab      	itete	ge
 800b994:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b996:	89a3      	ldrhlt	r3, [r4, #12]
 800b998:	181b      	addge	r3, r3, r0
 800b99a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b99e:	bfac      	ite	ge
 800b9a0:	6563      	strge	r3, [r4, #84]	; 0x54
 800b9a2:	81a3      	strhlt	r3, [r4, #12]
 800b9a4:	bd10      	pop	{r4, pc}

0800b9a6 <__swrite>:
 800b9a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9aa:	461f      	mov	r7, r3
 800b9ac:	898b      	ldrh	r3, [r1, #12]
 800b9ae:	05db      	lsls	r3, r3, #23
 800b9b0:	4605      	mov	r5, r0
 800b9b2:	460c      	mov	r4, r1
 800b9b4:	4616      	mov	r6, r2
 800b9b6:	d505      	bpl.n	800b9c4 <__swrite+0x1e>
 800b9b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9bc:	2302      	movs	r3, #2
 800b9be:	2200      	movs	r2, #0
 800b9c0:	f000 f868 	bl	800ba94 <_lseek_r>
 800b9c4:	89a3      	ldrh	r3, [r4, #12]
 800b9c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b9ce:	81a3      	strh	r3, [r4, #12]
 800b9d0:	4632      	mov	r2, r6
 800b9d2:	463b      	mov	r3, r7
 800b9d4:	4628      	mov	r0, r5
 800b9d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9da:	f000 b817 	b.w	800ba0c <_write_r>

0800b9de <__sseek>:
 800b9de:	b510      	push	{r4, lr}
 800b9e0:	460c      	mov	r4, r1
 800b9e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9e6:	f000 f855 	bl	800ba94 <_lseek_r>
 800b9ea:	1c43      	adds	r3, r0, #1
 800b9ec:	89a3      	ldrh	r3, [r4, #12]
 800b9ee:	bf15      	itete	ne
 800b9f0:	6560      	strne	r0, [r4, #84]	; 0x54
 800b9f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b9f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b9fa:	81a3      	strheq	r3, [r4, #12]
 800b9fc:	bf18      	it	ne
 800b9fe:	81a3      	strhne	r3, [r4, #12]
 800ba00:	bd10      	pop	{r4, pc}

0800ba02 <__sclose>:
 800ba02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba06:	f000 b813 	b.w	800ba30 <_close_r>
	...

0800ba0c <_write_r>:
 800ba0c:	b538      	push	{r3, r4, r5, lr}
 800ba0e:	4d07      	ldr	r5, [pc, #28]	; (800ba2c <_write_r+0x20>)
 800ba10:	4604      	mov	r4, r0
 800ba12:	4608      	mov	r0, r1
 800ba14:	4611      	mov	r1, r2
 800ba16:	2200      	movs	r2, #0
 800ba18:	602a      	str	r2, [r5, #0]
 800ba1a:	461a      	mov	r2, r3
 800ba1c:	f7fd f926 	bl	8008c6c <_write>
 800ba20:	1c43      	adds	r3, r0, #1
 800ba22:	d102      	bne.n	800ba2a <_write_r+0x1e>
 800ba24:	682b      	ldr	r3, [r5, #0]
 800ba26:	b103      	cbz	r3, 800ba2a <_write_r+0x1e>
 800ba28:	6023      	str	r3, [r4, #0]
 800ba2a:	bd38      	pop	{r3, r4, r5, pc}
 800ba2c:	200017e0 	.word	0x200017e0

0800ba30 <_close_r>:
 800ba30:	b538      	push	{r3, r4, r5, lr}
 800ba32:	4d06      	ldr	r5, [pc, #24]	; (800ba4c <_close_r+0x1c>)
 800ba34:	2300      	movs	r3, #0
 800ba36:	4604      	mov	r4, r0
 800ba38:	4608      	mov	r0, r1
 800ba3a:	602b      	str	r3, [r5, #0]
 800ba3c:	f7f6 fd61 	bl	8002502 <_close>
 800ba40:	1c43      	adds	r3, r0, #1
 800ba42:	d102      	bne.n	800ba4a <_close_r+0x1a>
 800ba44:	682b      	ldr	r3, [r5, #0]
 800ba46:	b103      	cbz	r3, 800ba4a <_close_r+0x1a>
 800ba48:	6023      	str	r3, [r4, #0]
 800ba4a:	bd38      	pop	{r3, r4, r5, pc}
 800ba4c:	200017e0 	.word	0x200017e0

0800ba50 <_fstat_r>:
 800ba50:	b538      	push	{r3, r4, r5, lr}
 800ba52:	4d07      	ldr	r5, [pc, #28]	; (800ba70 <_fstat_r+0x20>)
 800ba54:	2300      	movs	r3, #0
 800ba56:	4604      	mov	r4, r0
 800ba58:	4608      	mov	r0, r1
 800ba5a:	4611      	mov	r1, r2
 800ba5c:	602b      	str	r3, [r5, #0]
 800ba5e:	f7f6 fd5c 	bl	800251a <_fstat>
 800ba62:	1c43      	adds	r3, r0, #1
 800ba64:	d102      	bne.n	800ba6c <_fstat_r+0x1c>
 800ba66:	682b      	ldr	r3, [r5, #0]
 800ba68:	b103      	cbz	r3, 800ba6c <_fstat_r+0x1c>
 800ba6a:	6023      	str	r3, [r4, #0]
 800ba6c:	bd38      	pop	{r3, r4, r5, pc}
 800ba6e:	bf00      	nop
 800ba70:	200017e0 	.word	0x200017e0

0800ba74 <_isatty_r>:
 800ba74:	b538      	push	{r3, r4, r5, lr}
 800ba76:	4d06      	ldr	r5, [pc, #24]	; (800ba90 <_isatty_r+0x1c>)
 800ba78:	2300      	movs	r3, #0
 800ba7a:	4604      	mov	r4, r0
 800ba7c:	4608      	mov	r0, r1
 800ba7e:	602b      	str	r3, [r5, #0]
 800ba80:	f7f6 fd5b 	bl	800253a <_isatty>
 800ba84:	1c43      	adds	r3, r0, #1
 800ba86:	d102      	bne.n	800ba8e <_isatty_r+0x1a>
 800ba88:	682b      	ldr	r3, [r5, #0]
 800ba8a:	b103      	cbz	r3, 800ba8e <_isatty_r+0x1a>
 800ba8c:	6023      	str	r3, [r4, #0]
 800ba8e:	bd38      	pop	{r3, r4, r5, pc}
 800ba90:	200017e0 	.word	0x200017e0

0800ba94 <_lseek_r>:
 800ba94:	b538      	push	{r3, r4, r5, lr}
 800ba96:	4d07      	ldr	r5, [pc, #28]	; (800bab4 <_lseek_r+0x20>)
 800ba98:	4604      	mov	r4, r0
 800ba9a:	4608      	mov	r0, r1
 800ba9c:	4611      	mov	r1, r2
 800ba9e:	2200      	movs	r2, #0
 800baa0:	602a      	str	r2, [r5, #0]
 800baa2:	461a      	mov	r2, r3
 800baa4:	f7f6 fd54 	bl	8002550 <_lseek>
 800baa8:	1c43      	adds	r3, r0, #1
 800baaa:	d102      	bne.n	800bab2 <_lseek_r+0x1e>
 800baac:	682b      	ldr	r3, [r5, #0]
 800baae:	b103      	cbz	r3, 800bab2 <_lseek_r+0x1e>
 800bab0:	6023      	str	r3, [r4, #0]
 800bab2:	bd38      	pop	{r3, r4, r5, pc}
 800bab4:	200017e0 	.word	0x200017e0

0800bab8 <__malloc_lock>:
 800bab8:	4801      	ldr	r0, [pc, #4]	; (800bac0 <__malloc_lock+0x8>)
 800baba:	f7ff bb1d 	b.w	800b0f8 <__retarget_lock_acquire_recursive>
 800babe:	bf00      	nop
 800bac0:	200017d4 	.word	0x200017d4

0800bac4 <__malloc_unlock>:
 800bac4:	4801      	ldr	r0, [pc, #4]	; (800bacc <__malloc_unlock+0x8>)
 800bac6:	f7ff bb18 	b.w	800b0fa <__retarget_lock_release_recursive>
 800baca:	bf00      	nop
 800bacc:	200017d4 	.word	0x200017d4

0800bad0 <_read_r>:
 800bad0:	b538      	push	{r3, r4, r5, lr}
 800bad2:	4d07      	ldr	r5, [pc, #28]	; (800baf0 <_read_r+0x20>)
 800bad4:	4604      	mov	r4, r0
 800bad6:	4608      	mov	r0, r1
 800bad8:	4611      	mov	r1, r2
 800bada:	2200      	movs	r2, #0
 800badc:	602a      	str	r2, [r5, #0]
 800bade:	461a      	mov	r2, r3
 800bae0:	f7f6 fcf2 	bl	80024c8 <_read>
 800bae4:	1c43      	adds	r3, r0, #1
 800bae6:	d102      	bne.n	800baee <_read_r+0x1e>
 800bae8:	682b      	ldr	r3, [r5, #0]
 800baea:	b103      	cbz	r3, 800baee <_read_r+0x1e>
 800baec:	6023      	str	r3, [r4, #0]
 800baee:	bd38      	pop	{r3, r4, r5, pc}
 800baf0:	200017e0 	.word	0x200017e0

0800baf4 <_init>:
 800baf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baf6:	bf00      	nop
 800baf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bafa:	bc08      	pop	{r3}
 800bafc:	469e      	mov	lr, r3
 800bafe:	4770      	bx	lr

0800bb00 <_fini>:
 800bb00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb02:	bf00      	nop
 800bb04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb06:	bc08      	pop	{r3}
 800bb08:	469e      	mov	lr, r3
 800bb0a:	4770      	bx	lr
